{"version":3,"sources":["BubbleTabBarItem.tsx"],"names":["add","Animated","BubbleTabBarItemComponent","animatedFocus","label","icon","background","labelStyle","labelStyleOverride","spacing","iconSize","isRTL","innerVerticalSpace","innerHorizontalSpace","outerVerticalSpace","outerHorizontalSpace","labelWidth","minWidth","maxWidth","animatedIconColor","inputRange","outputRange","inactiveColor","activeColor","containerStyle","styles","container","paddingHorizontal","paddingVertical","width","contentContainerStyle","contentContainer","flexDirection","borderRadius","backgroundColor","labelContainerStyle","labelContainer","opacity","iconContainerStyle","iconContainer","minHeight","handleTextLayout","nativeEvent","layout","requestAnimationFrame","setValue","renderIcon","IconComponent","component","color","size","BubbleTabBarItem","isEqual"],"mappings":"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","sourcesContent":["import React, { useMemo, memo } from 'react';\nimport { View, Text, LayoutChangeEvent } from 'react-native';\nimport Animated from 'react-native-reanimated';\nimport { interpolateColor, useValue } from 'react-native-redash/lib/module/v1';\n// @ts-ignore ðŸ˜ž\nimport isEqual from 'lodash.isequal';\nimport { interpolate } from '../../../utilities';\nimport type { BubbleTabBarItemProps } from '../types';\nimport { styles } from './styles';\n\nconst { add } = Animated;\n\nconst BubbleTabBarItemComponent = ({\n  animatedFocus,\n  label,\n  icon,\n  background,\n  labelStyle: labelStyleOverride,\n  spacing,\n  iconSize,\n  isRTL,\n}: BubbleTabBarItemProps) => {\n  //#region extract props\n  const {\n    innerVerticalSpace,\n    innerHorizontalSpace,\n    outerVerticalSpace,\n    outerHorizontalSpace,\n  } = spacing;\n  //#endregion\n\n  //#region variables\n  const labelWidth = useValue<number>(0);\n  /**\n   * @DEV\n   * min width is calculated by adding outer & inner spaces\n   * with the icon size.\n   */\n  const minWidth = useMemo(() => {\n    return innerHorizontalSpace * 2 + iconSize + outerHorizontalSpace * 2;\n  }, [innerHorizontalSpace, outerHorizontalSpace, iconSize]);\n  /**\n   * @DEV\n   * max width is calculated by adding inner space with label width\n   */\n  const maxWidth = add(labelWidth, innerHorizontalSpace, minWidth);\n  //#endregion\n\n  //#region styles\n  const animatedIconColor = interpolateColor(animatedFocus, {\n    inputRange: [0, 1],\n    outputRange: [icon.inactiveColor, icon.activeColor],\n  });\n  const containerStyle = [\n    styles.container,\n    {\n      paddingHorizontal: outerHorizontalSpace,\n      paddingVertical: outerVerticalSpace,\n      width: interpolate(animatedFocus, {\n        inputRange: [0, 1],\n        outputRange: [minWidth, maxWidth],\n      }),\n    },\n  ];\n  const contentContainerStyle = [\n    styles.contentContainer,\n    {\n      flexDirection: isRTL ? 'row-reverse' : 'row',\n      paddingHorizontal: innerHorizontalSpace,\n      paddingVertical: innerVerticalSpace,\n      borderRadius: innerVerticalSpace * 2 + iconSize,\n      backgroundColor: interpolateColor(animatedFocus, {\n        inputRange: [0, 1],\n        outputRange: [background.inactiveColor, background.activeColor],\n      }),\n    },\n  ];\n  const labelContainerStyle = [\n    styles.labelContainer,\n    {\n      opacity: interpolate(animatedFocus, {\n        inputRange: [0.33, 1],\n        outputRange: [0, 1],\n      }),\n      [isRTL ? 'left' : 'right']: interpolate(animatedFocus, {\n        inputRange: [0, 1],\n        outputRange: [0, innerHorizontalSpace + outerHorizontalSpace],\n      }),\n    },\n  ];\n  const iconContainerStyle = [\n    styles.iconContainer,\n    {\n      minHeight: iconSize,\n      minWidth: iconSize,\n    },\n  ];\n  const labelStyle = [styles.label, labelStyleOverride];\n  //#endregion\n\n  // callbacks\n  const handleTextLayout = ({\n    nativeEvent: {\n      layout: { width },\n    },\n  }: LayoutChangeEvent) =>\n    requestAnimationFrame(() => labelWidth.setValue(width));\n\n  // render\n  const renderIcon = () => {\n    const IconComponent: any = icon.component;\n    return typeof IconComponent === 'function' ? (\n      IconComponent({\n        animatedFocus,\n        color: animatedIconColor,\n        size: iconSize,\n      })\n    ) : (\n      <IconComponent\n        animatedFocus={animatedFocus}\n        color={animatedIconColor}\n        size={iconSize}\n      />\n    );\n  };\n\n  return (\n    <Animated.View style={containerStyle}>\n      <Animated.View style={contentContainerStyle}>\n        <View style={iconContainerStyle}>{renderIcon()}</View>\n      </Animated.View>\n      <Animated.View style={labelContainerStyle}>\n        <Text onLayout={handleTextLayout} style={labelStyle} numberOfLines={1}>\n          {label}\n        </Text>\n      </Animated.View>\n    </Animated.View>\n  );\n};\n\nconst BubbleTabBarItem = memo(BubbleTabBarItemComponent, isEqual);\n\nexport default BubbleTabBarItem;\n"]}