{"version":3,"sources":["MaterialTabBar.tsx"],"names":["MaterialTabBarComponent","selectedIndex","tabs","duration","DEFAULT_ITEM_ANIMATION_DURATION","easing","DEFAULT_ITEM_ANIMATION_EASING","animation","DEFAULT_CONFIG_ANIMATION","inactiveOpacity","DEFAULT_CONFIG_INACTIVE_OPACITY","inactiveScale","DEFAULT_CONFIG_INACTIVE_SCALE","itemInnerSpace","itemOuterSpace","itemContainerWidth","DEFAULT_ITEM_CONTAINER_WIDTH","iconSize","DEFAULT_ITEM_ICON_SIZE","isRTL","DEFAULT_ITEM_LAYOUT_DIRECTION","style","containerStyleOverride","onLongPress","noop","animatedOnChange","containerLayout","setContainerLayout","width","height","tabsPosition","setTabsPosition","animatedFocusValues","map","_","index","tabBarItemSpacing","DEFAULT_ITEM_INNER_SPACE","DEFAULT_ITEM_OUTER_SPACE","containerStyle","styles","container","flexDirection","backgroundColor","_value","ripple","color","rawButtonStyle","flex","handleTabItemLayout","position","state","handleContainerLayout","nativeEvent","layout","Object","keys","length","values","key","title","configs","MaterialTabBar","isEqual"],"mappings":"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","sourcesContent":["import React, { useMemo, memo, useState } from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleProp,\n  LayoutRectangle,\n  LayoutChangeEvent,\n} from 'react-native';\n// @ts-ignore ðŸ˜ž\nimport isEqual from 'lodash.isequal';\nimport MaterialTabBarItem from './item';\nimport MaterialTabBarRipple from './ripple';\nimport RawButton from '../../components/rawButton';\nimport {\n  DEFAULT_ITEM_ANIMATION_DURATION,\n  DEFAULT_ITEM_ANIMATION_EASING,\n  DEFAULT_ITEM_INNER_SPACE,\n  DEFAULT_ITEM_OUTER_SPACE,\n  DEFAULT_ITEM_ICON_SIZE,\n  DEFAULT_ITEM_LAYOUT_DIRECTION,\n  DEFAULT_ITEM_CONTAINER_WIDTH,\n  DEFAULT_CONFIG_ANIMATION,\n  DEFAULT_CONFIG_INACTIVE_OPACITY,\n  DEFAULT_CONFIG_INACTIVE_SCALE,\n} from './constants';\nimport {\n  useTabBarItemFocusTransition,\n  useTabBarItemSpacing,\n  useStableCallback,\n} from '../../hooks';\nimport { noop } from '../../utilities';\nimport type { TabBarViewProps } from '../../types';\nimport type { MaterialTabBarConfig, MaterialTabBarItemConfig } from './types';\nimport { styles } from './styles';\n\nconst MaterialTabBarComponent = ({\n  selectedIndex,\n  tabs,\n  duration = DEFAULT_ITEM_ANIMATION_DURATION,\n  easing = DEFAULT_ITEM_ANIMATION_EASING,\n  animation = DEFAULT_CONFIG_ANIMATION,\n  inactiveOpacity = DEFAULT_CONFIG_INACTIVE_OPACITY,\n  inactiveScale = DEFAULT_CONFIG_INACTIVE_SCALE,\n  itemInnerSpace,\n  itemOuterSpace,\n  itemContainerWidth = DEFAULT_ITEM_CONTAINER_WIDTH,\n  iconSize = DEFAULT_ITEM_ICON_SIZE,\n  isRTL = DEFAULT_ITEM_LAYOUT_DIRECTION,\n  style: containerStyleOverride,\n  onLongPress = noop,\n  animatedOnChange,\n}: TabBarViewProps<MaterialTabBarConfig, MaterialTabBarItemConfig>) => {\n  //#region variables\n  const [containerLayout, setContainerLayout] = useState({\n    width: 0,\n    height: 0,\n  });\n  const [tabsPosition, setTabsPosition] = useState<{\n    [key: number]: LayoutRectangle;\n  }>([]);\n  const animatedFocusValues = useMemo(\n    () =>\n      tabs.map((_, index) =>\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        useTabBarItemFocusTransition({\n          index,\n          selectedIndex,\n          duration,\n          easing,\n        })\n      ),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [tabs, duration, easing]\n  );\n  const tabBarItemSpacing = useTabBarItemSpacing(\n    itemInnerSpace,\n    itemOuterSpace,\n    DEFAULT_ITEM_INNER_SPACE,\n    DEFAULT_ITEM_OUTER_SPACE\n  );\n  //#endregion\n\n  //#region Styles\n  const containerStyle = useMemo<StyleProp<ViewStyle>>(\n    () => [\n      styles.container,\n      containerStyleOverride,\n      {\n        flexDirection: isRTL ? 'row-reverse' : 'row',\n        // @ts-ignore\n        backgroundColor: tabs[selectedIndex._value ?? 0].ripple.color,\n      },\n    ],\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [containerStyleOverride, isRTL]\n  );\n  const rawButtonStyle = useMemo(\n    () => (itemContainerWidth === 'fill' ? { flex: 1 } : {}),\n    [itemContainerWidth]\n  );\n  //#endregion\n\n  //#region callbacks\n  const handleTabItemLayout = useStableCallback((index, position) => {\n    setTabsPosition(state => {\n      return { ...state, [index]: position };\n    });\n  });\n  const handleContainerLayout = useStableCallback(\n    ({\n      nativeEvent: {\n        layout: { height, width },\n      },\n    }: LayoutChangeEvent) => {\n      setContainerLayout({ height, width });\n    }\n  );\n  //#endregion\n\n  // render\n  return (\n    <View style={containerStyle} onLayout={handleContainerLayout}>\n      {Object.keys(tabsPosition).length === tabs.length ? (\n        <MaterialTabBarRipple\n          tabs={tabs}\n          tabItemPositions={Object.values(tabsPosition)}\n          selectedIndex={selectedIndex}\n          animatedFocusValues={animatedFocusValues}\n          width={containerLayout.width}\n          height={containerLayout.height}\n        />\n      ) : null}\n      {tabs.map(({ key, title, ...configs }, index) => {\n        return (\n          <RawButton\n            key={key}\n            index={index}\n            selectedIndex={selectedIndex}\n            accessibilityLabel={title}\n            style={rawButtonStyle}\n            animatedOnChange={animatedOnChange}\n            onLayout={handleTabItemLayout}\n            onLongPress={onLongPress}\n          >\n            <MaterialTabBarItem\n              index={index}\n              animatedFocus={animatedFocusValues[index]}\n              animation={animation}\n              inactiveOpacity={inactiveOpacity}\n              inactiveScale={inactiveScale}\n              label={title}\n              spacing={tabBarItemSpacing}\n              itemContainerWidth={itemContainerWidth}\n              iconSize={iconSize}\n              isRTL={isRTL}\n              {...configs}\n            />\n          </RawButton>\n        );\n      })}\n    </View>\n  );\n};\n\nconst MaterialTabBar = memo(MaterialTabBarComponent, isEqual);\n\nexport default MaterialTabBar;\n"]}