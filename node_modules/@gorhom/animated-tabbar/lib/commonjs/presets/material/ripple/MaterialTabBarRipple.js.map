{"version":3,"sources":["MaterialTabBarRipple.tsx"],"names":["AnimatedCircle","Animated","createAnimatedComponent","Circle","SCREEN_WIDTH","Dimensions","get","width","MaterialTabBarRippleComponent","selectedIndex","tabs","tabItemPositions","animatedFocusValues","height","svgRef","animatedMounted","animatedValue","Value","animatedColors","map","item","ripple","color","containerStyle","styles","container","animatedXs","x","animatedCircleX","animatedYs","y","animatedCircleY","animatedRadius","animatedCircleRadius","inputRange","outputRange","extrapolate","Extrapolate","CLAMP","animatedCircleFill","setSVGBackground","args","current","setNativeProps","backgroundColor","MaterialTabBarRipple","isEqual"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAcA;;AACA;;AACA;;AAEA;;;;;;;;AALA;AAOA,MAAMA,cAAc,GAAGC,+BAASC,uBAAT,CAAiCC,sBAAjC,CAAvB;;AAWA,MAAMC,YAAY,GAAGC,wBAAWC,GAAX,CAAe,QAAf,EAAyBC,KAA9C;;AAEA,MAAMC,6BAA6B,GAAG,CAAC;AACrCC,EAAAA,aADqC;AAErCC,EAAAA,IAFqC;AAGrCC,EAAAA,gBAHqC;AAIrCC,EAAAA,mBAJqC;AAKrCL,EAAAA,KAAK,GAAGH,YAL6B;AAMrCS,EAAAA,MAAM,GAAG;AAN4B,CAAD,KAOL;AAC/B;AACA,QAAMC,MAAM,GAAG,mBAA4C,IAA5C,CAAf;AACA,QAAMC,eAAe,GAAG,iBAAS,CAAT,CAAxB;AACA,QAAMC,aAAa,GAAG,YAAIJ,mBAAJ,EAAyBH,aAAzB,EAAwC,IAAIQ,4BAAJ,CAAU,CAAV,CAAxC,CAAtB;AACA,QAAMC,cAAc,GAAG,kBACrB,GAAGR,IAAI,CAACS,GAAL,CAASC,IAAI,IAAI,+BAAaA,IAAI,CAACC,MAAL,CAAYC,KAAzB,CAAjB,CADkB,CAAvB,CAL+B,CAQ/B;AAEA;;AACA,QAAMC,cAAc,GAAG,oBACrB,MAAM,CACJC,eAAOC,SADH,EAEJ;AACElB,IAAAA,KADF;AAEEM,IAAAA;AAFF,GAFI,CADe,EAQrB,CAACN,KAAD,EAAQM,MAAR,CARqB,CAAvB,CAX+B,CAqB/B;AAEA;;AACA,QAAMa,UAAU,GAAG,kBACjB,GAAGf,gBAAgB,CAACQ,GAAjB,CAAqBC,IAAI,IAAIA,IAAI,CAACO,CAAL,GAASP,IAAI,CAACb,KAAL,GAAa,CAAnD,CADc,CAAnB;AAGA,QAAMqB,eAAe,GAAG,YAAIF,UAAJ,EAAgBjB,aAAhB,EAA+B,IAAIR,+BAASgB,KAAb,CAAmB,CAAnB,CAA/B,CAAxB;AACA,QAAMY,UAAU,GAAG,kBACjB,GAAGlB,gBAAgB,CAACQ,GAAjB,CAAqBC,IAAI,IAAIA,IAAI,CAACU,CAAL,GAASV,IAAI,CAACP,MAAL,GAAc,CAApD,CADc,CAAnB;AAGA,QAAMkB,eAAe,GAAG,YAAIF,UAAJ,EAAgBpB,aAAhB,EAA+B,IAAIR,+BAASgB,KAAb,CAAmB,CAAnB,CAA/B,CAAxB;AACA,QAAMe,cAAc,GAAGN,UAAU,CAACP,GAAX,CAAeQ,CAAC,IACrC,gCAAIpB,KAAK,GAAG,CAAZ,EAAe,gCAAI,gCAAIA,KAAK,GAAG,CAAZ,EAAeoB,CAAf,CAAJ,CAAf,CADqB,CAAvB;AAGA,QAAMM,oBAAoB,GAAG,4BAAYjB,aAAZ,EAA2B;AACtDkB,IAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CAD0C;AAEtDC,IAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,YAAIH,cAAJ,EAAoBvB,aAApB,EAAmC,IAAIR,+BAASgB,KAAb,CAAmB,CAAnB,CAAnC,CAAJ,CAFyC;AAGtDmB,IAAAA,WAAW,EAAEC,mCAAYC;AAH6B,GAA3B,CAA7B;AAKA,QAAMC,kBAAkB,GAAG,YACzBrB,cADyB,EAEzBT,aAFyB,EAGzB,IAAIR,+BAASgB,KAAb,CAAmB,+BAAa,OAAb,CAAnB,CAHyB,CAA3B,CAxC+B,CA6C/B;AAEA;;AACA,QAAMuB,gBAAgB,GAAG,iCAAK,CAAC/B,aAAD,CAAL,EAAsBgC,IAAI,IAAI;AACrD;AACA3B,IAAAA,MAAM,CAAC4B,OAAP,CAAgBC,cAAhB,CAA+B;AAC7BC,MAAAA,eAAe,EAAElC,IAAI,CAAC+B,IAAI,CAAC,CAAD,CAAL,CAAJ,CAAcpB,MAAd,CAAqBC;AADT,KAA/B;AAGD,GALwB,CAAzB,CAhD+B,CAsD/B;AAEA;;AACA,sCACE,MAAM,CACJ,qCAASN,aAAT,EAAwB,iCAAK,+BAAGA,aAAH,EAAkB,CAAlB,CAAL,EAA2BwB,gBAA3B,CAAxB,CADI,EAEJ,iCAAK,+BAAGzB,eAAH,EAAoB,CAApB,CAAL,EAA6B,CAACyB,gBAAD,EAAmB,gCAAIzB,eAAJ,EAAqB,CAArB,CAAnB,CAA7B,CAFI,CADR,EAKE,CAACN,aAAD,CALF,EAzD+B,CAgE/B;;AACA,sBACE,6BAAC,uBAAD;AACE,IAAA,GAAG,EAAEK,MADP;AAEE,IAAA,aAAa,EAAC,MAFhB;AAGE,IAAA,KAAK,EAAEP,KAHT;AAIE,IAAA,MAAM,EAAEM,MAJV;AAKE,IAAA,KAAK,EAAEU;AALT,kBAOE,6BAAC,cAAD;AACE,IAAA,aAAa,EAAC,MADhB;AAEE,IAAA,IAAI,EAAEgB,kBAFR;AAGE,IAAA,CAAC,EAAEN,oBAHL;AAIE,IAAA,EAAE,EAAEF,eAJN;AAKE,IAAA,EAAE,EAAEH;AALN,IAPF,CADF;AAiBD,CAzFD;;AA2FA,MAAMiB,oBAAoB,gBAAG,iBAAKrC,6BAAL,EAAoCsC,eAApC,CAA7B;eAEeD,oB","sourcesContent":["import React, { memo, useMemo, useRef } from 'react';\nimport { LayoutRectangle, Dimensions, processColor } from 'react-native';\nimport Svg, { SvgProps, Circle } from 'react-native-svg';\nimport Animated, {\n  useCode,\n  call,\n  add,\n  sub,\n  Extrapolate,\n  abs,\n  onChange,\n  eq,\n  cond,\n  set,\n  Value,\n} from 'react-native-reanimated';\n// @ts-ignore ðŸ˜ž\nimport isEqual from 'lodash.isequal';\nimport { useValues, get, useValue } from 'react-native-redash/lib/module/v1';\nimport { interpolate } from '../../../utilities';\nimport type { MaterialTabBarItemConfig } from '../types';\nimport { styles } from './styles';\n\nconst AnimatedCircle = Animated.createAnimatedComponent(Circle);\n\ninterface MaterialTabBarRippleProps {\n  tabs: Array<MaterialTabBarItemConfig>;\n  tabItemPositions: Array<LayoutRectangle>;\n  animatedFocusValues: Array<Animated.Node<number>>;\n  selectedIndex: Animated.Node<number>;\n  width: number;\n  height: number;\n}\n\nconst SCREEN_WIDTH = Dimensions.get('screen').width;\n\nconst MaterialTabBarRippleComponent = ({\n  selectedIndex,\n  tabs,\n  tabItemPositions,\n  animatedFocusValues,\n  width = SCREEN_WIDTH,\n  height = 0,\n}: MaterialTabBarRippleProps) => {\n  //#region variables\n  const svgRef = useRef<React.Component<SvgProps, any, any>>(null);\n  const animatedMounted = useValue(0);\n  const animatedValue = get(animatedFocusValues, selectedIndex, new Value(1));\n  const animatedColors = useValues(\n    ...tabs.map(item => processColor(item.ripple.color))\n  );\n  //#endregion\n\n  //#region styles\n  const containerStyle = useMemo(\n    () => [\n      styles.container,\n      {\n        width,\n        height,\n      },\n    ],\n    [width, height]\n  );\n  //#endregion\n\n  //#region Ripple\n  const animatedXs = useValues(\n    ...tabItemPositions.map(item => item.x + item.width / 2)\n  );\n  const animatedCircleX = get(animatedXs, selectedIndex, new Animated.Value(0));\n  const animatedYs = useValues(\n    ...tabItemPositions.map(item => item.y + item.height / 2)\n  );\n  const animatedCircleY = get(animatedYs, selectedIndex, new Animated.Value(0));\n  const animatedRadius = animatedXs.map(x =>\n    add(width / 2, abs(sub(width / 2, x)))\n  );\n  const animatedCircleRadius = interpolate(animatedValue, {\n    inputRange: [0, 1],\n    outputRange: [0, get(animatedRadius, selectedIndex, new Animated.Value(0))],\n    extrapolate: Extrapolate.CLAMP,\n  });\n  const animatedCircleFill = get(\n    animatedColors,\n    selectedIndex,\n    new Animated.Value(processColor('white'))\n  );\n  //#endregion\n\n  //#region callbacks\n  const setSVGBackground = call([selectedIndex], args => {\n    // @ts-ignore\n    svgRef.current!.setNativeProps({\n      backgroundColor: tabs[args[0]].ripple.color,\n    });\n  });\n  //#endregion\n\n  //#region effects\n  useCode(\n    () => [\n      onChange(animatedValue, cond(eq(animatedValue, 1), setSVGBackground)),\n      cond(eq(animatedMounted, 0), [setSVGBackground, set(animatedMounted, 1)]),\n    ],\n    [selectedIndex]\n  );\n  //#endregion\n  return (\n    <Svg\n      ref={svgRef}\n      pointerEvents=\"none\"\n      width={width}\n      height={height}\n      style={containerStyle}\n    >\n      <AnimatedCircle\n        pointerEvents=\"none\"\n        fill={animatedCircleFill}\n        r={animatedCircleRadius}\n        cy={animatedCircleY}\n        cx={animatedCircleX}\n      />\n    </Svg>\n  );\n};\n\nconst MaterialTabBarRipple = memo(MaterialTabBarRippleComponent, isEqual);\n\nexport default MaterialTabBarRipple;\n"]}