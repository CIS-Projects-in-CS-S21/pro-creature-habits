{"version":3,"sources":["AnimatedTabBarView.tsx"],"names":["proc","call","Animated","addWhitelistedNativeProps","width","stroke","backgroundColor","AnimatedTabBarView","props","index","controlledIndex","onIndexChange","onLongPress","tabs","_tabs","preset","style","itemInnerSpace","itemOuterSpace","itemContainerWidth","iconSize","duration","easing","isRTL","rest","Object","keys","Presets","includes","Error","join","selectedIndex","map","key","title","indexRef","setValue","animatedOnChange","args","current","PresetComponent","component"],"mappings":"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","sourcesContent":["import React, { useMemo, useEffect, useRef } from 'react';\nimport Animated from 'react-native-reanimated';\nimport { useValue } from 'react-native-redash/lib/module/v1';\nimport Presets, { PresetEnum } from './presets';\nimport type { AnimatedTabBarViewProps } from './types';\n\nconst { proc, call } = Animated;\n/**\n * @DEV\n * this is needed for react-native-svg to animate on the native thread.\n * @external (https://github.com/software-mansion/react-native-reanimated/issues/537)\n */\nAnimated.addWhitelistedNativeProps({\n  width: true,\n  stroke: true,\n  backgroundColor: true,\n});\n\nexport function AnimatedTabBarView<T extends PresetEnum>(\n  props: AnimatedTabBarViewProps<T>\n) {\n  // props\n  const {\n    index: controlledIndex,\n    onIndexChange,\n    onLongPress,\n    tabs: _tabs,\n    preset = 'bubble',\n    style,\n    itemInnerSpace,\n    itemOuterSpace,\n    itemContainerWidth,\n    iconSize,\n    duration,\n    easing,\n    isRTL,\n    ...rest\n  } = props;\n\n  // verify props\n  if (!Object.keys(Presets).includes(preset)) {\n    throw new Error(\n      `Wrong preset been provided. expected one of these: [${Object.keys(\n        Presets\n      ).join(', ')}], but found \"${preset}\".`\n    );\n  }\n\n  // variables\n  const selectedIndex = useValue(controlledIndex);\n  const tabs = useMemo(() => {\n    return Object.keys(_tabs).map(key => {\n      return _tabs[key].title && _tabs[key].key\n        ? _tabs[key]\n        : {\n            title: key,\n            key: `tab-${key}`,\n            ..._tabs[key],\n          };\n    });\n  }, [_tabs]);\n\n  //#region Effects\n  const indexRef = useRef(controlledIndex);\n  /**\n   * @DEV\n   * here we listen to the controlled index and update\n   * selectedIndex value.\n   */\n  useEffect(() => {\n    selectedIndex.setValue(controlledIndex);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [controlledIndex]);\n\n  /**\n   * @DEV\n   * here we listen to selectedIndex and call `onIndexChange`\n   */\n  const animatedOnChange = useMemo(\n    () =>\n      proc((index: number) =>\n        call([index], args => {\n          if (onIndexChange) {\n            indexRef.current = args[0];\n            onIndexChange(args[0]);\n          }\n        })\n      ),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n  //#endregion\n\n  const PresetComponent = Presets[preset].component;\n\n  // render\n  return (\n    <PresetComponent\n      style={style}\n      selectedIndex={selectedIndex}\n      animatedOnChange={animatedOnChange}\n      // @ts-ignore\n      tabs={tabs}\n      itemInnerSpace={itemInnerSpace}\n      itemOuterSpace={itemOuterSpace}\n      itemContainerWidth={itemContainerWidth}\n      iconSize={iconSize}\n      duration={duration}\n      easing={easing}\n      isRTL={isRTL}\n      onLongPress={onLongPress}\n      {...rest}\n    />\n  );\n}\n"]}