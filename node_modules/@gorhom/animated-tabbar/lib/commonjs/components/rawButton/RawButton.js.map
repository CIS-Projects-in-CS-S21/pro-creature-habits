{"version":3,"sources":["RawButton.tsx"],"names":["useCode","cond","onChange","eq","Animated","RawButton","index","selectedIndex","accessibilityLabel","children","style","animatedOnChange","onLongPress","onLayout","rootViewRef","longPressGestureHandlerRef","tapGestureState","State","UNDETERMINED","tapGestureHandler","state","longPressGestureState","longPressGestureHandler","END","ACTIVE","args","current","setNativeProps","accessibilityState","selected","handleContainerLayout","nativeEvent","layout"],"mappings":";;;;;;;AAAA;;AAOA;;AACA;;AAKA;;AACA;;;;;;;;AAEA,MAAM;AAAEA,EAAAA,OAAF;AAAWC,EAAAA,IAAX;AAAiBC,EAAAA,QAAjB;AAA2BC,EAAAA;AAA3B,IAAkCC,8BAAxC;;AAaA,MAAMC,SAAS,GAAG,CAAC;AACjBC,EAAAA,KADiB;AAEjBC,EAAAA,aAFiB;AAGjBC,EAAAA,kBAHiB;AAIjBC,EAAAA,QAJiB;AAKjBC,EAAAA,KALiB;AAMjBC,EAAAA,gBANiB;AAOjBC,EAAAA,WAPiB;AAQjBC,EAAAA;AARiB,CAAD,KASI;AACpB;AACA,QAAMC,WAAW,GAAG,mBAAsB,IAAtB,CAApB;AACA,QAAMC,0BAA0B,GAAG,mBAAgC,IAAhC,CAAnC,CAHoB,CAKpB;;AACA,QAAMC,eAAe,GAAG,iBAASC,iCAAMC,YAAf,CAAxB;AACA,QAAMC,iBAAiB,GAAG,0BAAkB;AAAEC,IAAAA,KAAK,EAAEJ;AAAT,GAAlB,CAA1B,CAPoB,CASpB;;AACA,QAAMK,qBAAqB,GAAG,iBAASJ,iCAAMC,YAAf,CAA9B;AACA,QAAMI,uBAAuB,GAAG,0BAAkB;AAChDF,IAAAA,KAAK,EAAEC;AADyC,GAAlB,CAAhC,CAXoB,CAepB;;AACArB,EAAAA,OAAO,CACL,MAAM,CACJE,QAAQ,CACNc,eADM,EAENf,IAAI,CAACE,EAAE,CAACa,eAAD,EAAkBC,iCAAMM,GAAxB,CAAH,EAAiCZ,gBAAgB,CAACL,KAAD,CAAjD,CAFE,CADJ,EAKJJ,QAAQ,CACNmB,qBADM,EAENpB,IAAI,CACFE,EAAE,CAACkB,qBAAD,EAAwBJ,iCAAMO,MAA9B,CADA,EAEF,iCAAK,EAAL,EAAS,MAAM;AACbZ,IAAAA,WAAW,CAACN,KAAD,CAAX;AACD,GAFD,CAFE,CAFE,CALJ,EAcJJ,QAAQ,CACNK,aADM,EAEN,iCAAK,CAACA,aAAD,CAAL,EAAsBkB,IAAI,IAAI;AAC5B;AACAX,IAAAA,WAAW,CAACY,OAAZ,CAAoBC,cAApB,CAAmC;AACjCC,MAAAA,kBAAkB,EAAE;AAClBC,QAAAA,QAAQ,EAAEJ,IAAI,CAAC,CAAD,CAAJ,KAAYnB;AADJ;AADa,KAAnC;AAKD,GAPD,CAFM,CAdJ,CADD,EA2BL,CAACA,KAAD,CA3BK,CAAP,CAhBoB,CA8CpB;;AACA,QAAMwB,qBAAqB,GAAG,8BAC5B,CAAC;AAAEC,IAAAA,WAAW,EAAE;AAAEC,MAAAA;AAAF;AAAf,GAAD,KACEnB,QAAQ,IAAIA,QAAQ,CAACP,KAAD,EAAQ0B,MAAR,CAFM,CAA9B;AAKA,sBACE,6BAAC,4CAAD;AACE,IAAA,OAAO,EAAEjB;AADX,KAEMI,iBAFN,gBAIE,6BAAC,8BAAD,CAAU,IAAV;AACE,IAAA,GAAG,EAAEL,WADP;AAEE,IAAA,UAAU,EAAE,IAFd;AAGE,IAAA,kBAAkB,EAAEN,kBAHtB;AAIE,IAAA,iBAAiB,EAAC,QAJpB;AAKE,IAAA,0BAA0B,EAAC,QAL7B;AAME,IAAA,QAAQ,EAAEsB,qBANZ;AAOE,IAAA,KAAK,EAAEpB;AAPT,kBASE,6BAAC,kDAAD;AACE,IAAA,GAAG,EAAEK;AADP,KAEMO,uBAFN,gBAIE,6BAAC,8BAAD,CAAU,IAAV,QAAgBb,QAAhB,CAJF,CATF,CAJF,CADF;AAuBD,CApFD;;eAsFeJ,S","sourcesContent":["import React, { useRef } from 'react';\nimport type {\n  StyleProp,\n  ViewStyle,\n  LayoutChangeEvent,\n  LayoutRectangle,\n} from 'react-native';\nimport Animated, { call } from 'react-native-reanimated';\nimport {\n  State,\n  TapGestureHandler,\n  LongPressGestureHandler,\n} from 'react-native-gesture-handler';\nimport { useValue, useGestureHandler } from 'react-native-redash/lib/module/v1';\nimport { useStableCallback } from '../../hooks';\n\nconst { useCode, cond, onChange, eq } = Animated;\n\ninterface RawButtonProps {\n  index: number;\n  selectedIndex: Animated.Value<number>;\n  accessibilityLabel: string;\n  children: React.ReactNode[] | React.ReactNode;\n  style?: StyleProp<Animated.AnimateStyle<ViewStyle>>;\n  animatedOnChange: (index: number) => Animated.Node<number>;\n  onLongPress: (index: number) => void;\n  onLayout?: (index: number, layout: LayoutRectangle) => void;\n}\n\nconst RawButton = ({\n  index,\n  selectedIndex,\n  accessibilityLabel,\n  children,\n  style,\n  animatedOnChange,\n  onLongPress,\n  onLayout,\n}: RawButtonProps) => {\n  // refs\n  const rootViewRef = useRef<Animated.View>(null);\n  const longPressGestureHandlerRef = useRef<LongPressGestureHandler>(null);\n\n  // tap gesture\n  const tapGestureState = useValue(State.UNDETERMINED);\n  const tapGestureHandler = useGestureHandler({ state: tapGestureState });\n\n  // long press gesture\n  const longPressGestureState = useValue(State.UNDETERMINED);\n  const longPressGestureHandler = useGestureHandler({\n    state: longPressGestureState,\n  });\n\n  // effects\n  useCode(\n    () => [\n      onChange(\n        tapGestureState,\n        cond(eq(tapGestureState, State.END), animatedOnChange(index))\n      ),\n      onChange(\n        longPressGestureState,\n        cond(\n          eq(longPressGestureState, State.ACTIVE),\n          call([], () => {\n            onLongPress(index);\n          })\n        )\n      ),\n      onChange(\n        selectedIndex,\n        call([selectedIndex], args => {\n          // @ts-ignore\n          rootViewRef.current.setNativeProps({\n            accessibilityState: {\n              selected: args[0] === index,\n            },\n          });\n        })\n      ),\n    ],\n    [index]\n  );\n\n  // callbacks\n  const handleContainerLayout = useStableCallback(\n    ({ nativeEvent: { layout } }: LayoutChangeEvent) =>\n      onLayout && onLayout(index, layout)\n  );\n\n  return (\n    <TapGestureHandler\n      waitFor={longPressGestureHandlerRef}\n      {...tapGestureHandler}\n    >\n      <Animated.View\n        ref={rootViewRef}\n        accessible={true}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityRole=\"button\"\n        accessibilityComponentType=\"button\"\n        onLayout={handleContainerLayout}\n        style={style}\n      >\n        <LongPressGestureHandler\n          ref={longPressGestureHandlerRef}\n          {...longPressGestureHandler}\n        >\n          <Animated.View>{children}</Animated.View>\n        </LongPressGestureHandler>\n      </Animated.View>\n    </TapGestureHandler>\n  );\n};\n\nexport default RawButton;\n"]}