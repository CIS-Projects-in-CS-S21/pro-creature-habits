{"version":3,"sources":["AnimatedTabBarView.tsx"],"names":["React","useMemo","useEffect","useRef","Animated","useValue","Presets","proc","call","addWhitelistedNativeProps","width","stroke","backgroundColor","AnimatedTabBarView","props","index","controlledIndex","onIndexChange","onLongPress","tabs","_tabs","preset","style","itemInnerSpace","itemOuterSpace","itemContainerWidth","iconSize","duration","easing","isRTL","rest","Object","keys","includes","Error","join","selectedIndex","map","key","title","indexRef","setValue","animatedOnChange","args","current","PresetComponent","component"],"mappings":"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","sourcesContent":["import React, { useMemo, useEffect, useRef } from 'react';\nimport Animated from 'react-native-reanimated';\nimport { useValue } from 'react-native-redash/lib/module/v1';\nimport Presets, { PresetEnum } from './presets';\nimport type { AnimatedTabBarViewProps } from './types';\n\nconst { proc, call } = Animated;\n/**\n * @DEV\n * this is needed for react-native-svg to animate on the native thread.\n * @external (https://github.com/software-mansion/react-native-reanimated/issues/537)\n */\nAnimated.addWhitelistedNativeProps({\n  width: true,\n  stroke: true,\n  backgroundColor: true,\n});\n\nexport function AnimatedTabBarView<T extends PresetEnum>(\n  props: AnimatedTabBarViewProps<T>\n) {\n  // props\n  const {\n    index: controlledIndex,\n    onIndexChange,\n    onLongPress,\n    tabs: _tabs,\n    preset = 'bubble',\n    style,\n    itemInnerSpace,\n    itemOuterSpace,\n    itemContainerWidth,\n    iconSize,\n    duration,\n    easing,\n    isRTL,\n    ...rest\n  } = props;\n\n  // verify props\n  if (!Object.keys(Presets).includes(preset)) {\n    throw new Error(\n      `Wrong preset been provided. expected one of these: [${Object.keys(\n        Presets\n      ).join(', ')}], but found \"${preset}\".`\n    );\n  }\n\n  // variables\n  const selectedIndex = useValue(controlledIndex);\n  const tabs = useMemo(() => {\n    return Object.keys(_tabs).map(key => {\n      return _tabs[key].title && _tabs[key].key\n        ? _tabs[key]\n        : {\n            title: key,\n            key: `tab-${key}`,\n            ..._tabs[key],\n          };\n    });\n  }, [_tabs]);\n\n  //#region Effects\n  const indexRef = useRef(controlledIndex);\n  /**\n   * @DEV\n   * here we listen to the controlled index and update\n   * selectedIndex value.\n   */\n  useEffect(() => {\n    selectedIndex.setValue(controlledIndex);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [controlledIndex]);\n\n  /**\n   * @DEV\n   * here we listen to selectedIndex and call `onIndexChange`\n   */\n  const animatedOnChange = useMemo(\n    () =>\n      proc((index: number) =>\n        call([index], args => {\n          if (onIndexChange) {\n            indexRef.current = args[0];\n            onIndexChange(args[0]);\n          }\n        })\n      ),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n  //#endregion\n\n  const PresetComponent = Presets[preset].component;\n\n  // render\n  return (\n    <PresetComponent\n      style={style}\n      selectedIndex={selectedIndex}\n      animatedOnChange={animatedOnChange}\n      // @ts-ignore\n      tabs={tabs}\n      itemInnerSpace={itemInnerSpace}\n      itemOuterSpace={itemOuterSpace}\n      itemContainerWidth={itemContainerWidth}\n      iconSize={iconSize}\n      duration={duration}\n      easing={easing}\n      isRTL={isRTL}\n      onLongPress={onLongPress}\n      {...rest}\n    />\n  );\n}\n"]}