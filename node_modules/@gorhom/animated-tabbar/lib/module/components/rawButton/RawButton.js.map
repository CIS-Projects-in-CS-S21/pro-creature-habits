{"version":3,"sources":["RawButton.tsx"],"names":["React","useRef","Animated","call","State","TapGestureHandler","LongPressGestureHandler","useValue","useGestureHandler","useStableCallback","useCode","cond","onChange","eq","RawButton","index","selectedIndex","accessibilityLabel","children","style","animatedOnChange","onLongPress","onLayout","rootViewRef","longPressGestureHandlerRef","tapGestureState","UNDETERMINED","tapGestureHandler","state","longPressGestureState","longPressGestureHandler","END","ACTIVE","args","current","setNativeProps","accessibilityState","selected","handleContainerLayout","nativeEvent","layout"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AAOA,OAAOC,QAAP,IAAmBC,IAAnB,QAA+B,yBAA/B;AACA,SACEC,KADF,EAEEC,iBAFF,EAGEC,uBAHF,QAIO,8BAJP;AAKA,SAASC,QAAT,EAAmBC,iBAAnB,QAA4C,mCAA5C;AACA,SAASC,iBAAT,QAAkC,aAAlC;AAEA,MAAM;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,IAAX;AAAiBC,EAAAA,QAAjB;AAA2BC,EAAAA;AAA3B,IAAkCX,QAAxC;;AAaA,MAAMY,SAAS,GAAG,CAAC;AACjBC,EAAAA,KADiB;AAEjBC,EAAAA,aAFiB;AAGjBC,EAAAA,kBAHiB;AAIjBC,EAAAA,QAJiB;AAKjBC,EAAAA,KALiB;AAMjBC,EAAAA,gBANiB;AAOjBC,EAAAA,WAPiB;AAQjBC,EAAAA;AARiB,CAAD,KASI;AACpB;AACA,QAAMC,WAAW,GAAGtB,MAAM,CAAgB,IAAhB,CAA1B;AACA,QAAMuB,0BAA0B,GAAGvB,MAAM,CAA0B,IAA1B,CAAzC,CAHoB,CAKpB;;AACA,QAAMwB,eAAe,GAAGlB,QAAQ,CAACH,KAAK,CAACsB,YAAP,CAAhC;AACA,QAAMC,iBAAiB,GAAGnB,iBAAiB,CAAC;AAAEoB,IAAAA,KAAK,EAAEH;AAAT,GAAD,CAA3C,CAPoB,CASpB;;AACA,QAAMI,qBAAqB,GAAGtB,QAAQ,CAACH,KAAK,CAACsB,YAAP,CAAtC;AACA,QAAMI,uBAAuB,GAAGtB,iBAAiB,CAAC;AAChDoB,IAAAA,KAAK,EAAEC;AADyC,GAAD,CAAjD,CAXoB,CAepB;;AACAnB,EAAAA,OAAO,CACL,MAAM,CACJE,QAAQ,CACNa,eADM,EAENd,IAAI,CAACE,EAAE,CAACY,eAAD,EAAkBrB,KAAK,CAAC2B,GAAxB,CAAH,EAAiCX,gBAAgB,CAACL,KAAD,CAAjD,CAFE,CADJ,EAKJH,QAAQ,CACNiB,qBADM,EAENlB,IAAI,CACFE,EAAE,CAACgB,qBAAD,EAAwBzB,KAAK,CAAC4B,MAA9B,CADA,EAEF7B,IAAI,CAAC,EAAD,EAAK,MAAM;AACbkB,IAAAA,WAAW,CAACN,KAAD,CAAX;AACD,GAFG,CAFF,CAFE,CALJ,EAcJH,QAAQ,CACNI,aADM,EAENb,IAAI,CAAC,CAACa,aAAD,CAAD,EAAkBiB,IAAI,IAAI;AAC5B;AACAV,IAAAA,WAAW,CAACW,OAAZ,CAAoBC,cAApB,CAAmC;AACjCC,MAAAA,kBAAkB,EAAE;AAClBC,QAAAA,QAAQ,EAAEJ,IAAI,CAAC,CAAD,CAAJ,KAAYlB;AADJ;AADa,KAAnC;AAKD,GAPG,CAFE,CAdJ,CADD,EA2BL,CAACA,KAAD,CA3BK,CAAP,CAhBoB,CA8CpB;;AACA,QAAMuB,qBAAqB,GAAG7B,iBAAiB,CAC7C,CAAC;AAAE8B,IAAAA,WAAW,EAAE;AAAEC,MAAAA;AAAF;AAAf,GAAD,KACElB,QAAQ,IAAIA,QAAQ,CAACP,KAAD,EAAQyB,MAAR,CAFuB,CAA/C;AAKA,sBACE,oBAAC,iBAAD;AACE,IAAA,OAAO,EAAEhB;AADX,KAEMG,iBAFN,gBAIE,oBAAC,QAAD,CAAU,IAAV;AACE,IAAA,GAAG,EAAEJ,WADP;AAEE,IAAA,UAAU,EAAE,IAFd;AAGE,IAAA,kBAAkB,EAAEN,kBAHtB;AAIE,IAAA,iBAAiB,EAAC,QAJpB;AAKE,IAAA,0BAA0B,EAAC,QAL7B;AAME,IAAA,QAAQ,EAAEqB,qBANZ;AAOE,IAAA,KAAK,EAAEnB;AAPT,kBASE,oBAAC,uBAAD;AACE,IAAA,GAAG,EAAEK;AADP,KAEMM,uBAFN,gBAIE,oBAAC,QAAD,CAAU,IAAV,QAAgBZ,QAAhB,CAJF,CATF,CAJF,CADF;AAuBD,CApFD;;AAsFA,eAAeJ,SAAf","sourcesContent":["import React, { useRef } from 'react';\nimport type {\n  StyleProp,\n  ViewStyle,\n  LayoutChangeEvent,\n  LayoutRectangle,\n} from 'react-native';\nimport Animated, { call } from 'react-native-reanimated';\nimport {\n  State,\n  TapGestureHandler,\n  LongPressGestureHandler,\n} from 'react-native-gesture-handler';\nimport { useValue, useGestureHandler } from 'react-native-redash/lib/module/v1';\nimport { useStableCallback } from '../../hooks';\n\nconst { useCode, cond, onChange, eq } = Animated;\n\ninterface RawButtonProps {\n  index: number;\n  selectedIndex: Animated.Value<number>;\n  accessibilityLabel: string;\n  children: React.ReactNode[] | React.ReactNode;\n  style?: StyleProp<Animated.AnimateStyle<ViewStyle>>;\n  animatedOnChange: (index: number) => Animated.Node<number>;\n  onLongPress: (index: number) => void;\n  onLayout?: (index: number, layout: LayoutRectangle) => void;\n}\n\nconst RawButton = ({\n  index,\n  selectedIndex,\n  accessibilityLabel,\n  children,\n  style,\n  animatedOnChange,\n  onLongPress,\n  onLayout,\n}: RawButtonProps) => {\n  // refs\n  const rootViewRef = useRef<Animated.View>(null);\n  const longPressGestureHandlerRef = useRef<LongPressGestureHandler>(null);\n\n  // tap gesture\n  const tapGestureState = useValue(State.UNDETERMINED);\n  const tapGestureHandler = useGestureHandler({ state: tapGestureState });\n\n  // long press gesture\n  const longPressGestureState = useValue(State.UNDETERMINED);\n  const longPressGestureHandler = useGestureHandler({\n    state: longPressGestureState,\n  });\n\n  // effects\n  useCode(\n    () => [\n      onChange(\n        tapGestureState,\n        cond(eq(tapGestureState, State.END), animatedOnChange(index))\n      ),\n      onChange(\n        longPressGestureState,\n        cond(\n          eq(longPressGestureState, State.ACTIVE),\n          call([], () => {\n            onLongPress(index);\n          })\n        )\n      ),\n      onChange(\n        selectedIndex,\n        call([selectedIndex], args => {\n          // @ts-ignore\n          rootViewRef.current.setNativeProps({\n            accessibilityState: {\n              selected: args[0] === index,\n            },\n          });\n        })\n      ),\n    ],\n    [index]\n  );\n\n  // callbacks\n  const handleContainerLayout = useStableCallback(\n    ({ nativeEvent: { layout } }: LayoutChangeEvent) =>\n      onLayout && onLayout(index, layout)\n  );\n\n  return (\n    <TapGestureHandler\n      waitFor={longPressGestureHandlerRef}\n      {...tapGestureHandler}\n    >\n      <Animated.View\n        ref={rootViewRef}\n        accessible={true}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityRole=\"button\"\n        accessibilityComponentType=\"button\"\n        onLayout={handleContainerLayout}\n        style={style}\n      >\n        <LongPressGestureHandler\n          ref={longPressGestureHandlerRef}\n          {...longPressGestureHandler}\n        >\n          <Animated.View>{children}</Animated.View>\n        </LongPressGestureHandler>\n      </Animated.View>\n    </TapGestureHandler>\n  );\n};\n\nexport default RawButton;\n"]}