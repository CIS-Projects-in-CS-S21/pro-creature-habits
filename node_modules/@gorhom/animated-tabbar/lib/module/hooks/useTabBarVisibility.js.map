{"version":3,"sources":["useTabBarVisibility.ts"],"names":["useMemo","useEffect","Animated","block","onChange","stopClock","set","cond","and","not","clockRunning","startClock","timing","useClock","useValue","Easing","useTabBarVisibility","shouldShowTabBar","_shouldShowTabBar","clock","shouldAnimate","state","finished","Value","frameTime","position","time","config","toValue","easing","linear","duration","finishTiming","setValue"],"mappings":"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","sourcesContent":["import { useMemo, useEffect } from 'react';\nimport Animated, {\n  block,\n  onChange,\n  stopClock,\n  set,\n  cond,\n  and,\n  not,\n  clockRunning,\n  startClock,\n  timing,\n} from 'react-native-reanimated';\nimport { useClock, useValue } from 'react-native-redash/lib/module/v1';\nimport { Easing } from '../utilities';\n\nexport const useTabBarVisibility = (shouldShowTabBar: boolean) => {\n  const _shouldShowTabBar = useValue(shouldShowTabBar ? 1 : 0);\n  const clock = useClock();\n  const shouldAnimate = useValue(0);\n  const state = useMemo(\n    () => ({\n      finished: new Animated.Value(0),\n      frameTime: new Animated.Value(0),\n      position: new Animated.Value(shouldShowTabBar ? 1 : 0),\n      time: new Animated.Value(0),\n    }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n  const config = useMemo(\n    () => ({\n      toValue: new Animated.Value(0),\n      easing: Easing.linear,\n      duration: 250,\n    }),\n    []\n  );\n\n  const finishTiming = useMemo(\n    () => [\n      stopClock(clock),\n      set(state.finished, 0),\n      set(state.frameTime, 0),\n      set(state.time, 0),\n    ],\n    [clock, state]\n  );\n\n  // effects\n  useEffect(() => {\n    _shouldShowTabBar.setValue(shouldShowTabBar ? 1 : 0);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [shouldShowTabBar]);\n\n  return block([\n    onChange(_shouldShowTabBar, [finishTiming, set(shouldAnimate, 1)]),\n\n    cond(shouldAnimate, [\n      cond(and(not(clockRunning(clock)), not(state.finished)), [\n        set(state.frameTime, 0),\n        set(state.time, 0),\n        set(state.finished, 0),\n        set(config.toValue, _shouldShowTabBar),\n        startClock(clock),\n      ]),\n      timing(clock, state, config),\n      cond(state.finished, [finishTiming, set(shouldAnimate, 0)]),\n    ]),\n\n    state.position,\n  ]);\n};\n"]}