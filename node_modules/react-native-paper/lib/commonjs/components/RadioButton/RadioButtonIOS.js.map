{"version":3,"sources":["RadioButtonIOS.tsx"],"names":["RadioButtonIOS","React","Component","render","props","disabled","onPress","theme","status","value","rest","checkedColor","colors","color","accent","rippleColor","text","alpha","rgb","string","fade","context","checked","contextValue","undefined","onValueChange","styles","container","opacity","StyleSheet","create","borderRadius","padding"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;AA8BA;;;;;;;;;;;;;;;AAeA,MAAMA,cAAN,SAA6BC,KAAK,CAACC,SAAnC,CAAoD;AAGlDC,EAAAA,MAAM,GAAG;AACP,wBAA6D,KAAKC,KAAlE;AAAA,UAAM;AAAEC,MAAAA,QAAF;AAAYC,MAAAA,OAAZ;AAAqBC,MAAAA,KAArB;AAA4BC,MAAAA,MAA5B;AAAoCC,MAAAA;AAApC,KAAN;AAAA,UAAoDC,IAApD;;AAEA,UAAMC,YAAY,GAAGN,QAAQ,GACzBE,KAAK,CAACK,MAAN,CAAaP,QADY,GAEzB,KAAKD,KAAL,CAAWS,KAAX,IAAoBN,KAAK,CAACK,MAAN,CAAaE,MAFrC;AAIA,QAAIC,WAAJ;;AAEA,QAAIV,QAAJ,EAAc;AACZU,MAAAA,WAAW,GAAG,oBAAMR,KAAK,CAACK,MAAN,CAAaI,IAAnB,EACXC,KADW,CACL,IADK,EAEXC,GAFW,GAGXC,MAHW,EAAd;AAID,KALD,MAKO;AACLJ,MAAAA,WAAW,GAAG,oBAAMJ,YAAN,EACXS,IADW,CACN,IADM,EAEXF,GAFW,GAGXC,MAHW,EAAd;AAID;;AAED,wBACE,oBAAC,oCAAD,CAAoB,QAApB,QACIE,OAAD,IAAsC;AACrC,YAAMC,OAAO,GACX,sBAAU;AACRC,QAAAA,YAAY,EAAEF,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEZ,KADf;AAERD,QAAAA,MAFQ;AAGRC,QAAAA;AAHQ,OAAV,MAIO,SALT;AAOA,0BACE,oBAAC,wBAAD,eACMC,IADN;AAEE,QAAA,UAAU,MAFZ;AAGE,QAAA,WAAW,EAAEK,WAHf;AAIE,QAAA,OAAO,EACLV,QAAQ,GACJmB,SADI,GAEJ,MAAM;AACJ,kCAAY;AACVlB,YAAAA,OADU;AAEVG,YAAAA,KAFU;AAGVgB,YAAAA,aAAa,EAAEJ,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEI;AAHd,WAAZ;AAKD,SAbT;AAeE,QAAA,mBAAmB,EAAEpB,QAAQ,GAAG,CAAC,QAAD,EAAW,UAAX,CAAH,GAA4B,QAf3D;AAgBE,QAAA,0BAA0B,EACxBiB,OAAO,GAAG,qBAAH,GAA2B,uBAjBtC;AAmBE,QAAA,iBAAiB,EAAC,QAnBpB;AAoBE,QAAA,mBAAmB,EAAEjB,QAAQ,GAAG,CAAC,UAAD,CAAH,GAAkB,EApBjD;AAqBE,QAAA,uBAAuB,EAAC,QArB1B;AAsBE,QAAA,KAAK,EAAEqB,MAAM,CAACC;AAtBhB,uBAwBE,oBAAC,iBAAD;AAAM,QAAA,KAAK,EAAE;AAAEC,UAAAA,OAAO,EAAEN,OAAO,GAAG,CAAH,GAAO;AAAzB;AAAb,sBACE,oBAAC,8BAAD;AACE,QAAA,gBAAgB,EAAE,KADpB;AAEE,QAAA,IAAI,EAAC,OAFP;AAGE,QAAA,IAAI,EAAE,EAHR;AAIE,QAAA,KAAK,EAAEX,YAJT;AAKE,QAAA,SAAS,EAAC;AALZ,QADF,CAxBF,CADF;AAoCD,KA7CH,CADF;AAiDD;;AAzEiD;;;;gBAA9CX,c,iBACiB,iB;;AA2EvB,MAAM0B,MAAM,GAAGG,wBAAWC,MAAX,CAAkB;AAC/BH,EAAAA,SAAS,EAAE;AACTI,IAAAA,YAAY,EAAE,EADL;AAETC,IAAAA,OAAO,EAAE;AAFA;AADoB,CAAlB,CAAf;;eAOe,wBAAUhC,cAAV,C,EAEf","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport color from 'color';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport { Theme, $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Value of the radio button\n   */\n  value: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for iOS.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nclass RadioButtonIOS extends React.Component<Props> {\n  static displayName = 'RadioButton.IOS';\n\n  render() {\n    const { disabled, onPress, theme, status, value, ...rest } = this.props;\n\n    const checkedColor = disabled\n      ? theme.colors.disabled\n      : this.props.color || theme.colors.accent;\n\n    let rippleColor: string;\n\n    if (disabled) {\n      rippleColor = color(theme.colors.text)\n        .alpha(0.16)\n        .rgb()\n        .string();\n    } else {\n      rippleColor = color(checkedColor)\n        .fade(0.32)\n        .rgb()\n        .string();\n    }\n\n    return (\n      <RadioButtonContext.Consumer>\n        {(context?: RadioButtonContextType) => {\n          const checked =\n            isChecked({\n              contextValue: context?.value,\n              status,\n              value,\n            }) === 'checked';\n\n          return (\n            <TouchableRipple\n              {...rest}\n              borderless\n              rippleColor={rippleColor}\n              onPress={\n                disabled\n                  ? undefined\n                  : () => {\n                      handlePress({\n                        onPress,\n                        value,\n                        onValueChange: context?.onValueChange,\n                      });\n                    }\n              }\n              accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n              accessibilityComponentType={\n                checked ? 'radiobutton_checked' : 'radiobutton_unchecked'\n              }\n              accessibilityRole=\"button\"\n              accessibilityStates={disabled ? ['disabled'] : []}\n              accessibilityLiveRegion=\"polite\"\n              style={styles.container}\n            >\n              <View style={{ opacity: checked ? 1 : 0 }}>\n                <MaterialCommunityIcon\n                  allowFontScaling={false}\n                  name=\"check\"\n                  size={24}\n                  color={checkedColor}\n                  direction=\"ltr\"\n                />\n              </View>\n            </TouchableRipple>\n          );\n        }}\n      </RadioButtonContext.Consumer>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6,\n  },\n});\n\nexport default withTheme(RadioButtonIOS);\n\n// @component-docs ignore-next-line\nexport { RadioButtonIOS };\n"]}