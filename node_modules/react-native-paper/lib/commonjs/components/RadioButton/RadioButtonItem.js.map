{"version":3,"sources":["RadioButtonItem.tsx"],"names":["RadioButtonItem","React","Component","render","value","label","style","labelStyle","onPress","disabled","color","uncheckedColor","status","theme","colors","accessibilityLabel","props","context","undefined","onValueChange","styles","container","text","StyleSheet","create","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","fontSize"],"mappings":";;;;;;;AAAA;;AACA;;AAQA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;AAiDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,MAAMA,eAAN,SAA8BC,KAAK,CAACC,SAApC,CAAqD;AAGnDC,EAAAA,MAAM,GAAG;AACP,UAAM;AACJC,MAAAA,KADI;AAEJC,MAAAA,KAFI;AAGJC,MAAAA,KAHI;AAIJC,MAAAA,UAJI;AAKJC,MAAAA,OALI;AAMJC,MAAAA,QANI;AAOJC,MAAAA,KAPI;AAQJC,MAAAA,cARI;AASJC,MAAAA,MATI;AAUJC,MAAAA,KAAK,EAAE;AAAEC,QAAAA;AAAF,OAVH;AAWJC,MAAAA;AAXI,QAYF,KAAKC,KAZT;AAcA,wBACE,oBAAC,oCAAD,CAAoB,QAApB,QACIC,OAAD,IAAsC;AACrC,0BACE,oBAAC,wBAAD;AACE,QAAA,OAAO,EACLR,QAAQ,GACJS,SADI,GAEJ,MACE,wBAAY;AACVV,UAAAA,OAAO,EAAEA,OADC;AAEVW,UAAAA,aAAa,EAAEF,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEE,aAFd;AAGVf,UAAAA;AAHU,SAAZ,CALV;AAWE,QAAA,kBAAkB,EAAEW;AAXtB,sBAaE,oBAAC,iBAAD;AAAM,QAAA,KAAK,EAAE,CAACK,MAAM,CAACC,SAAR,EAAmBf,KAAnB,CAAb;AAAwC,QAAA,aAAa,EAAC;AAAtD,sBACE,oBAAC,aAAD;AACE,QAAA,KAAK,EAAE,CAACc,MAAM,CAACf,KAAR,EAAe;AAAEK,UAAAA,KAAK,EAAEI,MAAM,CAACQ;AAAhB,SAAf,EAAuCf,UAAvC;AADT,SAGGF,KAHH,CADF,eAME,oBAAC,oBAAD;AACE,QAAA,KAAK,EAAED,KADT;AAEE,QAAA,QAAQ,EAAEK,QAFZ;AAGE,QAAA,MAAM,EAAEG,MAHV;AAIE,QAAA,KAAK,EAAEF,KAJT;AAKE,QAAA,cAAc,EAAEC;AALlB,QANF,CAbF,CADF;AA8BD,KAhCH,CADF;AAoCD;;AAtDkD;;;;gBAA/CX,e,iBACiB,kB;;eAwDR,wBAAUA,eAAV,C,EAEf;;;;;AAGA,MAAMoB,MAAM,GAAGG,wBAAWC,MAAX,CAAkB;AAC/BH,EAAAA,SAAS,EAAE;AACTI,IAAAA,aAAa,EAAE,KADN;AAETC,IAAAA,UAAU,EAAE,QAFH;AAGTC,IAAAA,cAAc,EAAE,eAHP;AAITC,IAAAA,eAAe,EAAE,CAJR;AAKTC,IAAAA,iBAAiB,EAAE;AALV,GADoB;AAQ/BxB,EAAAA,KAAK,EAAE;AACLyB,IAAAA,QAAQ,EAAE;AADL;AARwB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n} from 'react-native';\nimport { Theme } from '../../types';\nimport { withTheme } from '../../core/theming';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress } from './utils';\nimport TouchableRipple from '../TouchableRipple';\nimport RadioButton from './RadioButton';\nimport Text from '../Typography/Text';\n\nexport type Props = {\n  /**\n   * Value of the radio button.\n   */\n  value: string;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Accessibility label for the touchable. This is read by the screen reader when the user taps the touchable.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * RadioButton.Item allows you to press the whole row (item) instead of only the RadioButton.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/radio-item.ios.png\" />\n *     <figcaption>Pressed</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { RadioButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('first');\n *\n *   return (\n *     <RadioButton.Group onValueChange={value => setValue(value)} value={value}>\n *       <RadioButton.Item label=\"First item\" value=\"first\" />\n *       <RadioButton.Item label=\"Second item\" value=\"second\" />\n *     </RadioButton.Group>\n *   );\n * };\n *\n * export default MyComponent;\n *```\n */\nclass RadioButtonItem extends React.Component<Props> {\n  static displayName = 'RadioButton.Item';\n\n  render() {\n    const {\n      value,\n      label,\n      style,\n      labelStyle,\n      onPress,\n      disabled,\n      color,\n      uncheckedColor,\n      status,\n      theme: { colors },\n      accessibilityLabel,\n    } = this.props;\n\n    return (\n      <RadioButtonContext.Consumer>\n        {(context?: RadioButtonContextType) => {\n          return (\n            <TouchableRipple\n              onPress={\n                disabled\n                  ? undefined\n                  : () =>\n                      handlePress({\n                        onPress: onPress,\n                        onValueChange: context?.onValueChange,\n                        value,\n                      })\n              }\n              accessibilityLabel={accessibilityLabel}\n            >\n              <View style={[styles.container, style]} pointerEvents=\"none\">\n                <Text\n                  style={[styles.label, { color: colors.text }, labelStyle]}\n                >\n                  {label}\n                </Text>\n                <RadioButton\n                  value={value}\n                  disabled={disabled}\n                  status={status}\n                  color={color}\n                  uncheckedColor={uncheckedColor}\n                />\n              </View>\n            </TouchableRipple>\n          );\n        }}\n      </RadioButtonContext.Consumer>\n    );\n  }\n}\n\nexport default withTheme(RadioButtonItem);\n\n// @component-docs ignore-next-line\nexport { RadioButtonItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    fontSize: 16,\n  },\n});\n"]}