{"version":3,"sources":["Snackbar.tsx"],"names":["DURATION_SHORT","DURATION_MEDIUM","DURATION_LONG","Snackbar","React","Component","opacity","Animated","Value","hidden","props","visible","show","hide","hideTimeout","clearTimeout","setState","scale","theme","animation","timing","state","toValue","duration","useNativeDriver","start","finished","isInfinity","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","setTimeout","onDismiss","componentDidMount","componentDidUpdate","prevProps","toggle","componentWillUnmount","render","children","action","style","wrapperStyle","rest","colors","roundness","styles","wrapper","container","borderRadius","transform","interpolate","inputRange","outputRange","backgroundColor","onSurface","content","marginRight","color","surface","accessibilityLabel","onPress","button","accent","label","StyleSheet","create","position","bottom","width","elevation","flexDirection","justifyContent","alignItems","margin","marginLeft","marginVertical","flexWrap","flex","marginHorizontal"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  SafeAreaView,\n  StyleProp,\n  StyleSheet,\n  ViewStyle,\n  View,\n} from 'react-native';\n\nimport Button from './Button';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport { withTheme } from '../core/theming';\nimport { Theme } from '../types';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Whether the Snackbar is currently visible.\n   */\n  visible: boolean;\n  /**\n   * Label and press callback for the action button. It should contain the following properties:\n   * - `label` - Label of the action button\n   * - `onPress` - Callback that is called when action button is pressed.\n   */\n  action?: {\n    label: string;\n    accessibilityLabel?: string;\n    onPress: () => void;\n  };\n  /**\n   * The duration for which the Snackbar is shown.\n   */\n  duration?: number;\n  /**\n   * Callback called when Snackbar is dismissed. The `visible` prop needs to be updated when this is called.\n   */\n  onDismiss: () => void;\n  /**\n   * Text content of the Snackbar.\n   */\n  children: React.ReactNode;\n  /**\n   * Style for the wrapper of the snackbar\n   */\n  wrapperStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  ref?: React.RefObject<View>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\ntype State = {\n  opacity: Animated.Value;\n  hidden: boolean;\n};\n\nconst DURATION_SHORT = 4000;\nconst DURATION_MEDIUM = 7000;\nconst DURATION_LONG = 10000;\n\n/**\n * Snackbars provide brief feedback about an operation through a message at the bottom of the screen.\n * Snackbar by default use onSurface color from theme\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/snackbar.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View, StyleSheet } from 'react-native';\n * import { Button, Snackbar } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(false);\n *\n *   const onToggleSnackBar = () => setVisible(!visible);\n *\n *   const onDismissSnackBar = () => setVisible(false);\n *\n *   return (\n *     <View style={styles.container}>\n *       <Button onPress={onToggleSnackBar}>{visible ? 'Hide' : 'Show'}</Button>\n *       <Snackbar\n *         visible={visible}\n *         onDismiss={onDismissSnackBar}\n *         action={{\n *           label: 'Undo',\n *           onPress: () => {\n *             // Do something\n *           },\n *         }}>\n *         Hey there! I'm a Snackbar.\n *       </Snackbar>\n *     </View>\n *   );\n * };\n *\n * const styles = StyleSheet.create({\n *   container: {\n *     flex: 1,\n *     justifyContent: 'space-between',\n *   },\n * });\n *\n * export default MyComponent;\n * ```\n */\nclass Snackbar extends React.Component<Props, State> {\n  /**\n   * Show the Snackbar for a short duration.\n   */\n  static DURATION_SHORT = DURATION_SHORT;\n\n  /**\n   * Show the Snackbar for a medium duration.\n   */\n  static DURATION_MEDIUM = DURATION_MEDIUM;\n\n  /**\n   * Show the Snackbar for a long duration.\n   */\n  static DURATION_LONG = DURATION_LONG;\n\n  static defaultProps = {\n    duration: DURATION_MEDIUM,\n  };\n\n  state = {\n    opacity: new Animated.Value(0.0),\n    hidden: !this.props.visible,\n  };\n\n  componentDidMount() {\n    if (this.props.visible) {\n      this.show();\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.visible !== this.props.visible) {\n      this.toggle();\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.hideTimeout) {\n      clearTimeout(this.hideTimeout);\n    }\n  }\n\n  private toggle = () => {\n    if (this.props.visible) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  };\n\n  private show = () => {\n    if (this.hideTimeout) {\n      clearTimeout(this.hideTimeout);\n    }\n    this.setState({\n      hidden: false,\n    });\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.opacity, {\n      toValue: 1,\n      duration: 200 * scale,\n      useNativeDriver: true,\n    }).start(({ finished }) => {\n      if (finished) {\n        const { duration } = this.props;\n        const isInfinity =\n          duration === Number.POSITIVE_INFINITY ||\n          duration === Number.NEGATIVE_INFINITY;\n\n        if (finished && !isInfinity) {\n          this.hideTimeout = setTimeout(this.props.onDismiss, duration);\n        }\n      }\n    });\n  };\n\n  private hide = () => {\n    if (this.hideTimeout) {\n      clearTimeout(this.hideTimeout);\n    }\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.opacity, {\n      toValue: 0,\n      duration: 100 * scale,\n      useNativeDriver: true,\n    }).start(({ finished }) => {\n      if (finished) {\n        this.setState({ hidden: true });\n      }\n    });\n  };\n\n  private hideTimeout?: number;\n\n  render() {\n    const {\n      children,\n      visible,\n      action,\n      onDismiss,\n      theme,\n      style,\n      wrapperStyle,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      duration,\n      ...rest\n    } = this.props;\n    const { colors, roundness } = theme;\n\n    if (this.state.hidden) {\n      return null;\n    }\n\n    return (\n      <SafeAreaView\n        pointerEvents=\"box-none\"\n        style={[styles.wrapper, wrapperStyle]}\n      >\n        <Surface\n          pointerEvents=\"box-none\"\n          accessibilityLiveRegion=\"polite\"\n          style={\n            [\n              styles.container,\n              {\n                borderRadius: roundness,\n                opacity: this.state.opacity,\n                transform: [\n                  {\n                    scale: visible\n                      ? this.state.opacity.interpolate({\n                          inputRange: [0, 1],\n                          outputRange: [0.9, 1],\n                        })\n                      : 1,\n                  },\n                ],\n              },\n              { backgroundColor: colors.onSurface },\n              style,\n            ] as StyleProp<ViewStyle>\n          }\n          {...rest}\n        >\n          <Text\n            style={[\n              styles.content,\n              { marginRight: action ? 0 : 16, color: colors.surface },\n            ]}\n          >\n            {children}\n          </Text>\n          {action ? (\n            <Button\n              accessibilityLabel={action.accessibilityLabel}\n              onPress={() => {\n                action.onPress();\n                onDismiss();\n              }}\n              style={styles.button}\n              color={colors.accent}\n              compact\n              mode=\"text\"\n            >\n              {action.label}\n            </Button>\n          ) : null}\n        </Surface>\n      </SafeAreaView>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  wrapper: {\n    position: 'absolute',\n    bottom: 0,\n    width: '100%',\n  },\n  container: {\n    elevation: 6,\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    margin: 8,\n    borderRadius: 4,\n  },\n  content: {\n    marginLeft: 16,\n    marginVertical: 14,\n    flexWrap: 'wrap',\n    flex: 1,\n  },\n  button: {\n    marginHorizontal: 8,\n    marginVertical: 6,\n  },\n});\n\nexport default withTheme(Snackbar);\n"]}