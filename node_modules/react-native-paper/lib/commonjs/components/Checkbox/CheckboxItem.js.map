{"version":3,"sources":["CheckboxItem.tsx"],"names":["CheckboxItem","React","Component","render","props","style","status","label","onPress","labelStyle","theme","colors","styles","container","color","primary","StyleSheet","create","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","fontSize"],"mappings":";;;;;;;AAAA;;AAEA;;AAQA;;AACA;;AAEA;;AACA;;;;;;;;;;;;;;;;AAyCA;;;;;;;;;;;;;;;;;;AAmBA,MAAMA,YAAN,SAA2BC,KAAK,CAACC,SAAjC,CAAkD;AAGhDC,EAAAA,MAAM,GAAG;AACP,wBAQI,KAAKC,KART;AAAA,UAAM;AACJC,MAAAA,KADI;AAEJC,MAAAA,MAFI;AAGJC,MAAAA,KAHI;AAIJC,MAAAA,OAJI;AAKJC,MAAAA,UALI;AAMJC,MAAAA,KAAK,EAAE;AAAEC,QAAAA;AAAF;AANH,KAAN;AAAA,UAOKP,KAPL;;AAUA,wBACE,oBAAC,wBAAD;AAAiB,MAAA,OAAO,EAAEI;AAA1B,oBACE,oBAAC,iBAAD;AAAM,MAAA,KAAK,EAAE,CAACI,MAAM,CAACC,SAAR,EAAmBR,KAAnB,CAAb;AAAwC,MAAA,aAAa,EAAC;AAAtD,oBACE,oBAAC,aAAD;AAAM,MAAA,KAAK,EAAE,CAACO,MAAM,CAACL,KAAR,EAAeE,UAAf,EAA2B;AAAEK,QAAAA,KAAK,EAAEH,MAAM,CAACI;AAAhB,OAA3B;AAAb,OACGR,KADH,CADF,eAIE,oBAAC,iBAAD;AAAU,MAAA,MAAM,EAAED;AAAlB,OAA8BF,KAA9B,EAJF,CADF,CADF;AAUD;;AAxB+C;;;;gBAA5CJ,Y,iBACiB,e;;eA0BR,wBAAUA,YAAV,C,EAEf;;;;;AAGA,MAAMY,MAAM,GAAGI,wBAAWC,MAAX,CAAkB;AAC/BJ,EAAAA,SAAS,EAAE;AACTK,IAAAA,aAAa,EAAE,KADN;AAETC,IAAAA,UAAU,EAAE,QAFH;AAGTC,IAAAA,cAAc,EAAE,eAHP;AAITC,IAAAA,eAAe,EAAE,CAJR;AAKTC,IAAAA,iBAAiB,EAAE;AALV,GADoB;AAQ/Bf,EAAAA,KAAK,EAAE;AACLgB,IAAAA,QAAQ,EAAE;AADL;AARwB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\n\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport CheckBox from './Checkbox';\nimport Text from '../Typography/Text';\nimport { Theme } from '../../types';\nimport TouchableRipple from '../TouchableRipple';\nimport { withTheme } from '../../core/theming';\n\ntype Props = {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * Checkbox.Item allows you to press the whole row (item) instead of only the Checkbox.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Checkbox } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View>\n *     <Checkbox.Item label=\"Item\" status=\"checked\" />\n *   </View>\n * );\n *\n * export default MyComponent;\n *```\n */\n\nclass CheckboxItem extends React.Component<Props> {\n  static displayName = 'Checkbox.Item';\n\n  render() {\n    const {\n      style,\n      status,\n      label,\n      onPress,\n      labelStyle,\n      theme: { colors },\n      ...props\n    } = this.props;\n\n    return (\n      <TouchableRipple onPress={onPress}>\n        <View style={[styles.container, style]} pointerEvents=\"none\">\n          <Text style={[styles.label, labelStyle, { color: colors.primary }]}>\n            {label}\n          </Text>\n          <CheckBox status={status} {...props}></CheckBox>\n        </View>\n      </TouchableRipple>\n    );\n  }\n}\n\nexport default withTheme(CheckboxItem);\n\n// @component-docs ignore-next-line\nexport { CheckboxItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    fontSize: 16,\n  },\n});\n"]}