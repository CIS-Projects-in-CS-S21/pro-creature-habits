{"version":3,"sources":["CheckboxAndroid.tsx"],"names":["ANIMATION_DURATION","CheckboxAndroid","React","Component","scaleAnim","Animated","Value","componentDidUpdate","prevProps","status","props","checked","animation","theme","sequence","timing","state","toValue","duration","scale","useNativeDriver","start","render","disabled","onPress","rest","indeterminate","checkedColor","color","colors","accent","uncheckedColor","text","alpha","dark","rgb","string","rippleColor","checkboxColor","fade","borderWidth","interpolate","inputRange","outputRange","icon","styles","container","transform","StyleSheet","absoluteFill","fillContainer","fill","borderColor","create","borderRadius","width","height","padding","alignItems","justifyContent"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;AAkCA;AACA,MAAMA,kBAAkB,GAAG,GAA3B;AAEA;;;;;;;;;;;;;;;;AAeA,MAAMC,eAAN,SAA8BC,KAAK,CAACC,SAApC,CAA4D;AAAA;AAAA;;AAAA,mCAGlD;AACNC,MAAAA,SAAS,EAAE,IAAIC,sBAASC,KAAb,CAAmB,CAAnB;AADL,KAHkD;AAAA;;AAO1DC,EAAAA,kBAAkB,CAACC,SAAD,EAAmB;AACnC,QAAIA,SAAS,CAACC,MAAV,KAAqB,KAAKC,KAAL,CAAWD,MAApC,EAA4C;AAC1C;AACD;;AAED,UAAME,OAAO,GAAG,KAAKD,KAAL,CAAWD,MAAX,KAAsB,SAAtC;AACA,UAAM;AAAEG,MAAAA;AAAF,QAAgB,KAAKF,KAAL,CAAWG,KAAjC;;AAEAR,0BAASS,QAAT,CAAkB,CAChBT,sBAASU,MAAT,CAAgB,KAAKC,KAAL,CAAWZ,SAA3B,EAAsC;AACpCa,MAAAA,OAAO,EAAE,IAD2B;AAEpCC,MAAAA,QAAQ,EAAEP,OAAO,GAAGX,kBAAkB,GAAGY,SAAS,CAACO,KAAlC,GAA0C,CAFvB;AAGpCC,MAAAA,eAAe,EAAE;AAHmB,KAAtC,CADgB,EAMhBf,sBAASU,MAAT,CAAgB,KAAKC,KAAL,CAAWZ,SAA3B,EAAsC;AACpCa,MAAAA,OAAO,EAAE,CAD2B;AAEpCC,MAAAA,QAAQ,EAAEP,OAAO,GACbX,kBAAkB,GAAGY,SAAS,CAACO,KADlB,GAEbnB,kBAAkB,GAAGY,SAAS,CAACO,KAA/B,GAAuC,IAJP;AAKpCC,MAAAA,eAAe,EAAE;AALmB,KAAtC,CANgB,CAAlB,EAaGC,KAbH;AAcD;;AAEDC,EAAAA,MAAM,GAAG;AACP,wBAAsD,KAAKZ,KAA3D;AAAA,UAAM;AAAED,MAAAA,MAAF;AAAUc,MAAAA,QAAV;AAAoBC,MAAAA,OAApB;AAA6BX,MAAAA;AAA7B,KAAN;AAAA,UAA6CY,IAA7C;;AACA,UAAMd,OAAO,GAAGF,MAAM,KAAK,SAA3B;AACA,UAAMiB,aAAa,GAAGjB,MAAM,KAAK,eAAjC;AACA,UAAMkB,YAAY,GAAG,KAAKjB,KAAL,CAAWkB,KAAX,IAAoBf,KAAK,CAACgB,MAAN,CAAaC,MAAtD;AACA,UAAMC,cAAc,GAClB,KAAKrB,KAAL,CAAWqB,cAAX,IACA,oBAAMlB,KAAK,CAACgB,MAAN,CAAaG,IAAnB,EACGC,KADH,CACSpB,KAAK,CAACqB,IAAN,GAAa,GAAb,GAAmB,IAD5B,EAEGC,GAFH,GAGGC,MAHH,EAFF;AAOA,QAAIC,WAAJ,EAAiBC,aAAjB;;AAEA,QAAIf,QAAJ,EAAc;AACZc,MAAAA,WAAW,GAAG,oBAAMxB,KAAK,CAACgB,MAAN,CAAaG,IAAnB,EACXC,KADW,CACL,IADK,EAEXE,GAFW,GAGXC,MAHW,EAAd;AAIAE,MAAAA,aAAa,GAAGzB,KAAK,CAACgB,MAAN,CAAaN,QAA7B;AACD,KAND,MAMO;AACLc,MAAAA,WAAW,GAAG,oBAAMV,YAAN,EACXY,IADW,CACN,IADM,EAEXJ,GAFW,GAGXC,MAHW,EAAd;AAIAE,MAAAA,aAAa,GAAG3B,OAAO,GAAGgB,YAAH,GAAkBI,cAAzC;AACD;;AAED,UAAMS,WAAW,GAAG,KAAKxB,KAAL,CAAWZ,SAAX,CAAqBqC,WAArB,CAAiC;AACnDC,MAAAA,UAAU,EAAE,CAAC,GAAD,EAAM,CAAN,CADuC;AAEnDC,MAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ;AAFsC,KAAjC,CAApB;AAKA,UAAMC,IAAI,GAAGlB,aAAa,GACtB,WADsB,GAEtBf,OAAO,GACP,iBADO,GAEP,wBAJJ;AAMA,wBACE,oBAAC,wBAAD,eACMc,IADN;AAEE,MAAA,UAAU,MAFZ;AAGE,MAAA,WAAW,EAAEY,WAHf;AAIE,MAAA,OAAO,EAAEb,OAJX;AAKE,MAAA,QAAQ,EAAED,QALZ;AAME,MAAA,mBAAmB,EAAEA,QAAQ,GAAG,CAAC,QAAD,EAAW,UAAX,CAAH,GAA4B,QAN3D;AAOE,MAAA,0BAA0B,EAAC,QAP7B;AAQE,MAAA,iBAAiB,EAAC,QARpB;AASE,MAAA,mBAAmB,EAAEA,QAAQ,GAAG,CAAC,UAAD,CAAH,GAAkB,EATjD;AAUE,MAAA,uBAAuB,EAAC,QAV1B;AAWE,MAAA,KAAK,EAAEsB,MAAM,CAACC;AAXhB,qBAaE,oBAAC,qBAAD,CAAU,IAAV;AAAe,MAAA,KAAK,EAAE;AAAEC,QAAAA,SAAS,EAAE,CAAC;AAAE5B,UAAAA,KAAK,EAAE,KAAKH,KAAL,CAAWZ;AAApB,SAAD;AAAb;AAAtB,oBACE,oBAAC,8BAAD;AACE,MAAA,gBAAgB,EAAE,KADpB;AAEE,MAAA,IAAI,EAAEwC,IAFR;AAGE,MAAA,IAAI,EAAE,EAHR;AAIE,MAAA,KAAK,EAAEN,aAJT;AAKE,MAAA,SAAS,EAAC;AALZ,MADF,eAQE,oBAAC,iBAAD;AAAM,MAAA,KAAK,EAAE,CAACU,wBAAWC,YAAZ,EAA0BJ,MAAM,CAACK,aAAjC;AAAb,oBACE,oBAAC,qBAAD,CAAU,IAAV;AACE,MAAA,KAAK,EAAE,CACLL,MAAM,CAACM,IADF,EAEL;AAAEC,QAAAA,WAAW,EAAEd;AAAf,OAFK,EAGL;AAAEE,QAAAA;AAAF,OAHK;AADT,MADF,CARF,CAbF,CADF;AAkCD;;AAxGyD;;;;gBAAtDvC,e,iBACiB,kB;;AA0GvB,MAAM4C,MAAM,GAAGG,wBAAWK,MAAX,CAAkB;AAC/BP,EAAAA,SAAS,EAAE;AACTQ,IAAAA,YAAY,EAAE,EADL;AAETC,IAAAA,KAAK,EAAE,EAFE;AAGTC,IAAAA,MAAM,EAAE,EAHC;AAITC,IAAAA,OAAO,EAAE;AAJA,GADoB;AAO/BP,EAAAA,aAAa,EAAE;AACbQ,IAAAA,UAAU,EAAE,QADC;AAEbC,IAAAA,cAAc,EAAE;AAFH,GAPgB;AAW/BR,EAAAA,IAAI,EAAE;AACJK,IAAAA,MAAM,EAAE,EADJ;AAEJD,IAAAA,KAAK,EAAE;AAFH;AAXyB,CAAlB,CAAf;;eAiBe,wBAAUtD,eAAV,C,EAEf","sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport { Theme, $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\ntype State = {\n  scaleAnim: Animated.Value;\n};\n\n// From https://material.io/design/motion/speed.html#duration\nconst ANIMATION_DURATION = 100;\n\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for Android.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nclass CheckboxAndroid extends React.Component<Props, State> {\n  static displayName = 'Checkbox.Android';\n\n  state = {\n    scaleAnim: new Animated.Value(1),\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.status === this.props.status) {\n      return;\n    }\n\n    const checked = this.props.status === 'checked';\n    const { animation } = this.props.theme;\n\n    Animated.sequence([\n      Animated.timing(this.state.scaleAnim, {\n        toValue: 0.85,\n        duration: checked ? ANIMATION_DURATION * animation.scale : 0,\n        useNativeDriver: false,\n      }),\n      Animated.timing(this.state.scaleAnim, {\n        toValue: 1,\n        duration: checked\n          ? ANIMATION_DURATION * animation.scale\n          : ANIMATION_DURATION * animation.scale * 1.75,\n        useNativeDriver: false,\n      }),\n    ]).start();\n  }\n\n  render() {\n    const { status, disabled, onPress, theme, ...rest } = this.props;\n    const checked = status === 'checked';\n    const indeterminate = status === 'indeterminate';\n    const checkedColor = this.props.color || theme.colors.accent;\n    const uncheckedColor =\n      this.props.uncheckedColor ||\n      color(theme.colors.text)\n        .alpha(theme.dark ? 0.7 : 0.54)\n        .rgb()\n        .string();\n\n    let rippleColor, checkboxColor;\n\n    if (disabled) {\n      rippleColor = color(theme.colors.text)\n        .alpha(0.16)\n        .rgb()\n        .string();\n      checkboxColor = theme.colors.disabled;\n    } else {\n      rippleColor = color(checkedColor)\n        .fade(0.32)\n        .rgb()\n        .string();\n      checkboxColor = checked ? checkedColor : uncheckedColor;\n    }\n\n    const borderWidth = this.state.scaleAnim.interpolate({\n      inputRange: [0.8, 1],\n      outputRange: [7, 0],\n    });\n\n    const icon = indeterminate\n      ? 'minus-box'\n      : checked\n      ? 'checkbox-marked'\n      : 'checkbox-blank-outline';\n\n    return (\n      <TouchableRipple\n        {...rest}\n        borderless\n        rippleColor={rippleColor}\n        onPress={onPress}\n        disabled={disabled}\n        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityStates={disabled ? ['disabled'] : []}\n        accessibilityLiveRegion=\"polite\"\n        style={styles.container}\n      >\n        <Animated.View style={{ transform: [{ scale: this.state.scaleAnim }] }}>\n          <MaterialCommunityIcon\n            allowFontScaling={false}\n            name={icon}\n            size={24}\n            color={checkboxColor}\n            direction=\"ltr\"\n          />\n          <View style={[StyleSheet.absoluteFill, styles.fillContainer]}>\n            <Animated.View\n              style={[\n                styles.fill,\n                { borderColor: checkboxColor },\n                { borderWidth },\n              ]}\n            />\n          </View>\n        </Animated.View>\n      </TouchableRipple>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    width: 36,\n    height: 36,\n    padding: 6,\n  },\n  fillContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  fill: {\n    height: 14,\n    width: 14,\n  },\n});\n\nexport default withTheme(CheckboxAndroid);\n\n// @component-docs ignore-next-line\nexport { CheckboxAndroid };\n"]}