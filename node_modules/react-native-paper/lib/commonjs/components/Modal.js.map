{"version":3,"sources":["Modal.tsx"],"names":["DEFAULT_DURATION","Modal","React","Component","opacity","Animated","Value","props","visible","rendered","dismissable","hideModal","BackHandler","removeEventListener","handleBack","addEventListener","state","scale","theme","animation","timing","toValue","duration","easing","Easing","out","cubic","useNativeDriver","start","finished","onDismiss","showModal","setState","getDerivedStateFromProps","nextProps","prevState","componentDidUpdate","prevProps","componentWillUnmount","render","children","contentContainerStyle","colors","StyleSheet","absoluteFill","undefined","styles","backdrop","backgroundColor","wrapper","content","create","flex","absoluteFillObject","justifyContent"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  BackHandler,\n  Easing,\n  StyleProp,\n  StyleSheet,\n  TouchableWithoutFeedback,\n  ViewStyle,\n} from 'react-native';\nimport SafeAreaView from 'react-native-safe-area-view';\nimport Surface from './Surface';\nimport { withTheme } from '../core/theming';\nimport { Theme } from '../types';\n\ntype Props = {\n  /**\n   * Determines whether clicking outside the modal dismiss it.\n   */\n  dismissable?: boolean;\n  /**\n   * Callback that is called when the user dismisses the modal.\n   */\n  onDismiss?: () => void;\n  /**\n   * Determines Whether the modal is visible.\n   */\n  visible: boolean;\n  /**\n   * Content of the `Modal`.\n   */\n  children: React.ReactNode;\n  /**\n   * Style for the content of the modal\n   */\n  contentContainerStyle?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\ntype State = {\n  opacity: Animated.Value;\n  rendered: boolean;\n};\n\nconst DEFAULT_DURATION = 220;\n\n/**\n * The Modal component is a simple way to present content above an enclosing view.\n * To render the `Modal` above other components, you'll need to wrap it with the [`Portal`](portal.html) component.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/modal.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Modal, Portal, Text, Button, Provider } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(false);\n *\n *   const showModal = () => setVisible(true);\n *\n *   const hideModal = () => setVisible(false);\n *\n *   return (\n *     <Provider>\n *       <Portal>\n *         <Modal visible={visible} onDismiss={hideModal}>\n *           <Text>Example Modal</Text>\n *         </Modal>\n *         <Button style={{marginTop: 30}} onPress={showModal}>\n *           Show\n *         </Button>\n *       </Portal>\n *     </Provider>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nclass Modal extends React.Component<Props, State> {\n  static defaultProps = {\n    dismissable: true,\n    visible: false,\n  };\n\n  static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n    if (nextProps.visible && !prevState.rendered) {\n      return {\n        rendered: true,\n      };\n    }\n\n    return null;\n  }\n\n  state = {\n    opacity: new Animated.Value(this.props.visible ? 1 : 0),\n    rendered: this.props.visible,\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.visible !== this.props.visible) {\n      if (this.props.visible) {\n        this.showModal();\n      } else {\n        this.hideModal();\n      }\n    }\n  }\n\n  private handleBack = () => {\n    if (this.props.dismissable) {\n      this.hideModal();\n    }\n    return true;\n  };\n\n  private showModal = () => {\n    BackHandler.removeEventListener('hardwareBackPress', this.handleBack);\n    BackHandler.addEventListener('hardwareBackPress', this.handleBack);\n\n    const { opacity } = this.state;\n    const { scale } = this.props.theme.animation;\n\n    Animated.timing(opacity, {\n      toValue: 1,\n      duration: scale * DEFAULT_DURATION,\n      easing: Easing.out(Easing.cubic),\n      useNativeDriver: true,\n    }).start();\n  };\n\n  private hideModal = () => {\n    BackHandler.removeEventListener('hardwareBackPress', this.handleBack);\n\n    const { opacity } = this.state;\n    const { scale } = this.props.theme.animation;\n\n    Animated.timing(opacity, {\n      toValue: 0,\n      duration: scale * DEFAULT_DURATION,\n      easing: Easing.out(Easing.cubic),\n      useNativeDriver: true,\n    }).start(({ finished }) => {\n      if (!finished) {\n        return;\n      }\n\n      if (this.props.visible && this.props.onDismiss) {\n        this.props.onDismiss();\n      }\n\n      if (this.props.visible) {\n        this.showModal();\n      } else {\n        this.setState({\n          rendered: false,\n        });\n      }\n    });\n  };\n\n  componentWillUnmount() {\n    BackHandler.removeEventListener('hardwareBackPress', this.handleBack);\n  }\n\n  render() {\n    const { rendered, opacity } = this.state;\n\n    if (!rendered) return null;\n\n    const { children, dismissable, theme, contentContainerStyle } = this.props;\n    const { colors } = theme;\n    return (\n      <Animated.View\n        pointerEvents={this.props.visible ? 'auto' : 'none'}\n        accessibilityViewIsModal\n        accessibilityLiveRegion=\"polite\"\n        style={StyleSheet.absoluteFill}\n      >\n        <TouchableWithoutFeedback\n          disabled={!dismissable}\n          onPress={dismissable ? this.hideModal : undefined}\n        >\n          <Animated.View\n            style={[\n              styles.backdrop,\n              { backgroundColor: colors.backdrop, opacity },\n            ]}\n          />\n        </TouchableWithoutFeedback>\n        <SafeAreaView style={styles.wrapper} pointerEvents=\"box-none\">\n          <Surface\n            style={\n              [{ opacity }, styles.content, contentContainerStyle] as StyleProp<\n                ViewStyle\n              >\n            }\n          >\n            {children}\n          </Surface>\n        </SafeAreaView>\n      </Animated.View>\n    );\n  }\n}\n\nexport default withTheme(Modal);\n\nconst styles = StyleSheet.create({\n  backdrop: {\n    flex: 1,\n  },\n  wrapper: {\n    ...StyleSheet.absoluteFillObject,\n    justifyContent: 'center',\n  },\n  content: {\n    backgroundColor: 'transparent',\n    justifyContent: 'center',\n  },\n});\n"]}