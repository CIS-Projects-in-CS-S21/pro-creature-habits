{"version":3,"sources":["index.tsx"],"names":["TouchableRipple","React","Component","e","centered","rippleColor","onPressIn","theme","props","dark","colors","calculatedRippleColor","text","alpha","rgb","string","button","currentTarget","style","window","getComputedStyle","dimensions","getBoundingClientRect","touchX","touchY","width","height","changedTouches","touches","nativeEvent","touch","startX","pageX","startY","pageY","left","top","size","Math","min","max","container","document","createElement","setAttribute","Object","assign","position","pointerEvents","right","bottom","borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","overflow","ripple","backgroundColor","borderRadius","transitionProperty","transitionDuration","transitionTimingFunction","transformOrigin","transform","opacity","appendChild","requestAnimationFrame","onPressOut","containers","querySelectorAll","forEach","firstChild","setTimeout","parentNode","removeChild","render","background","borderless","disabled","disabledProp","underlayColor","children","rest","onPress","handlePressIn","handlePressOut","styles","touchable","Children","only","StyleSheet","create"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  GestureResponderEvent,\n} from 'react-native';\nimport color from 'color';\nimport { withTheme } from '../../core/theming';\nimport { Theme } from '../../types';\n\ntype Props = React.ComponentPropsWithRef<typeof TouchableWithoutFeedback> & {\n  /**\n   * Whether to render the ripple outside the view bounds.\n   */\n  borderless?: boolean;\n  /**\n   * Type of background drawabale to display the feedback (Android).\n   * https://facebook.github.io/react-native/docs/touchablenativefeedback.html#background\n   */\n  background?: Object;\n  /**\n   * Whether to start the ripple at the center (Web).\n   */\n  centered?: boolean;\n  /**\n   * Whether to prevent interaction with the touchable.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press. If not set, will cause the touchable to be disabled.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Color of the ripple effect (Android >= 5.0 and Web).\n   */\n  rippleColor?: string;\n  /**\n   * Color of the underlay for the highlight effect (Android < 5.0 and iOS).\n   */\n  underlayColor?: string;\n  /**\n   * Content of the `TouchableRipple`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * A wrapper for views that should respond to touches.\n * Provides a material \"ink ripple\" interaction effect for supported platforms (>= Android Lollipop).\n * On unsupported platforms, it falls back to a highlight effect.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/touchable-ripple.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Text, TouchableRipple } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <TouchableRipple\n *     onPress={() => console.log('Pressed')}\n *     rippleColor=\"rgba(0, 0, 0, .32)\"\n *   >\n *     <Text>Press anywhere</Text>\n *   </TouchableRipple>\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass TouchableRipple extends React.Component<Props> {\n  static defaultProps = {\n    borderless: false,\n  };\n\n  /**\n   * Whether ripple effect is supported.\n   */\n  static supported = true;\n\n  private handlePressIn = (e: any) => {\n    const { centered, rippleColor, onPressIn, theme } = this.props;\n\n    onPressIn?.(e);\n\n    const { dark, colors } = theme;\n    const calculatedRippleColor =\n      rippleColor ||\n      color(colors.text)\n        .alpha(dark ? 0.32 : 0.2)\n        .rgb()\n        .string();\n\n    const button = e.currentTarget;\n    const style = window.getComputedStyle(button);\n    const dimensions = button.getBoundingClientRect();\n\n    let touchX;\n    let touchY;\n\n    if (centered) {\n      touchX = dimensions.width / 2;\n      touchY = dimensions.height / 2;\n    } else {\n      const { changedTouches, touches } = e.nativeEvent;\n      const touch = touches?.[0] ?? changedTouches?.[0];\n      const startX = touch.pageX ?? e.pageX;\n      const startY = touch.pageY ?? e.pageY;\n\n      touchX = startX - dimensions.left;\n      touchY = startY - dimensions.top;\n    }\n\n    // Get the size of the button to determine how big the ripple should be\n    const size = centered\n      ? // If ripple is always centered, we don't need to make it too big\n        Math.min(dimensions.width, dimensions.height) * 1.25\n      : // Otherwise make it twice as big so clicking on one end spreads ripple to other\n        Math.max(dimensions.width, dimensions.height) * 2;\n\n    // Create a container for our ripple effect so we don't need to change the parent's style\n    const container = document.createElement('span');\n\n    container.setAttribute('data-paper-ripple', '');\n\n    Object.assign(container.style, {\n      position: 'absolute',\n      pointerEvents: 'none',\n      top: '0',\n      left: '0',\n      right: '0',\n      bottom: '0',\n      borderTopLeftRadius: style.borderTopLeftRadius,\n      borderTopRightRadius: style.borderTopRightRadius,\n      borderBottomRightRadius: style.borderBottomRightRadius,\n      borderBottomLeftRadius: style.borderBottomLeftRadius,\n      overflow: centered ? 'visible' : 'hidden',\n    });\n\n    // Create span to show the ripple effect\n    const ripple = document.createElement('span');\n\n    Object.assign(ripple.style, {\n      position: 'absolute',\n      pointerEvents: 'none',\n      backgroundColor: calculatedRippleColor,\n      borderRadius: '50%',\n\n      /* Transition configuration */\n      transitionProperty: 'transform opacity',\n      transitionDuration: `${Math.min(size * 1.5, 350)}ms`,\n      transitionTimingFunction: 'linear',\n      transformOrigin: 'center',\n\n      /* We'll animate these properties */\n      transform: 'translate3d(-50%, -50%, 0) scale3d(0.1, 0.1, 0.1)',\n      opacity: '0.5',\n\n      // Position the ripple where cursor was\n      left: `${touchX}px`,\n      top: `${touchY}px`,\n      width: `${size}px`,\n      height: `${size}px`,\n    });\n\n    // Finally, append it to DOM\n    container.appendChild(ripple);\n    button.appendChild(container);\n\n    // rAF runs in the same frame as the event handler\n    // Use double rAF to ensure the transition class is added in next frame\n    // This will make sure that the transition animation is triggered\n    requestAnimationFrame(() => {\n      requestAnimationFrame(() => {\n        Object.assign(ripple.style, {\n          transform: 'translate3d(-50%, -50%, 0) scale3d(1, 1, 1)',\n          opacity: '1',\n        });\n      });\n    });\n  };\n\n  private handlePressOut = (e: any) => {\n    this.props.onPressOut && this.props.onPressOut(e);\n\n    const containers = e.currentTarget.querySelectorAll(\n      '[data-paper-ripple]'\n    ) as HTMLElement[];\n\n    requestAnimationFrame(() => {\n      requestAnimationFrame(() => {\n        containers.forEach(container => {\n          // @ts-ignore\n          const ripple = container.firstChild;\n\n          // @ts-ignore\n          Object.assign(ripple.style, {\n            transitionDuration: '250ms',\n            opacity: 0,\n          });\n\n          // Finally remove the span after the transition\n          setTimeout(() => {\n            // @ts-ignore\n            const { parentNode } = container;\n\n            if (parentNode) {\n              parentNode.removeChild(container);\n            }\n          }, 500);\n        });\n      });\n    });\n  };\n\n  render() {\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    const {\n      style,\n      background,\n      borderless,\n      disabled: disabledProp,\n      rippleColor,\n      underlayColor,\n      children,\n      theme,\n      ...rest\n    } = this.props;\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n\n    const disabled = disabledProp || !this.props.onPress;\n\n    return (\n      <TouchableWithoutFeedback\n        {...rest}\n        onPressIn={this.handlePressIn}\n        onPressOut={this.handlePressOut}\n        disabled={disabled}\n      >\n        <View\n          style={[styles.touchable, borderless && styles.borderless, style]}\n        >\n          {React.Children.only(children)}\n        </View>\n      </TouchableWithoutFeedback>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  touchable: {\n    position: 'relative',\n  },\n  borderless: {\n    overflow: 'hidden',\n  },\n});\n\nexport default withTheme(TouchableRipple);\n"]}