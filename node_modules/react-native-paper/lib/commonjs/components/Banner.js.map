{"version":3,"sources":["Banner.tsx"],"names":["ELEVATION","DEFAULT_MAX_WIDTH","Banner","React","Component","position","Animated","Value","props","visible","layout","height","measured","nativeEvent","setState","show","hide","scale","theme","animation","timing","state","duration","toValue","useNativeDriver","start","componentDidUpdate","prevProps","toggle","render","icon","children","actions","contentStyle","style","rest","multiply","translateY","add","styles","container","wrapper","handleLayout","absolute","transform","opacity","content","message","map","i","label","others","button","StyleSheet","create","elevation","overflow","alignSelf","width","maxWidth","top","flexDirection","justifyContent","marginHorizontal","marginTop","marginBottom","margin","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, ViewStyle, StyleSheet, StyleProp, Animated } from 'react-native';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport Button from './Button';\nimport Icon, { IconSource } from './Icon';\nimport { withTheme } from '../core/theming';\nimport { Theme, $RemoveChildren } from '../types';\nimport shadow from '../styles/shadow';\n\nconst ELEVATION = 1;\nconst DEFAULT_MAX_WIDTH = 960;\n\ntype Props = $RemoveChildren<typeof Surface> & {\n  /**\n   * Whether banner is currently visible.\n   */\n  visible: boolean;\n  /**\n   * Content that will be displayed inside banner.\n   */\n  children: string;\n  /**\n   * Icon to display for the `Banner`. Can be an image.\n   */\n  icon?: IconSource;\n  /**\n   * Action items to shown in the banner.\n   * An action item should contain the following properties:\n   *\n   * - `label`: label of the action button (required)\n   * - `onPress`: callback that is called when button is pressed (required)\n   *\n   * To customize button you can pass other props that button component takes.\n   */\n  actions: Array<{\n    label: string;\n    onPress: () => void;\n  }>;\n  /**\n   * Style of banner's inner content.\n   * Use this prop to apply custom width for wide layouts.\n   */\n  contentStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  ref?: React.RefObject<View>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\ntype State = {\n  position: Animated.Value;\n  layout: {\n    height: number;\n    measured: boolean;\n  };\n};\n\ntype NativeEvent = {\n  nativeEvent: {\n    layout: {\n      x: number;\n      y: number;\n      width: number;\n      height: number;\n    };\n  };\n};\n\n/**\n * Banner displays a prominent message and related actions.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/banner.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Image } from 'react-native';\n * import { Banner } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(true);\n *\n *   return (\n *     <Banner\n *       visible={visible}\n *       actions={[\n *         {\n *           label: 'Fix it',\n *           onPress: () => setVisible(false),\n *         },\n *         {\n *           label: 'Learn more',\n *           onPress: () => setVisible(false),\n *         },\n *       ]}\n *       icon={({size}) => (\n *         <Image\n *           source={{\n *             uri: 'https://avatars3.githubusercontent.com/u/17571969?s=400&v=4',\n *           }}\n *           style={{\n *             width: size,\n *             height: size,\n *           }}\n *         />\n *       )}>\n *       There was a problem processing a transaction on your credit card.\n *     </Banner>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nclass Banner extends React.Component<Props, State> {\n  state = {\n    position: new Animated.Value(this.props.visible ? 1 : 0),\n    layout: {\n      height: 0,\n      measured: false,\n    },\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.visible !== this.props.visible) {\n      this.toggle();\n    }\n  }\n\n  private handleLayout = ({ nativeEvent }: NativeEvent) => {\n    const { height } = nativeEvent.layout;\n\n    this.setState({ layout: { height, measured: true } });\n  };\n\n  private toggle = () => {\n    if (this.props.visible) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  };\n\n  private show = () => {\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.position, {\n      duration: 250 * scale,\n      toValue: 1,\n      useNativeDriver: false,\n    }).start();\n  };\n\n  private hide = () => {\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.position, {\n      duration: 200 * scale,\n      toValue: 0,\n      useNativeDriver: false,\n    }).start();\n  };\n\n  render() {\n    const {\n      visible,\n      icon,\n      children,\n      actions,\n      contentStyle,\n      style,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      theme,\n      ...rest\n    } = this.props;\n    const { position, layout } = this.state;\n\n    // The banner animation has 2 parts:\n    // 1. Blank spacer element which animates its height to move the content\n    // 2. Actual banner which animates its translateY\n    // In initial render, we position everything normally and measure the height of the banner\n    // Once we have the height, we apply the height to the spacer and switch the banner to position: absolute\n    // We need this because we need to move the content below as if banner's height was being animated\n    // However we can't animated banner's height directly as it'll also resize the content inside\n    const height = Animated.multiply(position, layout.height);\n\n    const translateY = Animated.multiply(\n      Animated.add(position, -1),\n      layout.height\n    );\n    return (\n      <Surface\n        {...rest}\n        style={[styles.container, shadow(ELEVATION) as ViewStyle, style]}\n      >\n        <View style={[styles.wrapper, contentStyle]}>\n          <Animated.View style={{ height }} />\n          <Animated.View\n            onLayout={this.handleLayout}\n            style={[\n              layout.measured || !visible\n                ? // If we have measured banner's height or it's invisible,\n                  // Position it absolutely, the layout will be taken care of the spacer\n                  [styles.absolute, { transform: [{ translateY }] }]\n                : // Otherwise position it normally\n                  null,\n              !layout.measured && !visible\n                ? // If we haven't measured banner's height yet and it's invisible,\n                  // hide it with opacity: 0 so user doesn't see it\n                  { opacity: 0 }\n                : null,\n            ]}\n          >\n            <View style={styles.content}>\n              {icon ? (\n                <View style={styles.icon}>\n                  {/*\n                  // @ts-ignore */}\n                  <Icon source={icon} size={40} />\n                </View>\n              ) : null}\n              <Text style={styles.message}>{children}</Text>\n            </View>\n            <View style={styles.actions}>\n              {actions.map(({ label, ...others }, i) => (\n                <Button\n                  key={/* eslint-disable-line react/no-array-index-key */ i}\n                  compact\n                  mode=\"text\"\n                  style={styles.button}\n                  {...others}\n                >\n                  {label}\n                </Button>\n              ))}\n            </View>\n          </Animated.View>\n        </View>\n      </Surface>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    elevation: ELEVATION,\n  },\n  wrapper: {\n    overflow: 'hidden',\n    alignSelf: 'center',\n    width: '100%',\n    maxWidth: DEFAULT_MAX_WIDTH,\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    width: '100%',\n  },\n  content: {\n    flexDirection: 'row',\n    justifyContent: 'flex-start',\n    marginHorizontal: 8,\n    marginTop: 16,\n    marginBottom: 0,\n  },\n  icon: {\n    margin: 8,\n  },\n  message: {\n    flex: 1,\n    margin: 8,\n  },\n  actions: {\n    flexDirection: 'row',\n    justifyContent: 'flex-end',\n    margin: 4,\n  },\n  button: {\n    margin: 4,\n  },\n});\n\nexport default withTheme(Banner);\n"]}