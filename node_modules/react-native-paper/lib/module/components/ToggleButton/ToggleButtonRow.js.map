{"version":3,"sources":["ToggleButtonRow.tsx"],"names":["React","StyleSheet","View","ToggleButton","ToggleButtonRow","Component","render","value","onValueChange","children","style","props","count","Children","styles","row","map","child","i","type","cloneElement","button","first","last","middle","create","flexDirection","borderWidth","hairlineWidth","borderTopRightRadius","borderBottomRightRadius","borderRadius","borderLeftWidth","borderTopLeftRadius","borderBottomLeftRadius"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,EAAqBC,IAArB,QAAuD,cAAvD;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;AAkBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,MAAMC,eAAN,SAA8BJ,KAAK,CAACK,SAApC,CAAqD;AAGnDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA,aAAT;AAAwBC,MAAAA,QAAxB;AAAkCC,MAAAA;AAAlC,QAA4C,KAAKC,KAAvD;AACA,UAAMC,KAAK,GAAGZ,KAAK,CAACa,QAAN,CAAeD,KAAf,CAAqBH,QAArB,CAAd;AAEA,wBACE,oBAAC,YAAD,CAAc,KAAd;AAAoB,MAAA,KAAK,EAAEF,KAA3B;AAAkC,MAAA,aAAa,EAAEC;AAAjD,oBACE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE,CAACM,MAAM,CAACC,GAAR,EAAaL,KAAb;AAAb,OACGV,KAAK,CAACa,QAAN,CAAeG,GAAf,CAAmBP,QAAnB,EAA6B,CAACQ,KAAD,EAAQC,CAAR,KAAc;AAC1C;AACA,UAAID,KAAK,IAAIA,KAAK,CAACE,IAAN,KAAehB,YAA5B,EAA0C;AACxC;AACA,4BAAOH,KAAK,CAACoB,YAAN,CAAmBH,KAAnB,EAA0B;AAC/BP,UAAAA,KAAK,EAAE,CACLI,MAAM,CAACO,MADF,EAELH,CAAC,KAAK,CAAN,GACIJ,MAAM,CAACQ,KADX,GAEIJ,CAAC,KAAKN,KAAK,GAAG,CAAd,GACAE,MAAM,CAACS,IADP,GAEAT,MAAM,CAACU,MANN,EAOL;AACAP,UAAAA,KAAK,CAACN,KAAN,CAAYD,KARP;AADwB,SAA1B,CAAP;AAYD;;AAED,aAAOO,KAAP;AACD,KAnBA,CADH,CADF,CADF;AA0BD;;AAjCkD;;gBAA/Cb,e,iBACiB,kB;;AAmCvB,MAAMU,MAAM,GAAGb,UAAU,CAACwB,MAAX,CAAkB;AAC/BV,EAAAA,GAAG,EAAE;AACHW,IAAAA,aAAa,EAAE;AADZ,GAD0B;AAI/BL,EAAAA,MAAM,EAAE;AACNM,IAAAA,WAAW,EAAE1B,UAAU,CAAC2B;AADlB,GAJuB;AAQ/BN,EAAAA,KAAK,EAAE;AACLO,IAAAA,oBAAoB,EAAE,CADjB;AAELC,IAAAA,uBAAuB,EAAE;AAFpB,GARwB;AAa/BN,EAAAA,MAAM,EAAE;AACNO,IAAAA,YAAY,EAAE,CADR;AAENC,IAAAA,eAAe,EAAE;AAFX,GAbuB;AAkB/BT,EAAAA,IAAI,EAAE;AACJS,IAAAA,eAAe,EAAE,CADb;AAEJC,IAAAA,mBAAmB,EAAE,CAFjB;AAGJC,IAAAA,sBAAsB,EAAE;AAHpB;AAlByB,CAAlB,CAAf;AAyBA,eAAe9B,eAAf","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View, StyleProp, ViewStyle } from 'react-native';\nimport ToggleButton from './ToggleButton';\n\ntype Props = {\n  /**\n   * Function to execute on selection change.\n   */\n  onValueChange: (value: string) => void;\n  /**\n   * Value of the currently selected toggle button.\n   */\n  value: string;\n  /**\n   * React elements containing toggle buttons.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * Toggle button row renders a group of toggle buttons in a row.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/toggle-button-row.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('left');\n *\n *   return (\n *     <ToggleButton.Row onValueChange={value => setValue(value)} value={value}>\n *       <ToggleButton icon=\"format-align-left\" value=\"left\" />\n *       <ToggleButton icon=\"format-align-right\" value=\"right\" />\n *     </ToggleButton.Row>\n *   );\n * };\n *\n * export default MyComponent;\n *\n *```\n */\nclass ToggleButtonRow extends React.Component<Props> {\n  static displayName = 'ToggleButton.Row';\n\n  render() {\n    const { value, onValueChange, children, style } = this.props;\n    const count = React.Children.count(children);\n\n    return (\n      <ToggleButton.Group value={value} onValueChange={onValueChange}>\n        <View style={[styles.row, style]}>\n          {React.Children.map(children, (child, i) => {\n            // @ts-ignore\n            if (child && child.type === ToggleButton) {\n              // @ts-ignore\n              return React.cloneElement(child, {\n                style: [\n                  styles.button,\n                  i === 0\n                    ? styles.first\n                    : i === count - 1\n                    ? styles.last\n                    : styles.middle,\n                  // @ts-ignore\n                  child.props.style,\n                ],\n              });\n            }\n\n            return child;\n          })}\n        </View>\n      </ToggleButton.Group>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row',\n  },\n  button: {\n    borderWidth: StyleSheet.hairlineWidth,\n  },\n\n  first: {\n    borderTopRightRadius: 0,\n    borderBottomRightRadius: 0,\n  },\n\n  middle: {\n    borderRadius: 0,\n    borderLeftWidth: 0,\n  },\n\n  last: {\n    borderLeftWidth: 0,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0,\n  },\n});\n\nexport default ToggleButtonRow;\n"]}