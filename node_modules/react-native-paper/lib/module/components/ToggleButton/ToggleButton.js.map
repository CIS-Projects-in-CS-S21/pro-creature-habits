{"version":3,"sources":["ToggleButton.tsx"],"names":["React","StyleSheet","withTheme","color","IconButton","ToggleButtonGroup","ToggleButtonGroupContext","ToggleButtonRow","black","white","ToggleButton","Component","render","props","icon","size","theme","accessibilityLabel","disabled","style","value","status","onPress","rest","borderRadius","roundness","context","backgroundColor","checked","dark","e","onValueChange","styles","content","borderColor","alpha","rgb","string","create","width","height","margin"],"mappings":";;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACEC,UADF,QAKO,cALP;AAMA,SAASC,SAAT,QAA0B,oBAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,iBAAP,IACEC,wBADF,QAEO,qBAFP;AAGA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,KAAT,EAAgBC,KAAhB,QAA6B,qBAA7B;;AA4CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA,MAAMC,YAAN,SAA2BV,KAAK,CAACW,SAAjC,CAAkD;AAChD;AAGA;AAGAC,EAAAA,MAAM,GAAG;AACP,wBAWI,KAAKC,KAXT;AAAA,UAAM;AACJC,MAAAA,IADI;AAEJC,MAAAA,IAFI;AAGJC,MAAAA,KAHI;AAIJC,MAAAA,kBAJI;AAKJC,MAAAA,QALI;AAMJC,MAAAA,KANI;AAOJC,MAAAA,KAPI;AAQJC,MAAAA,MARI;AASJC,MAAAA,OAAO,EAAPA;AATI,KAAN;AAAA,UAUKC,IAVL;;AAYA,UAAMC,YAAY,GAAGR,KAAK,CAACS,SAA3B;AAEA,wBACE,oBAAC,wBAAD,CAA0B,QAA1B,QACIC,OAAD,IAAgE;AAC/D,UAAIC,eAAJ;AAEA,YAAMC,OAAuB,GAC1BF,OAAO,IAAIA,OAAO,CAACN,KAAR,KAAkBA,KAA9B,IAAwCC,MAAM,KAAK,SADrD;;AAGA,UAAIO,OAAJ,EAAa;AACXD,QAAAA,eAAe,GAAGX,KAAK,CAACa,IAAN,GACd,0BADc,GAEd,oBAFJ;AAGD,OAJD,MAIO;AACLF,QAAAA,eAAe,GAAG,aAAlB;AACD;;AAED,0BACE,oBAAC,UAAD;AACE,QAAA,UAAU,EAAE,KADd;AAEE,QAAA,IAAI,EAAEb,IAFR;AAGE,QAAA,OAAO,EAAGgB,CAAD,IAAwC;AAC/C,cAAIR,QAAJ,EAAa;AACXA,YAAAA,QAAO,CAACQ,CAAD,CAAP;AACD;;AAED,cAAIJ,OAAJ,EAAa;AACXA,YAAAA,OAAO,CAACK,aAAR,CAAsB,CAACH,OAAD,GAAWR,KAAX,GAAmB,IAAzC;AACD;AACF,SAXH;AAYE,QAAA,IAAI,EAAEL,IAZR;AAaE,QAAA,kBAAkB,EAAEE,kBAbtB;AAcE,QAAA,QAAQ,EAAEC,QAdZ;AAeE,QAAA,KAAK,EAAE,CACLc,MAAM,CAACC,OADF,EAEL;AACEN,UAAAA,eADF;AAEEH,UAAAA,YAFF;AAGEU,UAAAA,WAAW,EAAE/B,KAAK,CAACa,KAAK,CAACa,IAAN,GAAapB,KAAb,GAAqBD,KAAtB,CAAL,CACV2B,KADU,CACJ,IADI,EAEVC,GAFU,GAGVC,MAHU;AAHf,SAFK,EAULlB,KAVK;AAfT,SA2BMI,IA3BN,EADF;AA+BD,KA9CH,CADF;AAkDD;;AAxE+C;;gBAA5Cb,Y,WAEWL,iB;;gBAFXK,Y,SAKSH,e;;AAsEf,MAAMyB,MAAM,GAAG/B,UAAU,CAACqC,MAAX,CAAkB;AAC/BL,EAAAA,OAAO,EAAE;AACPM,IAAAA,KAAK,EAAE,EADA;AAEPC,IAAAA,MAAM,EAAE,EAFD;AAGPC,IAAAA,MAAM,EAAE;AAHD;AADsB,CAAlB,CAAf;AAQA,eAAevC,SAAS,CAACQ,YAAD,CAAxB","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  GestureResponderEvent,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport color from 'color';\nimport IconButton from '../IconButton';\nimport ToggleButtonGroup, {\n  ToggleButtonGroupContext,\n} from './ToggleButtonGroup';\nimport ToggleButtonRow from './ToggleButtonRow';\nimport { black, white } from '../../styles/colors';\nimport { IconSource } from '../Icon';\nimport { Theme } from '../../types';\n\ntype Props = {\n  /**\n   * Icon to display for the `ToggleButton`.\n   */\n  icon: IconSource;\n  /**\n   * Size of the icon.\n   */\n  size?: number;\n  /**\n   * Custom text color for button.\n   */\n  color?: string;\n  /**\n   * Whether the button is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the `ToggleButton`. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (value?: GestureResponderEvent | string) => void;\n  /**\n   * Value of button.\n   */\n  value?: string;\n  /**\n   * Status of button.\n   */\n  status?: 'checked' | 'unchecked';\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * Toggle buttons can be used to group related options. To emphasize groups of related toggle buttons,\n * a group should share a common container.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/toggle-button.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const ToggleButtonExample = () => {\n *   const [status, setStatus] = React.useState('checked');\n *\n *   const onButtonToggle = value => {\n *     setStatus(status === 'checked' ? 'unchecked' : 'checked');\n *   };\n *\n *   return (\n *     <ToggleButton\n *       icon=\"bluetooth\"\n *       value=\"bluetooth\"\n *       status={status}\n *       onPress={onButtonToggle}\n *     />\n *   );\n * };\n *\n * export default ToggleButtonExample;\n *\n * ```\n */\nclass ToggleButton extends React.Component<Props> {\n  // @component ./ToggleButtonGroup.tsx\n  static Group = ToggleButtonGroup;\n\n  // @component ./ToggleButtonRow.tsx\n  static Row = ToggleButtonRow;\n\n  render() {\n    const {\n      icon,\n      size,\n      theme,\n      accessibilityLabel,\n      disabled,\n      style,\n      value,\n      status,\n      onPress,\n      ...rest\n    } = this.props;\n    const borderRadius = theme.roundness;\n\n    return (\n      <ToggleButtonGroupContext.Consumer>\n        {(context: { value: string; onValueChange: Function } | null) => {\n          let backgroundColor;\n\n          const checked: boolean | null =\n            (context && context.value === value) || status === 'checked';\n\n          if (checked) {\n            backgroundColor = theme.dark\n              ? 'rgba(255, 255, 255, .12)'\n              : 'rgba(0, 0, 0, .08)';\n          } else {\n            backgroundColor = 'transparent';\n          }\n\n          return (\n            <IconButton\n              borderless={false}\n              icon={icon}\n              onPress={(e?: GestureResponderEvent | string) => {\n                if (onPress) {\n                  onPress(e);\n                }\n\n                if (context) {\n                  context.onValueChange(!checked ? value : null);\n                }\n              }}\n              size={size}\n              accessibilityLabel={accessibilityLabel}\n              disabled={disabled}\n              style={[\n                styles.content,\n                {\n                  backgroundColor,\n                  borderRadius,\n                  borderColor: color(theme.dark ? white : black)\n                    .alpha(0.29)\n                    .rgb()\n                    .string(),\n                },\n                style,\n              ]}\n              {...rest}\n            />\n          );\n        }}\n      </ToggleButtonGroupContext.Consumer>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0,\n  },\n});\n\nexport default withTheme(ToggleButton);\n"]}