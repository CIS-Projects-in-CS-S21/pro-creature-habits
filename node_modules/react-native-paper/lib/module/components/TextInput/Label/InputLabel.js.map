{"version":3,"sources":["InputLabel.tsx"],"names":["React","Animated","StyleSheet","AnimatedText","InputLabel","props","parentState","labelBackground","label","error","onLayoutAnimatedText","hasActiveOutline","activeColor","placeholderStyle","baseLabelTranslateX","baseLabelTranslateY","font","fontSize","fontWeight","placeholderOpacity","wiggleOffsetX","labelScale","topPosition","paddingOffset","placeholderColor","errorColor","labelProps","labelTranslationX","transform","translateX","labeled","interpolate","inputRange","outputRange","labelStyle","value","translateY","scale","absoluteFill","opacity","focused","labelLayout","measured","top","color"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Animated, StyleSheet } from 'react-native';\nimport AnimatedText from '../../Typography/AnimatedText';\n\nimport { InputLabelProps } from '../types';\n\nconst InputLabel = (props: InputLabelProps) => {\n  const { parentState, labelBackground } = props;\n\n  const {\n    label,\n    error,\n    onLayoutAnimatedText,\n    hasActiveOutline,\n    activeColor,\n    placeholderStyle,\n    baseLabelTranslateX,\n    baseLabelTranslateY,\n    font,\n    fontSize,\n    fontWeight,\n    placeholderOpacity,\n    wiggleOffsetX,\n    labelScale,\n    topPosition,\n    paddingOffset,\n    placeholderColor,\n    errorColor,\n  } = props.labelProps;\n\n  const labelTranslationX = {\n    transform: [\n      {\n        // Offset label scale since RN doesn't support transform origin\n        translateX: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [baseLabelTranslateX, 0],\n        }),\n      },\n    ],\n  };\n\n  const labelStyle = {\n    ...font,\n    fontSize,\n    fontWeight,\n    transform: [\n      {\n        // Wiggle the label when there's an error\n        translateX: parentState.error.interpolate({\n          inputRange: [0, 0.5, 1],\n          outputRange: [0, parentState.value && error ? wiggleOffsetX : 0, 0],\n        }),\n      },\n      {\n        // Move label to top\n        translateY: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [baseLabelTranslateY, 0],\n        }),\n      },\n      {\n        // Make label smaller\n        scale: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [labelScale, 1],\n        }),\n      },\n    ],\n  };\n\n  return label ? (\n    // Position colored placeholder and gray placeholder on top of each other and crossfade them\n    // This gives the effect of animating the color, but allows us to use native driver\n    <Animated.View\n      pointerEvents=\"none\"\n      style={[\n        StyleSheet.absoluteFill,\n        {\n          opacity:\n            // Hide the label in minimized state until we measure it's width\n            parentState.value || parentState.focused\n              ? parentState.labelLayout.measured\n                ? 1\n                : 0\n              : 1,\n        },\n        labelTranslationX,\n      ]}\n    >\n      {labelBackground?.({\n        parentState,\n        labelStyle,\n        labelProps: props.labelProps,\n      })}\n      <AnimatedText\n        onLayout={onLayoutAnimatedText}\n        style={[\n          placeholderStyle,\n          {\n            top: topPosition,\n          },\n          labelStyle,\n          paddingOffset || {},\n          {\n            color: activeColor,\n            opacity: parentState.labeled.interpolate({\n              inputRange: [0, 1],\n              outputRange: [hasActiveOutline ? 1 : 0, 0],\n            }),\n          },\n        ]}\n        numberOfLines={1}\n      >\n        {label}\n      </AnimatedText>\n      <AnimatedText\n        style={[\n          placeholderStyle,\n          {\n            top: topPosition,\n          },\n          labelStyle,\n          paddingOffset,\n          {\n            color: error && errorColor ? errorColor : placeholderColor,\n            opacity: placeholderOpacity,\n          },\n        ]}\n        numberOfLines={1}\n      >\n        {label}\n      </AnimatedText>\n    </Animated.View>\n  ) : null;\n};\n\nexport default InputLabel;\n"]}