{"version":3,"sources":["Dialog.tsx"],"names":["React","StyleSheet","Platform","Modal","DialogContent","DialogActions","DialogTitle","DialogScrollArea","withTheme","Dialog","Component","render","children","dismissable","onDismiss","visible","style","theme","props","borderRadius","roundness","backgroundColor","colors","surface","styles","container","Children","toArray","filter","child","map","i","isValidElement","type","cloneElement","paddingTop","create","marginVertical","OS","marginHorizontal","elevation","justifyContent"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,EAAqBC,QAArB,QAA2D,cAA3D;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,aAAP,MAA0B,iBAA1B,C,CACA;;AACA,OAAOC,WAAP,MAAyD,eAAzD;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,SAASC,SAAT,QAA0B,oBAA1B;;AA2BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA,MAAMC,MAAN,SAAqBT,KAAK,CAACU,SAA3B,CAA4C;AAC1C;AAEA;AAEA;AAEA;AAQAC,EAAAA,MAAM,GAAG;AACP,UAAM;AACJC,MAAAA,QADI;AAEJC,MAAAA,WAFI;AAGJC,MAAAA,SAHI;AAIJC,MAAAA,OAJI;AAKJC,MAAAA,KALI;AAMJC,MAAAA;AANI,QAOF,KAAKC,KAPT;AASA,wBACE,oBAAC,KAAD;AACE,MAAA,WAAW,EAAEL,WADf;AAEE,MAAA,SAAS,EAAEC,SAFb;AAGE,MAAA,OAAO,EAAEC,OAHX;AAIE,MAAA,qBAAqB,EAAE,CACrB;AACEI,QAAAA,YAAY,EAAEF,KAAK,CAACG,SADtB;AAEEC,QAAAA,eAAe,EAAEJ,KAAK,CAACK,MAAN,CAAaC;AAFhC,OADqB,EAKrBC,MAAM,CAACC,SALc,EAMrBT,KANqB;AAJzB,OAaGhB,KAAK,CAAC0B,QAAN,CAAeC,OAAf,CAAuBf,QAAvB,EACEgB,MADF,CACSC,KAAK,IAAIA,KAAK,IAAI,IAAT,IAAiB,OAAOA,KAAP,KAAiB,SADpD,EAEEC,GAFF,CAEM,CAACD,KAAD,EAAQE,CAAR,KAAc;AACjB,UACEA,CAAC,KAAK,CAAN,iBACA/B,KAAK,CAACgC,cAAN,CAAqBH,KAArB,CADA,IAEAA,KAAK,CAACI,IAAN,KAAe7B,aAHjB,EAIE;AACA;AACA,4BAAOJ,KAAK,CAACkC,YAAN,CAAmBL,KAAnB,EAA0B;AAC/Bb,UAAAA,KAAK,EAAE,CAAC;AAAEmB,YAAAA,UAAU,EAAE;AAAd,WAAD,EAAqBN,KAAK,CAACX,KAAN,CAAYF,KAAjC;AADwB,SAA1B,CAAP;AAGD;;AAED,aAAOa,KAAP;AACD,KAfF,CAbH,CADF;AAgCD;;AAzDyC;;gBAAtCpB,M,aAEaL,a;;gBAFbK,M,aAIaJ,a;;gBAJbI,M,WAMWH,W;;gBANXG,M,gBAQgBF,gB;;gBARhBE,M,kBAUkB;AACpBI,EAAAA,WAAW,EAAE,IADO;AAEpBE,EAAAA,OAAO,EAAE;AAFW,C;;AAkDxB,MAAMS,MAAM,GAAGvB,UAAU,CAACmC,MAAX,CAAkB;AAC/BX,EAAAA,SAAS,EAAE;AACT;;;;;;;AAOAY,IAAAA,cAAc,EAAEnC,QAAQ,CAACoC,EAAT,KAAgB,SAAhB,GAA4B,EAA5B,GAAiC,CARxC;AASTC,IAAAA,gBAAgB,EAAE,EATT;AAUTC,IAAAA,SAAS,EAAE,EAVF;AAWTC,IAAAA,cAAc,EAAE;AAXP;AADoB,CAAlB,CAAf;AAgBA,eAAejC,SAAS,CAACC,MAAD,CAAxB","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, Platform, StyleProp, ViewStyle } from 'react-native';\nimport Modal from '../Modal';\nimport DialogContent from './DialogContent';\nimport DialogActions from './DialogActions';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport DialogTitle, { DialogTitle as _DialogTitle } from './DialogTitle';\nimport DialogScrollArea from './DialogScrollArea';\nimport { withTheme } from '../../core/theming';\nimport { Theme } from '../../types';\n\ntype Props = {\n  /**\n   * Determines whether clicking outside the dialog dismiss it.\n   */\n  dismissable?: boolean;\n  /**\n   * Callback that is called when the user dismisses the dialog.\n   */\n  onDismiss?: () => void;\n  /**\n   * Determines Whether the dialog is visible.\n   */\n  visible: boolean;\n  /**\n   * Content of the `Dialog`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * Dialogs inform users about a specific task and may contain critical information, require decisions, or involve multiple tasks.\n * To render the `Dialog` above other components, you'll need to wrap it with the [`Portal`](portal.html) component.\n *\n *  <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/dialog-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/dialog-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Button, Paragraph, Dialog, Portal } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(false);\n *\n *   const showDialog = () => setVisible(true);\n *\n *   const hideDialog = () => setVisible(false);\n *\n *   return (\n *     <View>\n *       <Button onPress={showDialog}>Show Dialog</Button>\n *       <Portal>\n *         <Dialog visible={visible} onDismiss={hideDialog}>\n *           <Dialog.Title>Alert</Dialog.Title>\n *           <Dialog.Content>\n *             <Paragraph>This is simple dialog</Paragraph>\n *           </Dialog.Content>\n *           <Dialog.Actions>\n *             <Button onPress={hideDialog}>Done</Button>\n *           </Dialog.Actions>\n *         </Dialog>\n *       </Portal>\n *     </View>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nclass Dialog extends React.Component<Props> {\n  // @component ./DialogContent.tsx\n  static Content = DialogContent;\n  // @component ./DialogActions.tsx\n  static Actions = DialogActions;\n  // @component ./DialogTitle.tsx\n  static Title = DialogTitle;\n  // @component ./DialogScrollArea.tsx\n  static ScrollArea = DialogScrollArea;\n\n  static defaultProps = {\n    dismissable: true,\n    visible: false,\n  };\n\n  render() {\n    const {\n      children,\n      dismissable,\n      onDismiss,\n      visible,\n      style,\n      theme,\n    } = this.props;\n\n    return (\n      <Modal\n        dismissable={dismissable}\n        onDismiss={onDismiss}\n        visible={visible}\n        contentContainerStyle={[\n          {\n            borderRadius: theme.roundness,\n            backgroundColor: theme.colors.surface,\n          },\n          styles.container,\n          style,\n        ]}\n      >\n        {React.Children.toArray(children)\n          .filter(child => child != null && typeof child !== 'boolean')\n          .map((child, i) => {\n            if (\n              i === 0 &&\n              React.isValidElement(child) &&\n              child.type === DialogContent\n            ) {\n              // Dialog content is the first item, so we add a top padding\n              return React.cloneElement(child, {\n                style: [{ paddingTop: 24 }, child.props.style],\n              });\n            }\n\n            return child;\n          })}\n      </Modal>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    /**\n     * This prevents the shadow from being clipped on Android since Android\n     * doesn't support `overflow: visible`.\n     * One downside for this fix is that it will disable clicks on the area\n     * of the shadow around the dialog, consequently, if you click around the\n     * dialog (44 pixel from the top and bottom) it won't be dismissed.\n     */\n    marginVertical: Platform.OS === 'android' ? 44 : 0,\n    marginHorizontal: 26,\n    elevation: 24,\n    justifyContent: 'flex-start',\n  },\n});\n\nexport default withTheme(Dialog);\n"]}