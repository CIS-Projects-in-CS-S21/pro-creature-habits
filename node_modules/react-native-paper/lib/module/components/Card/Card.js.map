{"version":3,"sources":["Card.tsx"],"names":["React","StyleSheet","Animated","TouchableWithoutFeedback","View","CardContent","CardActions","CardCover","CardTitle","Surface","withTheme","Card","Component","elevation","Value","props","scale","theme","animation","timing","state","toValue","duration","useNativeDriver","start","render","children","cardElevation","onLongPress","onPress","style","testID","accessible","rest","roundness","total","Children","count","siblings","map","child","isValidElement","type","displayName","borderRadius","handlePressIn","undefined","handlePressOut","styles","innerContainer","index","cloneElement","create","flexGrow","flexShrink"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  Animated,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport CardContent from './CardContent';\nimport CardActions from './CardActions';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardCover, { CardCover as _CardCover } from './CardCover';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardTitle, { CardTitle as _CardTitle } from './CardTitle';\nimport Surface from '../Surface';\nimport { withTheme } from '../../core/theming';\nimport { Theme } from '../../types';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Resting elevation of the card which controls the drop shadow.\n   */\n  elevation?: number;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Content of the `Card`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * Pass down testID from card props to touchable\n   */\n  testID?: string;\n  /**\n   * Pass down accessible from card props to touchable\n   */\n  accessible?: boolean;\n};\n\ntype State = {\n  elevation: Animated.Value;\n};\n\n/**\n * A card is a sheet of material that serves as an entry point to more detailed information.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/card-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/card-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar, Button, Card, Title, Paragraph } from 'react-native-paper';\n *\n * const LeftContent = props => <Avatar.Icon {...props} icon=\"folder\" />\n *\n * const MyComponent = () => (\n *   <Card>\n *     <Card.Title title=\"Card Title\" subtitle=\"Card Subtitle\" left={LeftContent} />\n *     <Card.Content>\n *       <Title>Card title</Title>\n *       <Paragraph>Card content</Paragraph>\n *     </Card.Content>\n *     <Card.Cover source={{ uri: 'https://picsum.photos/700' }} />\n *     <Card.Actions>\n *       <Button>Cancel</Button>\n *       <Button>Ok</Button>\n *     </Card.Actions>\n *   </Card>\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass Card extends React.Component<Props, State> {\n  // @component ./CardContent.tsx\n  static Content = CardContent;\n  // @component ./CardActions.tsx\n  static Actions = CardActions;\n  // @component ./CardCover.tsx\n  static Cover = CardCover;\n  // @component ./CardTitle.tsx\n  static Title = CardTitle;\n\n  static defaultProps = {\n    elevation: 1,\n  };\n\n  state = {\n    // @ts-ignore\n    elevation: new Animated.Value(this.props.elevation),\n  };\n\n  private handlePressIn = () => {\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.elevation, {\n      toValue: 8,\n      duration: 150 * scale,\n      useNativeDriver: false,\n    }).start();\n  };\n\n  private handlePressOut = () => {\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.elevation, {\n      // @ts-ignore\n      toValue: this.props.elevation,\n      duration: 150 * scale,\n      useNativeDriver: false,\n    }).start();\n  };\n\n  render() {\n    const {\n      children,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      elevation: cardElevation,\n      onLongPress,\n      onPress,\n      style,\n      theme,\n      testID,\n      accessible,\n      ...rest\n    } = this.props;\n    const { elevation } = this.state;\n    const { roundness } = theme;\n    const total = React.Children.count(children);\n    const siblings = React.Children.map(children, child =>\n      React.isValidElement(child) && child.type\n        ? (child.type as any).displayName\n        : null\n    );\n    return (\n      <Surface\n        style={[{ borderRadius: roundness, elevation }, style]}\n        {...rest}\n      >\n        <TouchableWithoutFeedback\n          delayPressIn={0}\n          disabled={!(onPress || onLongPress)}\n          onLongPress={onLongPress}\n          onPress={onPress}\n          onPressIn={onPress ? this.handlePressIn : undefined}\n          onPressOut={onPress ? this.handlePressOut : undefined}\n          testID={testID}\n          accessible={accessible}\n        >\n          <View style={styles.innerContainer}>\n            {React.Children.map(children, (child, index) =>\n              React.isValidElement(child)\n                ? React.cloneElement(child, {\n                    index,\n                    total,\n                    siblings,\n                  })\n                : child\n            )}\n          </View>\n        </TouchableWithoutFeedback>\n      </Surface>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  innerContainer: {\n    flexGrow: 1,\n    flexShrink: 1,\n  },\n});\n\nexport default withTheme(Card);\n"]}