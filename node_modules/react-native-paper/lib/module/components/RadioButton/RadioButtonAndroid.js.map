{"version":3,"sources":["RadioButtonAndroid.tsx"],"names":["React","Animated","View","StyleSheet","color","RadioButtonContext","handlePress","isChecked","TouchableRipple","withTheme","BORDER_WIDTH","RadioButtonAndroid","Component","borderAnim","Value","radioAnim","componentDidUpdate","prevProps","status","props","scale","theme","animation","state","setValue","timing","toValue","duration","useNativeDriver","start","render","disabled","onPress","value","rest","checkedColor","colors","accent","uncheckedColor","text","alpha","dark","rgb","string","rippleColor","radioColor","context","checked","contextValue","fade","undefined","onValueChange","styles","container","radio","borderColor","borderWidth","absoluteFill","radioContainer","dot","backgroundColor","transform","create","borderRadius","alignItems","justifyContent","height","width","margin"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\nimport TouchableRipple from '../TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport { Theme, $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Value of the radio button\n   */\n  value: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (param?: any) => void;\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\ntype State = {\n  borderAnim: Animated.Value;\n  radioAnim: Animated.Value;\n};\n\nconst BORDER_WIDTH = 2;\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for Android.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nclass RadioButtonAndroid extends React.Component<Props, State> {\n  static displayName = 'RadioButton.Android';\n\n  state = {\n    borderAnim: new Animated.Value(BORDER_WIDTH),\n    radioAnim: new Animated.Value(1),\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.status === this.props.status) {\n      return;\n    }\n    const { scale } = this.props.theme.animation;\n    if (this.props.status === 'checked') {\n      this.state.radioAnim.setValue(1.2);\n\n      Animated.timing(this.state.radioAnim, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: false,\n      }).start();\n    } else {\n      this.state.borderAnim.setValue(10);\n\n      Animated.timing(this.state.borderAnim, {\n        toValue: BORDER_WIDTH,\n        duration: 150 * scale,\n        useNativeDriver: false,\n      }).start();\n    }\n  }\n\n  render() {\n    const { disabled, onPress, theme, value, status, ...rest } = this.props;\n    const checkedColor = this.props.color || theme.colors.accent;\n    const uncheckedColor =\n      this.props.uncheckedColor ||\n      color(theme.colors.text)\n        .alpha(theme.dark ? 0.7 : 0.54)\n        .rgb()\n        .string();\n\n    let rippleColor: string, radioColor: string;\n\n    return (\n      <RadioButtonContext.Consumer>\n        {(context?: RadioButtonContextType) => {\n          const checked =\n            isChecked({\n              contextValue: context?.value,\n              status,\n              value,\n            }) === 'checked';\n\n          if (disabled) {\n            rippleColor = color(theme.colors.text)\n              .alpha(0.16)\n              .rgb()\n              .string();\n            radioColor = theme.colors.disabled;\n          } else {\n            rippleColor = color(checkedColor)\n              .fade(0.32)\n              .rgb()\n              .string();\n            radioColor = checked ? checkedColor : uncheckedColor;\n          }\n\n          return (\n            <TouchableRipple\n              {...rest}\n              borderless\n              rippleColor={rippleColor}\n              onPress={\n                disabled\n                  ? undefined\n                  : () => {\n                      handlePress({\n                        onPress,\n                        onValueChange: context?.onValueChange,\n                        value,\n                      });\n                    }\n              }\n              accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n              accessibilityComponentType={\n                checked ? 'radiobutton_checked' : 'radiobutton_unchecked'\n              }\n              accessibilityRole=\"button\"\n              accessibilityStates={disabled ? ['disabled'] : []}\n              accessibilityLiveRegion=\"polite\"\n              style={styles.container}\n            >\n              <Animated.View\n                style={[\n                  styles.radio,\n                  {\n                    borderColor: radioColor,\n                    borderWidth: this.state.borderAnim,\n                  },\n                ]}\n              >\n                {checked ? (\n                  <View\n                    style={[StyleSheet.absoluteFill, styles.radioContainer]}\n                  >\n                    <Animated.View\n                      style={[\n                        styles.dot,\n                        {\n                          backgroundColor: radioColor,\n                          transform: [{ scale: this.state.radioAnim }],\n                        },\n                      ]}\n                    />\n                  </View>\n                ) : null}\n              </Animated.View>\n            </TouchableRipple>\n          );\n        }}\n      </RadioButtonContext.Consumer>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n  },\n  radioContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  radio: {\n    height: 20,\n    width: 20,\n    borderRadius: 10,\n    margin: 8,\n  },\n  dot: {\n    height: 10,\n    width: 10,\n    borderRadius: 5,\n  },\n});\n\nexport default withTheme(RadioButtonAndroid);\n\n// @component-docs ignore-next-line\nexport { RadioButtonAndroid };\n"]}