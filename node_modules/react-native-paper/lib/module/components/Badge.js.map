{"version":3,"sources":["Badge.tsx"],"names":["React","Animated","StyleSheet","color","black","white","withTheme","defaultSize","Badge","Component","opacity","Value","props","visible","componentDidUpdate","prevProps","theme","animation","scale","timing","state","toValue","duration","useNativeDriver","start","render","children","size","style","rest","flatten","backgroundColor","colors","notification","restStyle","textColor","isLight","borderRadius","fontSize","fonts","regular","lineHeight","height","minWidth","styles","container","create","alignSelf","textAlign","textAlignVertical","paddingHorizontal","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, StyleSheet, StyleProp, TextStyle } from 'react-native';\nimport color from 'color';\nimport { black, white } from '../styles/colors';\nimport { withTheme } from '../core/theming';\nimport { Theme } from '../types';\n\nconst defaultSize = 20;\n\ntype Props = React.ComponentProps<typeof Animated.Text> & {\n  /**\n   * Whether the badge is visible\n   */\n  visible: boolean;\n  /**\n   * Content of the `Badge`.\n   */\n  children?: string | number;\n  /**\n   * Size of the `Badge`.\n   */\n  size?: number;\n  style?: StyleProp<TextStyle>;\n  ref?: React.RefObject<typeof Animated.Text>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\ntype State = {\n  opacity: Animated.Value;\n};\n\n/**\n * Badges are small status descriptors for UI elements.\n * A badge consists of a small circle, typically containing a number or other short set of characters, that appears in proximity to another object.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/badge-1.png\" />\n *     <figcaption>Badge with content</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/badge-2.png\" />\n *     <figcaption>Badge without content</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Badge } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Badge>3</Badge>\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass Badge extends React.Component<Props, State> {\n  static defaultProps = {\n    visible: true,\n    size: defaultSize,\n  };\n\n  state = {\n    opacity: new Animated.Value(this.props.visible ? 1 : 0),\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    const {\n      visible,\n      theme: {\n        animation: { scale },\n      },\n    } = this.props;\n\n    if (visible !== prevProps.visible) {\n      Animated.timing(this.state.opacity, {\n        toValue: visible ? 1 : 0,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  }\n\n  render() {\n    const {\n      children,\n      size = defaultSize,\n      style,\n      theme,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      visible,\n      ...rest\n    } = this.props;\n    const { opacity } = this.state;\n\n    const { backgroundColor = theme.colors.notification, ...restStyle } =\n      StyleSheet.flatten(style) || {};\n    const textColor = color(backgroundColor).isLight() ? black : white;\n\n    const borderRadius = size / 2;\n\n    return (\n      <Animated.Text\n        numberOfLines={1}\n        style={[\n          {\n            opacity,\n            backgroundColor,\n            color: textColor,\n            fontSize: size * 0.5,\n            ...theme.fonts.regular,\n            lineHeight: size,\n            height: size,\n            minWidth: size,\n            borderRadius,\n          },\n          styles.container,\n          restStyle,\n        ]}\n        {...rest}\n      >\n        {children}\n      </Animated.Text>\n    );\n  }\n}\n\nexport default withTheme(Badge);\n\nconst styles = StyleSheet.create({\n  container: {\n    alignSelf: 'flex-end',\n    textAlign: 'center',\n    textAlignVertical: 'center',\n    paddingHorizontal: 4,\n    overflow: 'hidden',\n  },\n});\n"]}