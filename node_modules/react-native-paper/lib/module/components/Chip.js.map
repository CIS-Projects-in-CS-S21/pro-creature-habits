{"version":3,"sources":["Chip.tsx"],"names":["React","Animated","Platform","StyleSheet","TouchableWithoutFeedback","View","color","Icon","Surface","Text","TouchableRipple","withTheme","black","white","Chip","Component","elevation","Value","scale","props","theme","animation","timing","state","toValue","duration","useNativeDriver","start","render","mode","children","icon","avatar","selected","disabled","accessibilityLabel","onPress","onLongPress","onClose","textStyle","style","testID","selectedColor","rest","dark","colors","backgroundColor","surface","borderRadius","flatten","borderColor","undefined","alpha","rgb","string","textColor","text","iconColor","selectedBackgroundColor","lighten","darken","underlayColor","fade","accessibilityTraits","accessibilityStates","push","styles","container","OS","handlePressIn","handlePressOut","content","avatarWrapper","opacity","isValidElement","cloneElement","avatarSelected","fonts","regular","marginRight","marginLeft","create","borderWidth","hairlineWidth","borderStyle","flexDirection","alignItems","paddingHorizontal","padding","minHeight","lineHeight","textAlignVertical","marginVertical","width","height","position","top","left"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  AccessibilityState,\n  AccessibilityTrait,\n  Animated,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport color from 'color';\nimport Icon, { IconSource } from './Icon';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport TouchableRipple from './TouchableRipple';\nimport { withTheme } from '../core/theming';\nimport { black, white } from '../styles/colors';\nimport { Theme } from '../types';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Mode of the chip.\n   * - `flat` - flat chip without outline.\n   * - `outlined` - chip with an outline.\n   */\n  mode?: 'flat' | 'outlined';\n  /**\n   * Text content of the `Chip`.\n   */\n  children: React.ReactNode;\n  /**\n   * Icon to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  icon?: IconSource;\n  /**\n   * Avatar to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  avatar?: React.ReactNode;\n  /**\n   * Whether chip is selected.\n   */\n  selected?: boolean;\n  /**\n   * Whether to style the chip color as selected.\n   */\n  selectedColor?: string;\n  /**\n   * Whether the chip is disabled. A disabled chip is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the chip. This is read by the screen reader when the user taps the chip.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute on close button press. The close button appears only when this prop is specified.\n   */\n  onClose?: () => void;\n  /**\n   * Style of chip's text\n   */\n  textStyle?: any;\n  style?: StyleProp<ViewStyle>;\n\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * Pass down testID from chip props to touchable for Detox tests.\n   */\n  testID?: string;\n};\n\ntype State = {\n  elevation: Animated.Value;\n};\n\n/**\n * Chips can be used to display entities in small blocks.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/chip-1.png\" />\n *     <figcaption>Flat chip</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/chip-2.png\" />\n *     <figcaption>Outlined chip</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Chip } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Chip icon=\"information\" onPress={() => console.log('Pressed')}>Example Chip</Chip>\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass Chip extends React.Component<Props, State> {\n  static defaultProps: Partial<Props> = {\n    mode: 'flat',\n    disabled: false,\n    selected: false,\n  };\n\n  state = {\n    elevation: new Animated.Value(0),\n  };\n\n  private handlePressIn = () => {\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.elevation, {\n      toValue: 4,\n      duration: 200 * scale,\n      useNativeDriver: false,\n    }).start();\n  };\n\n  private handlePressOut = () => {\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.elevation, {\n      toValue: 0,\n      duration: 150 * scale,\n      useNativeDriver: false,\n    }).start();\n  };\n\n  render() {\n    const {\n      mode,\n      children,\n      icon,\n      avatar,\n      selected,\n      disabled,\n      accessibilityLabel,\n      onPress,\n      onLongPress,\n      onClose,\n      textStyle,\n      style,\n      theme,\n      testID,\n      selectedColor,\n      ...rest\n    } = this.props;\n    const { dark, colors } = theme;\n\n    const {\n      backgroundColor = mode === 'outlined'\n        ? colors.surface\n        : dark\n        ? '#383838'\n        : '#ebebeb',\n      borderRadius = 16,\n    } = StyleSheet.flatten(style) || {};\n\n    const borderColor =\n      mode === 'outlined'\n        ? color(\n            selectedColor !== undefined\n              ? selectedColor\n              : color(dark ? white : black)\n          )\n            .alpha(0.29)\n            .rgb()\n            .string()\n        : backgroundColor;\n    const textColor = disabled\n      ? colors.disabled\n      : color(selectedColor !== undefined ? selectedColor : colors.text)\n          .alpha(0.87)\n          .rgb()\n          .string();\n    const iconColor = disabled\n      ? colors.disabled\n      : color(selectedColor !== undefined ? selectedColor : colors.text)\n          .alpha(0.54)\n          .rgb()\n          .string();\n    const selectedBackgroundColor = (dark\n      ? color(backgroundColor).lighten(mode === 'outlined' ? 0.2 : 0.4)\n      : color(backgroundColor).darken(mode === 'outlined' ? 0.08 : 0.2)\n    )\n      .rgb()\n      .string();\n\n    const underlayColor = selectedColor\n      ? color(selectedColor)\n          .fade(0.5)\n          .rgb()\n          .string()\n      : selectedBackgroundColor;\n\n    const accessibilityTraits: AccessibilityTrait[] = ['button'];\n    const accessibilityStates: AccessibilityState[] = [];\n\n    if (selected) {\n      accessibilityTraits.push('selected');\n      accessibilityStates.push('selected');\n    }\n\n    if (disabled) {\n      accessibilityTraits.push('disabled');\n      accessibilityStates.push('disabled');\n    }\n\n    return (\n      <Surface\n        style={\n          [\n            styles.container,\n            {\n              elevation: Platform.OS === 'android' ? this.state.elevation : 0,\n              backgroundColor: selected\n                ? selectedBackgroundColor\n                : backgroundColor,\n              borderColor,\n              borderRadius,\n            },\n            style,\n          ] as StyleProp<ViewStyle>\n        }\n        {...rest}\n      >\n        <TouchableRipple\n          borderless\n          delayPressIn={0}\n          style={{ borderRadius }}\n          onPress={onPress}\n          onLongPress={onLongPress}\n          onPressIn={this.handlePressIn}\n          onPressOut={this.handlePressOut}\n          underlayColor={underlayColor}\n          disabled={disabled}\n          accessibilityLabel={accessibilityLabel}\n          accessibilityTraits={accessibilityTraits}\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          accessibilityStates={accessibilityStates}\n          testID={testID}\n        >\n          <View style={styles.content}>\n            {avatar && !icon ? (\n              <View\n                style={[styles.avatarWrapper, disabled && { opacity: 0.26 }]}\n              >\n                {React.isValidElement(avatar)\n                  ? /* $FlowFixMe */\n                    React.cloneElement(avatar, {\n                      /* $FlowFixMe */\n                      style: [styles.avatar, avatar.props.style],\n                    })\n                  : avatar}\n              </View>\n            ) : null}\n            {icon || selected ? (\n              <View\n                style={[\n                  styles.icon,\n                  avatar ? [styles.avatar, styles.avatarSelected] : null,\n                ]}\n              >\n                <Icon\n                  source={icon || 'check'}\n                  color={avatar ? white : iconColor}\n                  size={18}\n                />\n              </View>\n            ) : null}\n            <Text\n              numberOfLines={1}\n              style={[\n                styles.text,\n                {\n                  ...theme.fonts.regular,\n                  color: textColor,\n                  marginRight: onClose ? 4 : 8,\n                  marginLeft: avatar || icon || selected ? 4 : 8,\n                },\n                textStyle,\n              ]}\n            >\n              {children}\n            </Text>\n            {onClose ? (\n              <TouchableWithoutFeedback\n                onPress={onClose}\n                accessibilityTraits=\"button\"\n                accessibilityComponentType=\"button\"\n              >\n                <View style={styles.icon}>\n                  <Icon source=\"close-circle\" size={16} color={iconColor} />\n                </View>\n              </TouchableWithoutFeedback>\n            ) : null}\n          </View>\n        </TouchableRipple>\n      </Surface>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderWidth: StyleSheet.hairlineWidth,\n    borderStyle: 'solid',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 4,\n  },\n  icon: {\n    padding: 4,\n  },\n  text: {\n    minHeight: 24,\n    lineHeight: 24,\n    textAlignVertical: 'center',\n    marginVertical: 4,\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    borderRadius: 12,\n  },\n  avatarWrapper: {\n    marginRight: 4,\n  },\n  avatarSelected: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    backgroundColor: 'rgba(0, 0, 0, .29)',\n  },\n});\n\nexport default withTheme(Chip);\n"]}