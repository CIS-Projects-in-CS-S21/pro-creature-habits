{"version":3,"sources":["index.native.tsx"],"names":["React","Platform","TouchableHighlight","TouchableNativeFeedback","View","color","withTheme","ANDROID_VERSION_LOLLIPOP","ANDROID_VERSION_PIE","TouchableRipple","Component","render","props","style","background","borderless","disabled","disabledProp","rippleColor","underlayColor","children","theme","rest","dark","colors","onPress","calculatedRippleColor","text","alpha","rgb","string","useForeground","OS","Version","supported","Ripple","overflow","Children","only","fade"],"mappings":";;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAGEC,QAHF,EAIEC,kBAJF,EAKEC,uBALF,EAOEC,IAPF,QASO,cATP;AAUA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,oBAA1B;AAGA,MAAMC,wBAAwB,GAAG,EAAjC;AACA,MAAMC,mBAAmB,GAAG,EAA5B;;AAcA,MAAMC,eAAN,SAA8BT,KAAK,CAACU,SAApC,CAAqD;AAQnDC,EAAAA,MAAM,GAAG;AACP,wBAUI,KAAKC,KAVT;AAAA,UAAM;AACJC,MAAAA,KADI;AAEJC,MAAAA,UAFI;AAGJC,MAAAA,UAHI;AAIJC,MAAAA,QAAQ,EAAEC,YAJN;AAKJC,MAAAA,WALI;AAMJC,MAAAA,aANI;AAOJC,MAAAA,QAPI;AAQJC,MAAAA;AARI,KAAN;AAAA,UASKC,IATL;;AAYA,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAmBH,KAAzB;AACA,UAAML,QAAQ,GAAGC,YAAY,IAAI,CAAC,KAAKL,KAAL,CAAWa,OAA7C;AACA,UAAMC,qBAAqB,GACzBR,WAAW,IACXb,KAAK,CAACmB,MAAM,CAACG,IAAR,CAAL,CACGC,KADH,CACSL,IAAI,GAAG,IAAH,GAAU,GADvB,EAEGM,GAFH,GAGGC,MAHH,EAFF,CAfO,CAsBP;AACA;;AACA,UAAMC,aAAa,GACjB9B,QAAQ,CAAC+B,EAAT,KAAgB,SAAhB,IACA/B,QAAQ,CAACgC,OAAT,IAAoBzB,mBADpB,IAEAO,UAHF;;AAKA,QAAIN,eAAe,CAACyB,SAApB,EAA+B;AAC7B,0BACE,oBAAC,uBAAD,eACMZ,IADN;AAEE,QAAA,QAAQ,EAAEN,QAFZ;AAGE,QAAA,aAAa,EAAEe,aAHjB;AAIE,QAAA,UAAU,EACRjB,UAAU,IAAI,IAAd,GACIA,UADJ,GAEIX,uBAAuB,CAACgC,MAAxB,CACET,qBADF,EAEEX,UAFF;AAPR,uBAaE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE,CAACA,UAAU,IAAI;AAAEqB,UAAAA,QAAQ,EAAE;AAAZ,SAAf,EAAuCvB,KAAvC;AAAb,SACGb,KAAK,CAACqC,QAAN,CAAeC,IAAf,CAAoBlB,QAApB,CADH,CAbF,CADF;AAmBD;;AAED,wBACE,oBAAC,kBAAD,eACME,IADN;AAEE,MAAA,QAAQ,EAAEN,QAFZ;AAGE,MAAA,KAAK,EAAE,CAACD,UAAU,IAAI;AAAEqB,QAAAA,QAAQ,EAAE;AAAZ,OAAf,EAAuCvB,KAAvC,CAHT;AAIE,MAAA,aAAa,EACXM,aAAa,IAAI,IAAjB,GACIA,aADJ,GAEId,KAAK,CAACqB,qBAAD,CAAL,CACGa,IADH,CACQ,GADR,EAEGV,GAFH,GAGGC,MAHH;AAPR,QAaG9B,KAAK,CAACqC,QAAN,CAAeC,IAAf,CAAoBlB,QAApB,CAbH,CADF;AAiBD;;AA5EkD;;gBAA/CX,e,kBACkB;AACpBM,EAAAA,UAAU,EAAE;AADQ,C;;gBADlBN,e,eAMFR,QAAQ,CAAC+B,EAAT,KAAgB,SAAhB,IAA6B/B,QAAQ,CAACgC,OAAT,IAAoB1B,wB;;AAyErD,eAAeD,SAAS,CAACG,eAAD,CAAxB","sourcesContent":["import * as React from 'react';\nimport {\n  BackgroundPropType,\n  StyleProp,\n  Platform,\n  TouchableHighlight,\n  TouchableNativeFeedback,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport color from 'color';\nimport { withTheme } from '../../core/theming';\nimport { Theme } from '../../types';\n\nconst ANDROID_VERSION_LOLLIPOP = 21;\nconst ANDROID_VERSION_PIE = 28;\n\ntype Props = React.ComponentProps<typeof TouchableWithoutFeedback> & {\n  borderless?: boolean;\n  background?: BackgroundPropType;\n  disabled?: boolean;\n  onPress?: () => void | null;\n  rippleColor?: string;\n  underlayColor?: string;\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  theme: Theme;\n};\n\nclass TouchableRipple extends React.Component<Props> {\n  static defaultProps = {\n    borderless: false,\n  };\n\n  static supported =\n    Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP;\n\n  render() {\n    const {\n      style,\n      background,\n      borderless,\n      disabled: disabledProp,\n      rippleColor,\n      underlayColor,\n      children,\n      theme,\n      ...rest\n    } = this.props;\n\n    const { dark, colors } = theme;\n    const disabled = disabledProp || !this.props.onPress;\n    const calculatedRippleColor =\n      rippleColor ||\n      color(colors.text)\n        .alpha(dark ? 0.32 : 0.2)\n        .rgb()\n        .string();\n\n    // A workaround for ripple on Android P is to use useForeground + overflow: 'hidden'\n    // https://github.com/facebook/react-native/issues/6480\n    const useForeground =\n      Platform.OS === 'android' &&\n      Platform.Version >= ANDROID_VERSION_PIE &&\n      borderless;\n\n    if (TouchableRipple.supported) {\n      return (\n        <TouchableNativeFeedback\n          {...rest}\n          disabled={disabled}\n          useForeground={useForeground}\n          background={\n            background != null\n              ? background\n              : TouchableNativeFeedback.Ripple(\n                  calculatedRippleColor,\n                  borderless\n                )\n          }\n        >\n          <View style={[borderless && { overflow: 'hidden' }, style]}>\n            {React.Children.only(children)}\n          </View>\n        </TouchableNativeFeedback>\n      );\n    }\n\n    return (\n      <TouchableHighlight\n        {...rest}\n        disabled={disabled}\n        style={[borderless && { overflow: 'hidden' }, style]}\n        underlayColor={\n          underlayColor != null\n            ? underlayColor\n            : color(calculatedRippleColor)\n                .fade(0.5)\n                .rgb()\n                .string()\n        }\n      >\n        {React.Children.only(children)}\n      </TouchableHighlight>\n    );\n  }\n}\n\nexport default withTheme(TouchableRipple);\n"]}