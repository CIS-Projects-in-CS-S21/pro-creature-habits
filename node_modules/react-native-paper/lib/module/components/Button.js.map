{"version":3,"sources":["Button.tsx"],"names":["React","Animated","View","StyleSheet","color","ActivityIndicator","Icon","Surface","Text","TouchableRipple","black","white","withTheme","Button","Component","elevation","Value","props","mode","scale","theme","animation","timing","state","toValue","duration","useNativeDriver","start","render","disabled","compact","dark","loading","icon","buttonColor","children","uppercase","accessibilityLabel","onPress","onLongPress","style","contentStyle","labelStyle","testID","rest","colors","roundness","font","fonts","medium","backgroundColor","borderColor","textColor","borderWidth","alpha","rgb","string","primary","hairlineWidth","isDark","isLight","rippleColor","buttonStyle","borderRadius","touchableStyle","flatten","customLabelColor","fontSize","customLabelSize","textStyle","styles","button","handlePressIn","handlePressOut","content","label","compactLabel","uppercaseLabel","create","minWidth","borderStyle","flexDirection","alignItems","justifyContent","marginLeft","marginRight","textAlign","letterSpacing","marginVertical","marginHorizontal","textTransform"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n} from 'react-native';\nimport color from 'color';\n\nimport ActivityIndicator from './ActivityIndicator';\nimport Icon, { IconSource } from './Icon';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport TouchableRipple from './TouchableRipple';\nimport { black, white } from '../styles/colors';\nimport { withTheme } from '../core/theming';\n\nimport { Theme } from '../types';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Mode of the button. You can change the mode to adjust the styling to give it desired emphasis.\n   * - `text` - flat button without background or outline (low emphasis)\n   * - `outlined` - button with an outline (medium emphasis)\n   * - `contained` - button with a background color and elevation shadow (high emphasis)\n   */\n  mode?: 'text' | 'outlined' | 'contained';\n  /**\n   * Whether the color is a dark color. A dark button will render light text and vice-versa. Only applicable for `contained` mode.\n   */\n  dark?: boolean;\n  /**\n   * Use a compact look, useful for `text` buttons in a row.\n   */\n  compact?: boolean;\n  /**\n   * Custom text color for flat button, or background color for contained button.\n   */\n  color?: string;\n  /**\n   * Whether to show a loading indicator.\n   */\n  loading?: boolean;\n  /**\n   * Icon to display for the `Button`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Label text of the button.\n   */\n  children: React.ReactNode;\n  /**\n   * Make the label text uppercased. Note that this won't work if you pass React elements as children.\n   */\n  uppercase?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long ress.\n   */\n  onLongPress?: () => void;\n  /**\n   * Style of button's inner content.\n   * Use this prop to apply custom height and width.\n   */\n  contentStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style for the button text.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\ntype State = {\n  elevation: Animated.Value;\n};\n\n/**\n * A button is component that the user can press to trigger an action.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/button-1.png\" />\n *     <figcaption>Text button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-2.png\" />\n *     <figcaption>Outlined button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-3.png\" />\n *     <figcaption>Contained button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Button } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Button icon=\"camera\" mode=\"contained\" onPress={() => console.log('Pressed')}>\n *     Press me\n *   </Button>\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass Button extends React.Component<Props, State> {\n  static defaultProps: Partial<Props> = {\n    mode: 'text',\n    uppercase: true,\n  };\n\n  state = {\n    elevation: new Animated.Value(this.props.mode === 'contained' ? 2 : 0),\n  };\n\n  private handlePressIn = () => {\n    if (this.props.mode === 'contained') {\n      const { scale } = this.props.theme.animation;\n      Animated.timing(this.state.elevation, {\n        toValue: 8,\n        duration: 200 * scale,\n        useNativeDriver: false,\n      }).start();\n    }\n  };\n\n  private handlePressOut = () => {\n    if (this.props.mode === 'contained') {\n      const { scale } = this.props.theme.animation;\n      Animated.timing(this.state.elevation, {\n        toValue: 2,\n        duration: 150 * scale,\n        useNativeDriver: false,\n      }).start();\n    }\n  };\n\n  render() {\n    const {\n      disabled,\n      compact,\n      mode,\n      dark,\n      loading,\n      icon,\n      color: buttonColor,\n      children,\n      uppercase,\n      accessibilityLabel,\n      onPress,\n      onLongPress,\n      style,\n      theme,\n      contentStyle,\n      labelStyle,\n      testID,\n      ...rest\n    } = this.props;\n    const { colors, roundness } = theme;\n    const font = theme.fonts.medium;\n\n    let backgroundColor, borderColor, textColor, borderWidth;\n\n    if (mode === 'contained') {\n      if (disabled) {\n        backgroundColor = color(theme.dark ? white : black)\n          .alpha(0.12)\n          .rgb()\n          .string();\n      } else if (buttonColor) {\n        backgroundColor = buttonColor;\n      } else {\n        backgroundColor = colors.primary;\n      }\n    } else {\n      backgroundColor = 'transparent';\n    }\n\n    if (mode === 'outlined') {\n      borderColor = color(theme.dark ? white : black)\n        .alpha(0.29)\n        .rgb()\n        .string();\n      borderWidth = StyleSheet.hairlineWidth;\n    } else {\n      borderColor = 'transparent';\n      borderWidth = 0;\n    }\n\n    if (disabled) {\n      textColor = color(theme.dark ? white : black)\n        .alpha(0.32)\n        .rgb()\n        .string();\n    } else if (mode === 'contained') {\n      let isDark;\n\n      if (typeof dark === 'boolean') {\n        isDark = dark;\n      } else {\n        isDark =\n          backgroundColor === 'transparent'\n            ? false\n            : !color(backgroundColor).isLight();\n      }\n\n      textColor = isDark ? white : black;\n    } else if (buttonColor) {\n      textColor = buttonColor;\n    } else {\n      textColor = colors.primary;\n    }\n\n    const rippleColor = color(textColor)\n      .alpha(0.32)\n      .rgb()\n      .string();\n    const buttonStyle = {\n      backgroundColor,\n      borderColor,\n      borderWidth,\n      borderRadius: roundness,\n    };\n    const touchableStyle = {\n      borderRadius: style\n        ? StyleSheet.flatten(style).borderRadius || roundness\n        : roundness,\n    };\n\n    const { color: customLabelColor, fontSize: customLabelSize } =\n      StyleSheet.flatten(labelStyle) || {};\n\n    const textStyle = { color: textColor, ...font };\n    const elevation =\n      disabled || mode !== 'contained' ? 0 : this.state.elevation;\n\n    return (\n      <Surface\n        {...rest}\n        style={[\n          styles.button,\n          compact && styles.compact,\n          { elevation } as ViewStyle,\n          buttonStyle,\n          style,\n        ]}\n      >\n        <TouchableRipple\n          borderless\n          delayPressIn={0}\n          onPress={onPress}\n          onLongPress={onLongPress}\n          onPressIn={this.handlePressIn}\n          onPressOut={this.handlePressOut}\n          accessibilityLabel={accessibilityLabel}\n          accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          accessibilityStates={disabled ? ['disabled'] : []}\n          disabled={disabled}\n          rippleColor={rippleColor}\n          style={touchableStyle}\n          testID={testID}\n        >\n          <View style={[styles.content, contentStyle]}>\n            {icon && loading !== true ? (\n              <View style={styles.icon}>\n                <Icon\n                  source={icon}\n                  size={customLabelSize || 16}\n                  color={customLabelColor || textColor}\n                />\n              </View>\n            ) : null}\n            {loading ? (\n              <ActivityIndicator\n                size={customLabelSize || 16}\n                color={customLabelColor || textColor}\n                style={styles.icon}\n              />\n            ) : null}\n            <Text\n              numberOfLines={1}\n              style={[\n                styles.label,\n                compact && styles.compactLabel,\n                uppercase && styles.uppercaseLabel,\n                textStyle,\n                font,\n                labelStyle,\n              ]}\n            >\n              {children}\n            </Text>\n          </View>\n        </TouchableRipple>\n      </Surface>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    minWidth: 64,\n    borderStyle: 'solid',\n  },\n  compact: {\n    minWidth: 'auto',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  icon: {\n    marginLeft: 12,\n    marginRight: -4,\n  },\n  label: {\n    textAlign: 'center',\n    letterSpacing: 1,\n    marginVertical: 9,\n    marginHorizontal: 16,\n  },\n  compactLabel: {\n    marginHorizontal: 8,\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase',\n  },\n});\n\nexport default withTheme(Button);\n"]}