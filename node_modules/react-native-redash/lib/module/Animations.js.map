{"version":3,"sources":["Animations.ts"],"names":["animationParameter","animationParam","Error","defineAnimation","factory","_WORKLET","withPause","paused","nextAnimation","animation","state","now","lastTimestamp","elapsed","value","dt","finished","current","start","previousState","withBouncing","lowerBound","upperBound","velocity","_state"],"mappings":"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","sourcesContent":["import Animated from \"react-native-reanimated\";\n\ndeclare let _WORKLET: boolean;\n\nexport interface AnimationState {\n  current: number;\n}\n\nexport interface PhysicsAnimationState extends AnimationState {\n  velocity: number;\n}\n\nexport type Animation<\n  State extends AnimationState = AnimationState,\n  PrevState = State\n> = {\n  animation: (animation: State, now: number) => boolean;\n  start: (\n    animation: State,\n    value: number,\n    now: number,\n    lastAnimation: PrevState\n  ) => void;\n} & State;\n\nexport type AnimationParameter<State extends AnimationState = AnimationState> =\n  | Animation<State>\n  | (() => Animation<State>)\n  | number;\n\n/**\n *  @summary Access animations passed as parameters safely on both the UI and JS thread with the proper static types.\n *  Animations can receive other animations as parameter.\n */\nexport const animationParameter = <\n  State extends AnimationState = AnimationState\n>(\n  animationParam: AnimationParameter<State>\n) => {\n  \"worklet\";\n  if (typeof animationParam === \"number\") {\n    throw new Error(\"Expected Animation as parameter\");\n  }\n  return typeof animationParam === \"function\"\n    ? animationParam()\n    : animationParam;\n};\n\n/**\n *  @summary Declare custom animations that can be invoked on both the JS and UI thread.\n *  @example\n *  defineAnimation(() => {\n      \"worklet\";\n      // ...animation code\n      return {\n        animation,\n       start\n      }\n    });\n */\nexport const defineAnimation = <\n  S extends AnimationState = AnimationState,\n  Prev extends AnimationState = AnimationState\n>(\n  factory: () => Omit<Animation<S, Prev>, keyof S>\n) => {\n  \"worklet\";\n  if (_WORKLET) {\n    return (factory() as unknown) as number;\n  }\n  return (factory as unknown) as number;\n};\n\ninterface PausableAnimation extends AnimationState {\n  lastTimestamp: number;\n  elapsed: number;\n}\n\n/**\n *  @summary Make an animation pausable. The state of the animation (paused or not)\n *  is controlled by a boolean shared value.\n *  @example\n    const progress = useSharedValue(0);\n    const paused = useSharedValue(false);\n    useEffect(() => {\n      progress.value = withPause(withLoop(withTiming(1)), paused);\n    }, []);\n */\nexport const withPause = (\n  animationParam: AnimationParameter,\n  paused: Animated.SharedValue<boolean>\n) => {\n  \"worklet\";\n  return defineAnimation<PausableAnimation>(() => {\n    \"worklet\";\n    const nextAnimation = animationParameter(animationParam);\n    const animation = (state: PausableAnimation, now: number) => {\n      const { lastTimestamp, elapsed } = state;\n      if (paused.value) {\n        state.elapsed = now - lastTimestamp;\n        return false;\n      }\n      const dt = now - elapsed;\n      const finished = nextAnimation.animation(nextAnimation, dt);\n      state.current = nextAnimation.current;\n      state.lastTimestamp = dt;\n      return finished;\n    };\n    const start = (\n      state: PausableAnimation,\n      value: number,\n      now: number,\n      previousState: AnimationState\n    ) => {\n      state.lastTimestamp = now;\n      state.elapsed = 0;\n      nextAnimation.start(nextAnimation, value, now, previousState);\n    };\n    return {\n      animation,\n      start,\n    };\n  });\n};\n\n/**\n *  @summary Add a bouncing behavior to a physics-based animation.\n *  An animation is defined as being physics-based if it contains a velocity in its state.\n *  @example\n    // will bounce if the animations hits the position 0 or 100\n    withBouncing(withDecay({ velocity }), 0, 100)\n */\nexport const withBouncing = (\n  animationParam: AnimationParameter<PhysicsAnimationState>,\n  lowerBound: number,\n  upperBound: number\n): number => {\n  \"worklet\";\n  return defineAnimation<PhysicsAnimationState, PhysicsAnimationState>(() => {\n    \"worklet\";\n    const nextAnimation = animationParameter(animationParam);\n    const animation = (state: PhysicsAnimationState, now: number) => {\n      const finished = nextAnimation.animation(nextAnimation, now);\n      const { velocity, current } = nextAnimation;\n      state.current = current;\n      if (\n        (velocity < 0 && state.current <= lowerBound) ||\n        (velocity > 0 && state.current >= upperBound)\n      ) {\n        state.current = velocity < 0 ? lowerBound : upperBound;\n        nextAnimation.velocity *= -0.5;\n      }\n      return finished;\n    };\n    const start = (\n      _state: PhysicsAnimationState,\n      value: number,\n      now: number,\n      previousState: PhysicsAnimationState\n    ) => {\n      nextAnimation.start(nextAnimation, value, now, previousState);\n    };\n    return {\n      animation,\n      start,\n    };\n  });\n};\n"]}