{"version":3,"sources":["Math.ts"],"names":["bin","value","mix","x","y","lerp","toDeg","rad","Math","PI","toRad","deg","between","lowerBound","upperBound","inclusive","clamp","min","max","cubicBezier","t","from","c1","c2","to","term","a","b","c","d","round","precision","p","pow","cuberoot","abs","solveCubic","D","sqrt","q","roots","concat","u","acos","k","cos","i","length","cubicBezierYForX","pa","pb","pc","pd","map","root","filter"],"mappings":"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","sourcesContent":["import { Vector } from \"./Vectors\";\n\n/**\n * @summary Convert a boolean value into a number.\n * This can be useful in reanimated since 0 and 1 are used for conditional statements.\n */\nexport const bin = (value: boolean): 0 | 1 => {\n  \"worklet\";\n  return value ? 1 : 0;\n};\n\nexport const mix = (value: number, x: number, y: number) => {\n  \"worklet\";\n  return x + value * (y - x);\n};\n\nexport const lerp = (x: number, y: number, value: number) => {\n  \"worklet\";\n  return (1 - value) * x + value * y;\n};\n\n/**\n * @summary Transforms an angle from radians to degrees.\n */\nexport const toDeg = (rad: number) => {\n  \"worklet\";\n  return (rad * 180) / Math.PI;\n};\n\n/**\n * @summary Transforms an angle from degrees to radians.\n */\nexport const toRad = (deg: number) => {\n  \"worklet\";\n  return (deg * Math.PI) / 180;\n};\n\n/**\n * @summary Returns true if node is within lowerBound and upperBound.\n */\nexport const between = (\n  value: number,\n  lowerBound: number,\n  upperBound: number,\n  inclusive = true\n) => {\n  \"worklet\";\n  if (inclusive) {\n    return value >= lowerBound && value <= upperBound;\n  }\n  return value > lowerBound && value < upperBound;\n};\n\n/**\n *  @summary Clamps a node with a lower and upper bound.\n *  @example\n    clamp(-1, 0, 100); // 0\n    clamp(1, 0, 100); // 1\n    clamp(101, 0, 100); // 100\n  */\nexport const clamp = (\n  value: number,\n  lowerBound: number,\n  upperBound: number\n) => {\n  \"worklet\";\n  return Math.min(Math.max(lowerBound, value), upperBound);\n};\n\n/**\n * @description Returns the coordinate of a cubic bezier curve. t is the length of the curve from 0 to 1.\n * cubicBezier(0, p0, p1, p2, p3) equals p0 and cubicBezier(1, p0, p1, p2, p3) equals p3.\n * p0 and p3 are respectively the starting and ending point of the curve. p1 and p2 are the control points.\n */\nexport const cubicBezier = (\n  t: number,\n  from: number,\n  c1: number,\n  c2: number,\n  to: number\n) => {\n  \"worklet\";\n  const term = 1 - t;\n  const a = 1 * term ** 3 * t ** 0 * from;\n  const b = 3 * term ** 2 * t ** 1 * c1;\n  const c = 3 * term ** 1 * t ** 2 * c2;\n  const d = 1 * term ** 0 * t ** 3 * to;\n  return a + b + c + d;\n};\n\n/**\n * @summary Computes animation node rounded to precision.\n */\nexport const round = (value: number, precision = 0) => {\n  \"worklet\";\n  const p = Math.pow(10, precision);\n  return Math.round(value * p) / p;\n};\n\n// https://stackoverflow.com/questions/27176423/function-to-solve-cubic-equation-analytically\nconst cuberoot = (x: number) => {\n  \"worklet\";\n  const y = Math.pow(Math.abs(x), 1 / 3);\n  return x < 0 ? -y : y;\n};\n\nconst solveCubic = (a: number, b: number, c: number, d: number) => {\n  \"worklet\";\n  if (Math.abs(a) < 1e-8) {\n    // Quadratic case, ax^2+bx+c=0\n    a = b;\n    b = c;\n    c = d;\n    if (Math.abs(a) < 1e-8) {\n      // Linear case, ax+b=0\n      a = b;\n      b = c;\n      if (Math.abs(a) < 1e-8) {\n        // Degenerate case\n        return [];\n      }\n      return [-b / a];\n    }\n\n    const D = b * b - 4 * a * c;\n    if (Math.abs(D) < 1e-8) {\n      return [-b / (2 * a)];\n    } else if (D > 0) {\n      return [(-b + Math.sqrt(D)) / (2 * a), (-b - Math.sqrt(D)) / (2 * a)];\n    }\n    return [];\n  }\n\n  // Convert to depressed cubic t^3+pt+q = 0 (subst x = t - b/3a)\n  const p = (3 * a * c - b * b) / (3 * a * a);\n  const q = (2 * b * b * b - 9 * a * b * c + 27 * a * a * d) / (27 * a * a * a);\n  let roots;\n\n  if (Math.abs(p) < 1e-8) {\n    // p = 0 -> t^3 = -q -> t = -q^1/3\n    roots = [cuberoot(-q)];\n  } else if (Math.abs(q) < 1e-8) {\n    // q = 0 -> t^3 + pt = 0 -> t(t^2+p)=0\n    roots = [0].concat(p < 0 ? [Math.sqrt(-p), -Math.sqrt(-p)] : []);\n  } else {\n    const D = (q * q) / 4 + (p * p * p) / 27;\n    if (Math.abs(D) < 1e-8) {\n      // D = 0 -> two roots\n      roots = [(-1.5 * q) / p, (3 * q) / p];\n    } else if (D > 0) {\n      // Only one real root\n      const u = cuberoot(-q / 2 - Math.sqrt(D));\n      roots = [u - p / (3 * u)];\n    } else {\n      // D < 0, three roots, but needs to use complex numbers/trigonometric solution\n      const u = 2 * Math.sqrt(-p / 3);\n      const t = Math.acos((3 * q) / p / u) / 3; // D < 0 implies p < 0 and acos argument in [-1..1]\n      const k = (2 * Math.PI) / 3;\n      roots = [u * Math.cos(t), u * Math.cos(t - k), u * Math.cos(t - 2 * k)];\n    }\n  }\n\n  // Convert back from depressed cubic\n  for (let i = 0; i < roots.length; i++) {\n    roots[i] -= b / (3 * a);\n  }\n\n  return roots;\n};\n\n/**\n *  @summary Given a cubic Bèzier curve, return the y value for x.\n *  @example\n    const x = 116;\n    const from = vec.create(59, 218);\n    const c1 = vec.create(131, 39);\n    const c2 = vec.create(204, 223);\n    const to = vec.create(227, 89);\n    // y= 139\n    const y = cubicBezierYForX(x, from, c1, c2, to)));\n  */\nexport const cubicBezierYForX = (\n  x: number,\n  a: Vector,\n  b: Vector,\n  c: Vector,\n  d: Vector,\n  precision = 2\n) => {\n  \"worklet\";\n  const pa = -a.x + 3 * b.x - 3 * c.x + d.x;\n  const pb = 3 * a.x - 6 * b.x + 3 * c.x;\n  const pc = -3 * a.x + 3 * b.x;\n  const pd = a.x - x;\n  // eslint-disable-next-line prefer-destructuring\n  const t = solveCubic(pa, pb, pc, pd)\n    .map((root) => round(root, precision))\n    .filter((root) => root >= 0 && root <= 1)[0];\n  return cubicBezier(t, a.y, b.y, c.y, d.y);\n};\n"]}