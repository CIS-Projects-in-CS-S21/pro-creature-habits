/**
 *  @summary TypeScript type to define an animation value as color.
 *  @example
    // Color can be of string or number depending of the context in which it was executed
    const color: Animated.SharedValue<Color> = useDerivedValue(() => mixColor(progress.value, "blue", "red"));
 */
export declare type Color = string | number;
export declare enum ColorSpace {
    RGB = 0,
    HSV = 1
}
export declare const opacity: (c: number) => number;
export declare const red: (c: number) => number;
export declare const green: (c: number) => number;
export declare const blue: (c: number) => number;
export declare const color: (r: number, g: number, b: number, alpha?: number) => Color;
/**
 * @summary Convert HSV to RGB
 */
export declare const hsv2rgb: (h: number, s: number, v: number) => {
    r: number;
    g: number;
    b: number;
};
/**
 * @summary Convert HSV to RGB
 */
export declare const hsv2color: (h: number, s: number, v: number) => Color;
/**
 * @summary Returns black or white depending on the value of the background color.
 */
export declare const colorForBackground: (r: number, g: number, b: number) => 255 | 4294967295;
/**
 *  @summary Interpolate an animation value into a color.
    The color can be interpolated in the RGB or HSV color space (default is RGB).
 *  @example
    const theta = useSharedValue(Math.PI);
    const backgroundColor = useDerivedValue(() => {
      return interpolateColor(
        theta.value,
        [0, Math.PI, Math.PI * 2],
        ["#ff3884", StyleGuide.palette.primary, "#38ffb3"]
        ColorSpace.HSV // default is RGB
      );
    });
  */
export declare const interpolateColor: (value: number, inputRange: number[], rawOutputRange: Color[], colorSpace?: ColorSpace) => Color;
/**
 *  @summary Identical to interpolateColor() but with an animation value that goes from 0 to 1.
 *  @example
    const backgroundColor = useDerivedValue(() =>
      mixColor(progress.value, "#ff3884", "#38ffb3")
    );
  */
export declare const mixColor: (value: number, color1: Color, color2: Color, colorSpace?: ColorSpace) => Color;
