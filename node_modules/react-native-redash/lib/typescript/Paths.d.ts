import Animated from "react-native-reanimated";
import { Vector } from "./Vectors";
export declare enum SVGCommand {
    MOVE = 0,
    CURVE = 1,
    CLOSE = 2
}
interface Move extends Vector {
    type: SVGCommand.MOVE;
}
interface Curve {
    type: SVGCommand.CURVE;
    from: Vector;
    to: Vector;
    c1: Vector;
    c2: Vector;
}
interface Close {
    type: SVGCommand.CLOSE;
}
export declare type Segment = Close | Curve | Move;
export declare type Path = Segment[];
export declare const exhaustiveCheck: (command: never) => never;
/**
 * @summary Serialize a path into an SVG path string
 */
export declare const serialize: (path: Path) => string;
/**
 * @description ⚠️ this function cannot run on the UI thread. It must be executed on the JS thread
 * @summary Parse an SVG path into a sequence of Bèzier curves.
 * The SVG is normalized to have absolute values and to be approximated to a sequence of Bèzier curves.
 */
export declare const parse: (d: string) => Path;
/**
 * @summary Interpolate between paths.
 */
export declare const interpolatePath: (value: number, inputRange: number[], outputRange: Path[], extrapolate?: Animated.Extrapolate) => string;
/**
 * @summary Interpolate two paths with an animation value that goes from 0 to 1
 */
export declare const mixPath: (value: number, p1: Path, p2: Path, extrapolate?: Animated.Extrapolate) => string;
/**
 * @summary Returns a Bèzier curve command.
 */
export declare const moveTo: (x: number, y: number) => {
    type: SVGCommand.MOVE;
    x: number;
    y: number;
};
/**
 * @summary Returns a Bèzier curve command
 */
export declare const curve: (c: Omit<Curve, "type">) => {
    type: SVGCommand.CURVE;
    c1: Vector<number>;
    c2: Vector<number>;
    to: Vector<number>;
    from: Vector<number>;
};
/**
 * @summary Returns a close command.
 */
export declare const close: () => {
    type: SVGCommand.CLOSE;
};
/**
 * @summary Return the y value of a path given its x coordinate
 * @example
    const p1 = parse(
      "M150,0 C150,0 0,75 200,75 C75,200 200,225 200,225 C225,200 200,150 0,150"
    );
    // 75
    getYForX(p1, 200))
    // ~151
    getYForX(p1, 50)
 */
export declare const getYForX: (path: Path, x: number, precision?: number) => number;
export {};
