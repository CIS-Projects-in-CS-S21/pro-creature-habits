{"ast":null,"code":"export var types = {\n  INTEGER: 'INTEGER',\n  FLOAT: 'FLOAT',\n  TEXT: 'TEXT',\n  NUMERIC: 'NUMERIC',\n  DATE: 'DATE',\n  DATETIME: 'DATETIME',\n  BOOLEAN: 'BOOLEAN',\n  JSON: 'JSON'\n};\n\nfunction toDatabaseValue(columnMapping, resource) {\n  return Object.entries(resource).reduce(function (o, p) {\n    o[p[0]] = propertyToDatabaseValue(columnMapping[p[0]].type, p[1]);\n    return o;\n  }, {});\n}\n\nfunction propertyToDatabaseValue(type, value) {\n  switch (type) {\n    case types.JSON:\n      return JSON.stringify(value);\n\n    case types.BOOLEAN:\n      return value ? 1 : 0;\n\n    default:\n      return value;\n  }\n}\n\nfunction toModelValue(columnMapping, obj) {\n  return Object.entries(columnMapping).reduce(function (o, p) {\n    if (obj.hasOwnProperty(p[0])) {\n      o[p[0]] = propertyToModelValue(p[1].type, obj[p[0]]);\n    }\n\n    return o;\n  }, {});\n}\n\nfunction propertyToModelValue(type, value) {\n  switch (type) {\n    case types.JSON:\n      return JSON.parse(value || null);\n\n    case types.BOOLEAN:\n      return Boolean(value);\n\n    default:\n      return value;\n  }\n}\n\nexport default {\n  toDatabaseValue: toDatabaseValue,\n  propertyToDatabaseValue: propertyToDatabaseValue,\n  toModelValue: toModelValue,\n  propertyToModelValue: propertyToModelValue\n};","map":{"version":3,"sources":["/home/samirsingh/Desktop/pro-creature-habits/node_modules/expo-sqlite-orm/src/DataTypes.js"],"names":["types","INTEGER","FLOAT","TEXT","NUMERIC","DATE","DATETIME","BOOLEAN","JSON","toDatabaseValue","columnMapping","resource","Object","entries","reduce","o","p","propertyToDatabaseValue","type","value","stringify","toModelValue","obj","hasOwnProperty","propertyToModelValue","parse","Boolean"],"mappings":"AAAA,OAAO,IAAMA,KAAK,GAAG;AACnBC,EAAAA,OAAO,EAAE,SADU;AAEnBC,EAAAA,KAAK,EAAE,OAFY;AAGnBC,EAAAA,IAAI,EAAE,MAHa;AAInBC,EAAAA,OAAO,EAAE,SAJU;AAKnBC,EAAAA,IAAI,EAAE,MALa;AAMnBC,EAAAA,QAAQ,EAAE,UANS;AAOnBC,EAAAA,OAAO,EAAE,SAPU;AAQnBC,EAAAA,IAAI,EAAE;AARa,CAAd;;AAWP,SAASC,eAAT,CAAyBC,aAAzB,EAAwCC,QAAxC,EAAkD;AAChD,SAAOC,MAAM,CAACC,OAAP,CAAeF,QAAf,EAAyBG,MAAzB,CAAgC,UAACC,CAAD,EAAIC,CAAJ,EAAU;AAC/CD,IAAAA,CAAC,CAACC,CAAC,CAAC,CAAD,CAAF,CAAD,GAAUC,uBAAuB,CAACP,aAAa,CAACM,CAAC,CAAC,CAAD,CAAF,CAAb,CAAoBE,IAArB,EAA2BF,CAAC,CAAC,CAAD,CAA5B,CAAjC;AACA,WAAOD,CAAP;AACD,GAHM,EAGJ,EAHI,CAAP;AAID;;AAED,SAASE,uBAAT,CAAiCC,IAAjC,EAAuCC,KAAvC,EAA8C;AAC5C,UAAQD,IAAR;AACE,SAAKlB,KAAK,CAACQ,IAAX;AACE,aAAOA,IAAI,CAACY,SAAL,CAAeD,KAAf,CAAP;;AACF,SAAKnB,KAAK,CAACO,OAAX;AACE,aAAOY,KAAK,GAAG,CAAH,GAAO,CAAnB;;AACF;AACE,aAAOA,KAAP;AANJ;AAQD;;AAED,SAASE,YAAT,CAAsBX,aAAtB,EAAqCY,GAArC,EAA0C;AACxC,SAAOV,MAAM,CAACC,OAAP,CAAeH,aAAf,EAA8BI,MAA9B,CAAqC,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACpD,QAAIM,GAAG,CAACC,cAAJ,CAAmBP,CAAC,CAAC,CAAD,CAApB,CAAJ,EAA8B;AAC5BD,MAAAA,CAAC,CAACC,CAAC,CAAC,CAAD,CAAF,CAAD,GAAUQ,oBAAoB,CAACR,CAAC,CAAC,CAAD,CAAD,CAAKE,IAAN,EAAYI,GAAG,CAACN,CAAC,CAAC,CAAD,CAAF,CAAf,CAA9B;AACD;;AACD,WAAOD,CAAP;AACD,GALM,EAKJ,EALI,CAAP;AAMD;;AAED,SAASS,oBAAT,CAA8BN,IAA9B,EAAoCC,KAApC,EAA2C;AACzC,UAAQD,IAAR;AACE,SAAKlB,KAAK,CAACQ,IAAX;AACE,aAAOA,IAAI,CAACiB,KAAL,CAAWN,KAAK,IAAI,IAApB,CAAP;;AACF,SAAKnB,KAAK,CAACO,OAAX;AACE,aAAOmB,OAAO,CAACP,KAAD,CAAd;;AACF;AACE,aAAOA,KAAP;AANJ;AAQD;;AAED,eAAe;AACbV,EAAAA,eAAe,EAAfA,eADa;AAEbQ,EAAAA,uBAAuB,EAAvBA,uBAFa;AAGbI,EAAAA,YAAY,EAAZA,YAHa;AAIbG,EAAAA,oBAAoB,EAApBA;AAJa,CAAf","sourcesContent":["export const types = {\n  INTEGER: 'INTEGER',\n  FLOAT: 'FLOAT',\n  TEXT: 'TEXT',\n  NUMERIC: 'NUMERIC',\n  DATE: 'DATE',\n  DATETIME: 'DATETIME',\n  BOOLEAN: 'BOOLEAN',\n  JSON: 'JSON'\n}\n\nfunction toDatabaseValue(columnMapping, resource) {\n  return Object.entries(resource).reduce((o, p) => {\n    o[p[0]] = propertyToDatabaseValue(columnMapping[p[0]].type, p[1])\n    return o\n  }, {})\n}\n\nfunction propertyToDatabaseValue(type, value) {\n  switch (type) {\n    case types.JSON:\n      return JSON.stringify(value)\n    case types.BOOLEAN:\n      return value ? 1 : 0\n    default:\n      return value\n  }\n}\n\nfunction toModelValue(columnMapping, obj) {\n  return Object.entries(columnMapping).reduce((o, p) => {\n    if (obj.hasOwnProperty(p[0])) {\n      o[p[0]] = propertyToModelValue(p[1].type, obj[p[0]])\n    }\n    return o\n  }, {})\n}\n\nfunction propertyToModelValue(type, value) {\n  switch (type) {\n    case types.JSON:\n      return JSON.parse(value || null)\n    case types.BOOLEAN:\n      return Boolean(value)\n    default:\n      return value\n  }\n}\n\nexport default {\n  toDatabaseValue,\n  propertyToDatabaseValue,\n  toModelValue,\n  propertyToModelValue\n}\n"]},"metadata":{},"sourceType":"module"}