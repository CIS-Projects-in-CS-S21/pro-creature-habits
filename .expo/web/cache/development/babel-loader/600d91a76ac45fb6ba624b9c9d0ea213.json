{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar defaultOptions = {\n  columns: '*',\n  page: null,\n  limit: 30,\n  where: {},\n  order: 'id DESC'\n};\nexport function find(tableName) {\n  return \"SELECT * FROM \" + tableName + \" WHERE id = ? LIMIT 1;\";\n}\nexport function query(tableName) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var _defaultOptions$optio = _objectSpread(_objectSpread({}, defaultOptions), options),\n      columns = _defaultOptions$optio.columns,\n      page = _defaultOptions$optio.page,\n      limit = _defaultOptions$optio.limit,\n      where = _defaultOptions$optio.where,\n      order = _defaultOptions$optio.order;\n\n  var whereStatement = queryWhere(where);\n  var sqlParts = ['SELECT', columns, 'FROM', tableName, whereStatement, 'ORDER BY', order];\n\n  if (page !== null) {\n    sqlParts.push.apply(sqlParts, ['LIMIT', limit, 'OFFSET', limit * (page - 1)]);\n  }\n\n  return sqlParts.filter(function (p) {\n    return p !== '';\n  }).join(' ');\n}\nexport function propertyOperation(statement) {\n  var operations = {\n    eq: '=',\n    neq: '<>',\n    lt: '<',\n    lteq: '<=',\n    gt: '>',\n    gteq: '>=',\n    cont: 'LIKE'\n  };\n  var pieces = statement.split('_');\n  var operation = pieces.pop();\n  var property = pieces.join('_');\n\n  if (!operations.hasOwnProperty(operation)) {\n    throw new Error('Operation not found, use (eq, neq, lt, lteq, gt, gteq, cont)');\n  }\n\n  return property + \" \" + operations[operation];\n}\nexport function queryWhere(options) {\n  var list = Object.keys(options).map(function (p) {\n    return propertyOperation(p) + \" ?\";\n  });\n  return list.length > 0 ? \"WHERE \" + list.join(' AND ') : '';\n}\nexport default {\n  find: find,\n  query: query\n};","map":{"version":3,"sources":["/Users/elianacohen/AndroidStudioProjects/pro-creature-habits/node_modules/expo-sqlite-orm/src/query_builder/read.js"],"names":["defaultOptions","columns","page","limit","where","order","find","tableName","query","options","whereStatement","queryWhere","sqlParts","push","filter","p","join","propertyOperation","statement","operations","eq","neq","lt","lteq","gt","gteq","cont","pieces","split","operation","pop","property","hasOwnProperty","Error","list","Object","keys","map","length"],"mappings":";;;;;;AAAA,IAAMA,cAAc,GAAG;AACrBC,EAAAA,OAAO,EAAE,GADY;AAErBC,EAAAA,IAAI,EAAE,IAFe;AAGrBC,EAAAA,KAAK,EAAE,EAHc;AAIrBC,EAAAA,KAAK,EAAE,EAJc;AAKrBC,EAAAA,KAAK,EAAE;AALc,CAAvB;AASA,OAAO,SAASC,IAAT,CAAcC,SAAd,EAAyB;AAC9B,4BAAwBA,SAAxB;AACD;AAQD,OAAO,SAASC,KAAT,CAAeD,SAAf,EAAwC;AAAA,MAAdE,OAAc,uEAAJ,EAAI;;AAAA,8DAExCT,cAFwC,GAGxCS,OAHwC;AAAA,MACrCR,OADqC,yBACrCA,OADqC;AAAA,MAC5BC,IAD4B,yBAC5BA,IAD4B;AAAA,MACtBC,KADsB,yBACtBA,KADsB;AAAA,MACfC,KADe,yBACfA,KADe;AAAA,MACRC,KADQ,yBACRA,KADQ;;AAM7C,MAAMK,cAAc,GAAGC,UAAU,CAACP,KAAD,CAAjC;AACA,MAAIQ,QAAQ,GAAG,CACb,QADa,EAEbX,OAFa,EAGb,MAHa,EAIbM,SAJa,EAKbG,cALa,EAMb,UANa,EAObL,KAPa,CAAf;;AAUA,MAAGH,IAAI,KAAK,IAAZ,EAAkB;AAChBU,IAAAA,QAAQ,CAACC,IAAT,OAAAD,QAAQ,EAAS,CACf,OADe,EAEfT,KAFe,EAGf,QAHe,EAIfA,KAAK,IAAID,IAAI,GAAG,CAAX,CAJU,CAAT,CAAR;AAMD;;AAED,SAAOU,QAAQ,CAACE,MAAT,CAAgB,UAAAC,CAAC;AAAA,WAAIA,CAAC,KAAK,EAAV;AAAA,GAAjB,EAA+BC,IAA/B,CAAoC,GAApC,CAAP;AACD;AAGD,OAAO,SAASC,iBAAT,CAA2BC,SAA3B,EAAsC;AAC3C,MAAMC,UAAU,GAAG;AACjBC,IAAAA,EAAE,EAAE,GADa;AAEjBC,IAAAA,GAAG,EAAE,IAFY;AAGjBC,IAAAA,EAAE,EAAE,GAHa;AAIjBC,IAAAA,IAAI,EAAE,IAJW;AAKjBC,IAAAA,EAAE,EAAE,GALa;AAMjBC,IAAAA,IAAI,EAAE,IANW;AAOjBC,IAAAA,IAAI,EAAE;AAPW,GAAnB;AASA,MAAMC,MAAM,GAAGT,SAAS,CAACU,KAAV,CAAgB,GAAhB,CAAf;AACA,MAAMC,SAAS,GAAGF,MAAM,CAACG,GAAP,EAAlB;AACA,MAAMC,QAAQ,GAAGJ,MAAM,CAACX,IAAP,CAAY,GAAZ,CAAjB;;AACA,MAAI,CAACG,UAAU,CAACa,cAAX,CAA0BH,SAA1B,CAAL,EAA2C;AACzC,UAAM,IAAII,KAAJ,CACJ,8DADI,CAAN;AAGD;;AACD,SAAUF,QAAV,SAAsBZ,UAAU,CAACU,SAAD,CAAhC;AACD;AAGD,OAAO,SAASlB,UAAT,CAAoBF,OAApB,EAA6B;AAClC,MAAMyB,IAAI,GAAGC,MAAM,CAACC,IAAP,CAAY3B,OAAZ,EAAqB4B,GAArB,CAAyB,UAAAtB,CAAC;AAAA,WAAOE,iBAAiB,CAACF,CAAD,CAAxB;AAAA,GAA1B,CAAb;AACA,SAAOmB,IAAI,CAACI,MAAL,GAAc,CAAd,cAA2BJ,IAAI,CAAClB,IAAL,CAAU,OAAV,CAA3B,GAAkD,EAAzD;AACD;AAED,eAAe;AAAEV,EAAAA,IAAI,EAAJA,IAAF;AAAQE,EAAAA,KAAK,EAALA;AAAR,CAAf","sourcesContent":["const defaultOptions = {\n  columns: '*',\n  page: null,\n  limit: 30,\n  where: {},\n  order: 'id DESC'\n}\n\n// Creates the \"SELECT\" sql statement for find one record\nexport function find(tableName) {\n  return `SELECT * FROM ${tableName} WHERE id = ? LIMIT 1;`\n}\n\n/* Creates the \"SELECT\" sql statement for query records\n * Ex: qb.query({\n *   columns: 'id, nome, status',\n *   where: {status_eq: 'encerrado'}\n * })\n */\nexport function query(tableName, options = {}) {\n  const { columns, page, limit, where, order } = {\n    ...defaultOptions,\n    ...options\n  }\n\n  const whereStatement = queryWhere(where)\n  let sqlParts = [\n    'SELECT',\n    columns,\n    'FROM',\n    tableName,\n    whereStatement,\n    'ORDER BY',\n    order\n  ]\n\n  if(page !== null) {\n    sqlParts.push(...[\n      'LIMIT',\n      limit,\n      'OFFSET',\n      limit * (page - 1)\n    ])\n  }\n\n  return sqlParts.filter(p => p !== '').join(' ')\n}\n\n// Convert operators to database syntax\nexport function propertyOperation(statement) {\n  const operations = {\n    eq: '=',\n    neq: '<>',\n    lt: '<',\n    lteq: '<=',\n    gt: '>',\n    gteq: '>=',\n    cont: 'LIKE'\n  }\n  const pieces = statement.split('_')\n  const operation = pieces.pop()\n  const property = pieces.join('_')\n  if (!operations.hasOwnProperty(operation)) {\n    throw new Error(\n      'Operation not found, use (eq, neq, lt, lteq, gt, gteq, cont)'\n    )\n  }\n  return `${property} ${operations[operation]}`\n}\n\n// Build where query\nexport function queryWhere(options) {\n  const list = Object.keys(options).map(p => `${propertyOperation(p)} ?`)\n  return list.length > 0 ? `WHERE ${list.join(' AND ')}` : ''\n}\n\nexport default { find, query }\n"]},"metadata":{},"sourceType":"module"}