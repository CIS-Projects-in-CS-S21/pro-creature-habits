{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Matt\\\\Documents\\\\GitHub\\\\pro-creature-habits\\\\node_modules\\\\@react-native-community\\\\art\\\\lib\\\\Text.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport Path from \"./ARTSerializablePath\";\nimport { NativeText } from \"./nativeComponents\";\nimport { extractBrush, extractOpacity, extractColor, extractStrokeCap, extractStrokeJoin, extractTransform, extractShadow, extractAlignment, childrenAsString, extractFontAndLines } from \"./helpers\";\n\nvar Text = function (_React$Component) {\n  _inherits(Text, _React$Component);\n\n  var _super = _createSuper(Text);\n\n  function Text() {\n    _classCallCheck(this, Text);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Text, [{\n    key: \"render\",\n    value: function render() {\n      var props = this.props;\n      var path = props.path;\n      var textPath = path ? (path instanceof Path ? path : new Path(path)).toJSON() : null;\n      var textFrame = extractFontAndLines(props.font, childrenAsString(props.children));\n      return React.createElement(NativeText, {\n        fill: extractBrush(props.fill, props),\n        opacity: extractOpacity(props),\n        stroke: extractColor(props.stroke),\n        strokeCap: extractStrokeCap(props.strokeCap),\n        strokeDash: props.strokeDash || null,\n        strokeJoin: extractStrokeJoin(props.strokeJoin),\n        strokeWidth: props.strokeWidth,\n        transform: extractTransform(props),\n        alignment: extractAlignment(props.alignment),\n        shadow: extractShadow(this.props),\n        frame: textFrame,\n        path: textPath,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 7\n        }\n      });\n    }\n  }]);\n\n  return Text;\n}(React.Component);\n\nText.defaultProps = {\n  strokeWidth: 1,\n  width: 0,\n  height: 0\n};\nexport { Text as default };","map":{"version":3,"sources":["C:/Users/Matt/Documents/GitHub/pro-creature-habits/node_modules/@react-native-community/art/lib/Text.js"],"names":["React","Path","NativeText","extractBrush","extractOpacity","extractColor","extractStrokeCap","extractStrokeJoin","extractTransform","extractShadow","extractAlignment","childrenAsString","extractFontAndLines","Text","props","path","textPath","toJSON","textFrame","font","children","fill","stroke","strokeCap","strokeDash","strokeJoin","strokeWidth","alignment","Component","defaultProps","width","height"],"mappings":";;;;;;;;;;;AASA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,IAAP;AACA,SAAQC,UAAR;AACA,SACEC,YADF,EAEEC,cAFF,EAGEC,YAHF,EAIEC,gBAJF,EAKEC,iBALF,EAMEC,gBANF,EAOEC,aAPF,EAQEC,gBARF,EASEC,gBATF,EAUEC,mBAVF;;IAwCqBC,I;;;;;;;;;;;;;WAOnB,kBAAS;AACP,UAAMC,KAAK,GAAG,KAAKA,KAAnB;AACA,UAAMC,IAAI,GAAGD,KAAK,CAACC,IAAnB;AACA,UAAMC,QAAQ,GAAGD,IAAI,GACjB,CAACA,IAAI,YAAYd,IAAhB,GAAuBc,IAAvB,GAA8B,IAAId,IAAJ,CAASc,IAAT,CAA/B,EAA+CE,MAA/C,EADiB,GAEjB,IAFJ;AAGA,UAAMC,SAAS,GAAGN,mBAAmB,CACnCE,KAAK,CAACK,IAD6B,EAEnCR,gBAAgB,CAACG,KAAK,CAACM,QAAP,CAFmB,CAArC;AAIA,aACE,oBAAC,UAAD;AACE,QAAA,IAAI,EAAEjB,YAAY,CAACW,KAAK,CAACO,IAAP,EAAaP,KAAb,CADpB;AAEE,QAAA,OAAO,EAAEV,cAAc,CAACU,KAAD,CAFzB;AAGE,QAAA,MAAM,EAAET,YAAY,CAACS,KAAK,CAACQ,MAAP,CAHtB;AAIE,QAAA,SAAS,EAAEhB,gBAAgB,CAACQ,KAAK,CAACS,SAAP,CAJ7B;AAKE,QAAA,UAAU,EAAET,KAAK,CAACU,UAAN,IAAoB,IALlC;AAME,QAAA,UAAU,EAAEjB,iBAAiB,CAACO,KAAK,CAACW,UAAP,CAN/B;AAOE,QAAA,WAAW,EAAEX,KAAK,CAACY,WAPrB;AAQE,QAAA,SAAS,EAAElB,gBAAgB,CAACM,KAAD,CAR7B;AASE,QAAA,SAAS,EAAEJ,gBAAgB,CAACI,KAAK,CAACa,SAAP,CAT7B;AAUE,QAAA,MAAM,EAAElB,aAAa,CAAC,KAAKK,KAAN,CAVvB;AAWE,QAAA,KAAK,EAAEI,SAXT;AAYE,QAAA,IAAI,EAAEF,QAZR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAgBD;;;;EAjC+BhB,KAAK,CAAC4B,S;;AAAnBf,I,CACZgB,Y,GAAe;AACpBH,EAAAA,WAAW,EAAE,CADO;AAEpBI,EAAAA,KAAK,EAAE,CAFa;AAGpBC,EAAAA,MAAM,EAAE;AAHY,C;SADHlB,I","sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport * as React from 'react';\r\nimport Path from './ARTSerializablePath';\r\nimport {NativeText} from './nativeComponents';\r\nimport {\r\n  extractBrush,\r\n  extractOpacity,\r\n  extractColor,\r\n  extractStrokeCap,\r\n  extractStrokeJoin,\r\n  extractTransform,\r\n  extractShadow,\r\n  extractAlignment,\r\n  childrenAsString,\r\n  extractFontAndLines,\r\n} from './helpers';\r\nimport type {\r\n  TransformProps,\r\n  ShadowProps,\r\n  OpacityProps,\r\n  Alignment,\r\n  Brush,\r\n  StrokeCap,\r\n  StrokeJoin,\r\n  Font,\r\n} from './types';\r\n\r\nexport type TextProps = TransformProps &\r\n  ShadowProps &\r\n  OpacityProps & {\r\n    fill?: string | Brush,\r\n    stroke?: string,\r\n    strokeCap?: StrokeCap,\r\n    strokeDash?: mixed,\r\n    strokeJoin?: StrokeJoin,\r\n    strokeWidth?: mixed,\r\n    children?: string | Array<string>,\r\n    width: number,\r\n    height: number,\r\n    alignment?: Alignment,\r\n    font?: string | Font,\r\n    path?: string | Path,\r\n  };\r\n\r\nexport default class Text extends React.Component<TextProps> {\r\n  static defaultProps = {\r\n    strokeWidth: 1,\r\n    width: 0,\r\n    height: 0,\r\n  };\r\n\r\n  render() {\r\n    const props = this.props;\r\n    const path = props.path;\r\n    const textPath = path\r\n      ? (path instanceof Path ? path : new Path(path)).toJSON()\r\n      : null;\r\n    const textFrame = extractFontAndLines(\r\n      props.font,\r\n      childrenAsString(props.children),\r\n    );\r\n    return (\r\n      <NativeText\r\n        fill={extractBrush(props.fill, props)}\r\n        opacity={extractOpacity(props)}\r\n        stroke={extractColor(props.stroke)}\r\n        strokeCap={extractStrokeCap(props.strokeCap)}\r\n        strokeDash={props.strokeDash || null}\r\n        strokeJoin={extractStrokeJoin(props.strokeJoin)}\r\n        strokeWidth={props.strokeWidth}\r\n        transform={extractTransform(props)}\r\n        alignment={extractAlignment(props.alignment)}\r\n        shadow={extractShadow(this.props)}\r\n        frame={textFrame}\r\n        path={textPath}\r\n      />\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}