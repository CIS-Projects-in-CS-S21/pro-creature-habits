{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Matt\\\\Documents\\\\GitHub\\\\pro-creature-habits\\\\node_modules\\\\react-native-progress\\\\CircleSnail.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport { Surface as ARTSurface } from '@react-native-community/art';\nimport Arc from \"./Shapes/Arc\";\nvar AnimatedArc = Animated.createAnimatedComponent(Arc);\nvar MIN_ARC_ANGLE = 0.1;\nvar MAX_ARC_ANGLE = 1.5 * Math.PI;\n\nvar CircleSnail = function (_Component) {\n  _inherits(CircleSnail, _Component);\n\n  var _super = _createSuper(CircleSnail);\n\n  function CircleSnail(props) {\n    var _this;\n\n    _classCallCheck(this, CircleSnail);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      startAngle: new Animated.Value(-MIN_ARC_ANGLE),\n      endAngle: new Animated.Value(0),\n      rotation: new Animated.Value(0),\n      colorIndex: 0\n    };\n    return _this;\n  }\n\n  _createClass(CircleSnail, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.animating) {\n        this.animate();\n        this.spin();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.animating !== this.props.animating) {\n        if (this.props.animating) {\n          this.animate();\n          this.spin();\n        } else {\n          this.stopAnimations();\n        }\n      }\n    }\n  }, {\n    key: \"animate\",\n    value: function animate() {\n      var _this2 = this;\n\n      var iteration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      Animated.sequence([Animated.timing(this.state.startAngle, {\n        toValue: -MAX_ARC_ANGLE * iteration - MIN_ARC_ANGLE,\n        duration: this.props.duration || 1000,\n        isInteraction: false,\n        easing: Easing.inOut(Easing.quad),\n        useNativeDriver: this.props.useNativeDriver\n      }), Animated.timing(this.state.endAngle, {\n        toValue: -MAX_ARC_ANGLE * iteration,\n        duration: this.props.duration || 1000,\n        isInteraction: false,\n        easing: Easing.inOut(Easing.quad),\n        useNativeDriver: this.props.useNativeDriver\n      })]).start(function (endState) {\n        if (endState.finished) {\n          if (Array.isArray(_this2.props.color)) {\n            _this2.setState({\n              colorIndex: iteration % _this2.props.color.length\n            });\n          }\n\n          _this2.animate(iteration + 1);\n        }\n      });\n    }\n  }, {\n    key: \"spin\",\n    value: function spin() {\n      var _this3 = this;\n\n      Animated.timing(this.state.rotation, {\n        toValue: 1,\n        duration: this.props.spinDuration || 5000,\n        easing: Easing.linear,\n        isInteraction: false,\n        useNativeDriver: this.props.useNativeDriver\n      }).start(function (endState) {\n        if (endState.finished) {\n          _this3.state.rotation.setValue(0);\n\n          _this3.spin();\n        }\n      });\n    }\n  }, {\n    key: \"stopAnimations\",\n    value: function stopAnimations() {\n      this.state.startAngle.stopAnimation();\n      this.state.endAngle.stopAnimation();\n      this.state.rotation.stopAnimation();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          animating = _this$props.animating,\n          children = _this$props.children,\n          color = _this$props.color,\n          direction = _this$props.direction,\n          hidesWhenStopped = _this$props.hidesWhenStopped,\n          size = _this$props.size,\n          style = _this$props.style,\n          thickness = _this$props.thickness,\n          strokeCap = _this$props.strokeCap,\n          restProps = _objectWithoutProperties(_this$props, [\"animating\", \"children\", \"color\", \"direction\", \"hidesWhenStopped\", \"size\", \"style\", \"thickness\", \"strokeCap\"]);\n\n      if (!animating && hidesWhenStopped) {\n        return null;\n      }\n\n      var radius = size / 2 - thickness;\n      var offset = {\n        top: thickness,\n        left: thickness\n      };\n      var directionFactor = direction === 'counter-clockwise' ? -1 : 1;\n      return React.createElement(Animated.View, _extends({}, restProps, {\n        style: [style, {\n          backgroundColor: 'transparent',\n          overflow: 'hidden',\n          transform: [{\n            rotate: this.state.rotation.interpolate({\n              inputRange: [0, 1],\n              outputRange: ['0deg', directionFactor * 360 + \"deg\"]\n            })\n          }]\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 7\n        }\n      }), React.createElement(ARTSurface, {\n        width: size,\n        height: size,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 9\n        }\n      }, React.createElement(AnimatedArc, {\n        direction: direction === 'counter-clockwise' ? 'clockwise' : 'counter-clockwise',\n        radius: radius,\n        stroke: Array.isArray(color) ? color[this.state.colorIndex] : color,\n        offset: offset,\n        startAngle: this.state.startAngle,\n        endAngle: this.state.endAngle,\n        strokeCap: strokeCap,\n        strokeWidth: thickness,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }\n      })), children);\n    }\n  }]);\n\n  return CircleSnail;\n}(Component);\n\nCircleSnail.propTypes = {\n  animating: PropTypes.bool,\n  color: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n  children: PropTypes.node,\n  direction: PropTypes.oneOf(['clockwise', 'counter-clockwise']),\n  duration: PropTypes.number,\n  hidesWhenStopped: PropTypes.bool,\n  size: PropTypes.number,\n  spinDuration: PropTypes.number,\n  style: PropTypes.any,\n  thickness: PropTypes.number,\n  strokeCap: PropTypes.string,\n  useNativeDriver: PropTypes.bool\n};\nCircleSnail.defaultProps = {\n  animating: true,\n  color: 'rgba(0, 122, 255, 1)',\n  direction: 'counter-clockwise',\n  hidesWhenStopped: false,\n  size: 40,\n  thickness: 3,\n  strokeCap: 'round',\n  useNativeDriver: false\n};\nexport { CircleSnail as default };","map":{"version":3,"sources":["C:/Users/Matt/Documents/GitHub/pro-creature-habits/node_modules/react-native-progress/CircleSnail.js"],"names":["React","Component","PropTypes","Surface","ARTSurface","Arc","AnimatedArc","Animated","createAnimatedComponent","MIN_ARC_ANGLE","MAX_ARC_ANGLE","Math","PI","CircleSnail","props","state","startAngle","Value","endAngle","rotation","colorIndex","animating","animate","spin","prevProps","stopAnimations","iteration","sequence","timing","toValue","duration","isInteraction","easing","Easing","inOut","quad","useNativeDriver","start","endState","finished","Array","isArray","color","setState","length","spinDuration","linear","setValue","stopAnimation","children","direction","hidesWhenStopped","size","style","thickness","strokeCap","restProps","radius","offset","top","left","directionFactor","backgroundColor","overflow","transform","rotate","interpolate","inputRange","outputRange","propTypes","bool","oneOfType","string","arrayOf","node","oneOf","number","any","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Animated, Easing } from 'react-native';\r\nimport { Surface as ARTSurface } from '@react-native-community/art';\r\n\r\nimport Arc from './Shapes/Arc';\r\n\r\nconst AnimatedArc = Animated.createAnimatedComponent(Arc);\r\n\r\nconst MIN_ARC_ANGLE = 0.1;\r\nconst MAX_ARC_ANGLE = 1.5 * Math.PI;\r\n\r\nexport default class CircleSnail extends Component {\r\n  static propTypes = {\r\n    animating: PropTypes.bool,\r\n    color: PropTypes.oneOfType([\r\n      PropTypes.string,\r\n      PropTypes.arrayOf(PropTypes.string),\r\n    ]),\r\n    children: PropTypes.node,\r\n    direction: PropTypes.oneOf(['clockwise', 'counter-clockwise']),\r\n    duration: PropTypes.number,\r\n    hidesWhenStopped: PropTypes.bool,\r\n    size: PropTypes.number,\r\n    spinDuration: PropTypes.number,\r\n    style: PropTypes.any,\r\n    thickness: PropTypes.number,\r\n    strokeCap: PropTypes.string,\r\n    useNativeDriver: PropTypes.bool,\r\n  };\r\n\r\n  static defaultProps = {\r\n    animating: true,\r\n    color: 'rgba(0, 122, 255, 1)',\r\n    direction: 'counter-clockwise',\r\n    hidesWhenStopped: false,\r\n    size: 40,\r\n    thickness: 3,\r\n    strokeCap: 'round',\r\n    useNativeDriver: false,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      startAngle: new Animated.Value(-MIN_ARC_ANGLE),\r\n      endAngle: new Animated.Value(0),\r\n      rotation: new Animated.Value(0),\r\n      colorIndex: 0,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.animating) {\r\n      this.animate();\r\n      this.spin();\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.animating !== this.props.animating) {\r\n      if (this.props.animating) {\r\n        this.animate();\r\n        this.spin();\r\n      } else {\r\n        this.stopAnimations();\r\n      }\r\n    }\r\n  }\r\n\r\n  animate(iteration = 1) {\r\n    Animated.sequence([\r\n      Animated.timing(this.state.startAngle, {\r\n        toValue: -MAX_ARC_ANGLE * iteration - MIN_ARC_ANGLE,\r\n        duration: this.props.duration || 1000,\r\n        isInteraction: false,\r\n        easing: Easing.inOut(Easing.quad),\r\n        useNativeDriver: this.props.useNativeDriver,\r\n      }),\r\n      Animated.timing(this.state.endAngle, {\r\n        toValue: -MAX_ARC_ANGLE * iteration,\r\n        duration: this.props.duration || 1000,\r\n        isInteraction: false,\r\n        easing: Easing.inOut(Easing.quad),\r\n        useNativeDriver: this.props.useNativeDriver,\r\n      }),\r\n    ]).start(endState => {\r\n      if (endState.finished) {\r\n        if (Array.isArray(this.props.color)) {\r\n          this.setState({\r\n            colorIndex: iteration % this.props.color.length,\r\n          });\r\n        }\r\n        this.animate(iteration + 1);\r\n      }\r\n    });\r\n  }\r\n\r\n  spin() {\r\n    Animated.timing(this.state.rotation, {\r\n      toValue: 1,\r\n      duration: this.props.spinDuration || 5000,\r\n      easing: Easing.linear,\r\n      isInteraction: false,\r\n      useNativeDriver: this.props.useNativeDriver,\r\n    }).start(endState => {\r\n      if (endState.finished) {\r\n        this.state.rotation.setValue(0);\r\n        this.spin();\r\n      }\r\n    });\r\n  }\r\n\r\n  stopAnimations() {\r\n    this.state.startAngle.stopAnimation();\r\n    this.state.endAngle.stopAnimation();\r\n    this.state.rotation.stopAnimation();\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      animating,\r\n      children,\r\n      color,\r\n      direction,\r\n      hidesWhenStopped,\r\n      size,\r\n      style,\r\n      thickness,\r\n      strokeCap,\r\n      ...restProps\r\n    } = this.props;\r\n\r\n    if (!animating && hidesWhenStopped) {\r\n      return null;\r\n    }\r\n\r\n    const radius = size / 2 - thickness;\r\n    const offset = {\r\n      top: thickness,\r\n      left: thickness,\r\n    };\r\n\r\n    const directionFactor = direction === 'counter-clockwise' ? -1 : 1;\r\n\r\n    return (\r\n      <Animated.View\r\n        {...restProps}\r\n        style={[\r\n          style,\r\n          {\r\n            backgroundColor: 'transparent',\r\n            overflow: 'hidden',\r\n            transform: [\r\n              {\r\n                rotate: this.state.rotation.interpolate({\r\n                  inputRange: [0, 1],\r\n                  outputRange: ['0deg', `${directionFactor * 360}deg`],\r\n                }),\r\n              },\r\n            ],\r\n          },\r\n        ]}\r\n      >\r\n        <ARTSurface width={size} height={size}>\r\n          <AnimatedArc\r\n            direction={\r\n              direction === 'counter-clockwise'\r\n                ? 'clockwise'\r\n                : 'counter-clockwise'\r\n            }\r\n            radius={radius}\r\n            stroke={Array.isArray(color) ? color[this.state.colorIndex] : color}\r\n            offset={offset}\r\n            startAngle={this.state.startAngle}\r\n            endAngle={this.state.endAngle}\r\n            strokeCap={strokeCap}\r\n            strokeWidth={thickness}\r\n          />\r\n        </ARTSurface>\r\n        {children}\r\n      </Animated.View>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}