{"ast":null,"code":"'use strict';\n\nimport EmitterSubscription from \"./EmitterSubscription\";\nimport EventSubscriptionVendor from \"./EventSubscriptionVendor\";\nimport invariant from 'fbjs/lib/invariant';\n\nvar sparseFilterPredicate = function sparseFilterPredicate() {\n  return true;\n};\n\nvar EventEmitter = function () {\n  function EventEmitter(subscriber) {\n    this._subscriber = subscriber || new EventSubscriptionVendor();\n  }\n\n  var _proto = EventEmitter.prototype;\n\n  _proto.addListener = function addListener(eventType, listener, context) {\n    return this._subscriber.addSubscription(eventType, new EmitterSubscription(this, this._subscriber, listener, context));\n  };\n\n  _proto.once = function once(eventType, listener, context) {\n    var _this = this;\n\n    return this.addListener(eventType, function () {\n      _this.removeCurrentListener();\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      listener.apply(context, args);\n    });\n  };\n\n  _proto.removeAllListeners = function removeAllListeners(eventType) {\n    this._subscriber.removeAllSubscriptions(eventType);\n  };\n\n  _proto.removeCurrentListener = function removeCurrentListener() {\n    invariant(!!this._currentSubscription, 'Not in an emitting cycle; there is no current subscription');\n    this.removeSubscription(this._currentSubscription);\n  };\n\n  _proto.removeSubscription = function removeSubscription(subscription) {\n    invariant(subscription.emitter === this, 'Subscription does not belong to this emitter.');\n\n    this._subscriber.removeSubscription(subscription);\n  };\n\n  _proto.listeners = function listeners(eventType) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    return subscriptions ? subscriptions.filter(sparseFilterPredicate).map(function (subscription) {\n      return subscription.listener;\n    }) : [];\n  };\n\n  _proto.emit = function emit(eventType) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    if (subscriptions) {\n      for (var i = 0, l = subscriptions.length; i < l; i++) {\n        var subscription = subscriptions[i];\n\n        if (subscription && subscription.listener) {\n          this._currentSubscription = subscription;\n          subscription.listener.apply(subscription.context, Array.prototype.slice.call(arguments, 1));\n        }\n      }\n\n      this._currentSubscription = null;\n    }\n  };\n\n  _proto.removeListener = function removeListener(eventType, listener) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    if (subscriptions) {\n      for (var i = 0, l = subscriptions.length; i < l; i++) {\n        var subscription = subscriptions[i];\n\n        if (subscription && subscription.listener === listener) {\n          subscription.remove();\n        }\n      }\n    }\n  };\n\n  return EventEmitter;\n}();\n\nexport default EventEmitter;","map":{"version":3,"sources":["C:/Users/Matt/Documents/GitHub/pro-creature-habits/node_modules/react-native-web/dist/vendor/react-native/emitter/EventEmitter.js"],"names":["EmitterSubscription","EventSubscriptionVendor","invariant","sparseFilterPredicate","EventEmitter","subscriber","_subscriber","_proto","prototype","addListener","eventType","listener","context","addSubscription","once","_this","removeCurrentListener","_len","arguments","length","args","Array","_key","apply","removeAllListeners","removeAllSubscriptions","_currentSubscription","removeSubscription","subscription","emitter","listeners","subscriptions","getSubscriptionsForType","filter","map","emit","i","l","slice","call","removeListener","remove"],"mappings":"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","sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * \r\n * @typecheck\r\n */\r\n'use strict';\r\n\r\nimport EmitterSubscription from './EmitterSubscription';\r\nimport EventSubscriptionVendor from './EventSubscriptionVendor';\r\nimport invariant from 'fbjs/lib/invariant';\r\n\r\nvar sparseFilterPredicate = function sparseFilterPredicate() {\r\n  return true;\r\n};\r\n/**\r\n * @class EventEmitter\r\n * @description\r\n * An EventEmitter is responsible for managing a set of listeners and publishing\r\n * events to them when it is told that such events happened. In addition to the\r\n * data for the given event it also sends a event control object which allows\r\n * the listeners/handlers to prevent the default behavior of the given event.\r\n *\r\n * The emitter is designed to be generic enough to support all the different\r\n * contexts in which one might want to emit events. It is a simple multicast\r\n * mechanism on top of which extra functionality can be composed. For example, a\r\n * more advanced emitter may use an EventHolder and EventFactory.\r\n */\r\n\r\n\r\nvar EventEmitter =\r\n/*#__PURE__*/\r\nfunction () {\r\n  /**\r\n   * @constructor\r\n   *\r\n   * @param {EventSubscriptionVendor} subscriber - Optional subscriber instance\r\n   *   to use. If omitted, a new subscriber will be created for the emitter.\r\n   */\r\n  function EventEmitter(subscriber) {\r\n    this._subscriber = subscriber || new EventSubscriptionVendor();\r\n  }\r\n  /**\r\n   * Adds a listener to be invoked when events of the specified type are\r\n   * emitted. An optional calling context may be provided. The data arguments\r\n   * emitted will be passed to the listener function.\r\n   *\r\n   * TODO: Annotate the listener arg's type. This is tricky because listeners\r\n   *       can be invoked with varargs.\r\n   *\r\n   * @param {string} eventType - Name of the event to listen to\r\n   * @param {function} listener - Function to invoke when the specified event is\r\n   *   emitted\r\n   * @param {*} context - Optional context object to use when invoking the\r\n   *   listener\r\n   */\r\n\r\n\r\n  var _proto = EventEmitter.prototype;\r\n\r\n  _proto.addListener = function addListener(eventType, listener, context) {\r\n    return this._subscriber.addSubscription(eventType, new EmitterSubscription(this, this._subscriber, listener, context));\r\n  }\r\n  /**\r\n   * Similar to addListener, except that the listener is removed after it is\r\n   * invoked once.\r\n   *\r\n   * @param {string} eventType - Name of the event to listen to\r\n   * @param {function} listener - Function to invoke only once when the\r\n   *   specified event is emitted\r\n   * @param {*} context - Optional context object to use when invoking the\r\n   *   listener\r\n   */\r\n  ;\r\n\r\n  _proto.once = function once(eventType, listener, context) {\r\n    var _this = this;\r\n\r\n    return this.addListener(eventType, function () {\r\n      _this.removeCurrentListener();\r\n\r\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n        args[_key] = arguments[_key];\r\n      }\r\n\r\n      listener.apply(context, args);\r\n    });\r\n  }\r\n  /**\r\n   * Removes all of the registered listeners, including those registered as\r\n   * listener maps.\r\n   *\r\n   * @param {?string} eventType - Optional name of the event whose registered\r\n   *   listeners to remove\r\n   */\r\n  ;\r\n\r\n  _proto.removeAllListeners = function removeAllListeners(eventType) {\r\n    this._subscriber.removeAllSubscriptions(eventType);\r\n  }\r\n  /**\r\n   * Provides an API that can be called during an eventing cycle to remove the\r\n   * last listener that was invoked. This allows a developer to provide an event\r\n   * object that can remove the listener (or listener map) during the\r\n   * invocation.\r\n   *\r\n   * If it is called when not inside of an emitting cycle it will throw.\r\n   *\r\n   * @throws {Error} When called not during an eventing cycle\r\n   *\r\n   * @example\r\n   *   var subscription = emitter.addListenerMap({\r\n   *     someEvent: function(data, event) {\r\n   *       console.log(data);\r\n   *       emitter.removeCurrentListener();\r\n   *     }\r\n   *   });\r\n   *\r\n   *   emitter.emit('someEvent', 'abc'); // logs 'abc'\r\n   *   emitter.emit('someEvent', 'def'); // does not log anything\r\n   */\r\n  ;\r\n\r\n  _proto.removeCurrentListener = function removeCurrentListener() {\r\n    invariant(!!this._currentSubscription, 'Not in an emitting cycle; there is no current subscription');\r\n    this.removeSubscription(this._currentSubscription);\r\n  }\r\n  /**\r\n   * Removes a specific subscription. Called by the `remove()` method of the\r\n   * subscription itself to ensure any necessary cleanup is performed.\r\n   */\r\n  ;\r\n\r\n  _proto.removeSubscription = function removeSubscription(subscription) {\r\n    invariant(subscription.emitter === this, 'Subscription does not belong to this emitter.');\r\n\r\n    this._subscriber.removeSubscription(subscription);\r\n  }\r\n  /**\r\n   * Returns an array of listeners that are currently registered for the given\r\n   * event.\r\n   *\r\n   * @param {string} eventType - Name of the event to query\r\n   * @returns {array}\r\n   */\r\n  ;\r\n\r\n  _proto.listeners = function listeners(eventType) {\r\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\r\n\r\n    return subscriptions ? subscriptions // We filter out missing entries because the array is sparse.\r\n    // \"callbackfn is called only for elements of the array which actually\r\n    // exist; it is not called for missing elements of the array.\"\r\n    // https://www.ecma-international.org/ecma-262/9.0/index.html#sec-array.prototype.filter\r\n    .filter(sparseFilterPredicate).map(function (subscription) {\r\n      return subscription.listener;\r\n    }) : [];\r\n  }\r\n  /**\r\n   * Emits an event of the given type with the given data. All handlers of that\r\n   * particular type will be notified.\r\n   *\r\n   * @param {string} eventType - Name of the event to emit\r\n   * @param {...*} Arbitrary arguments to be passed to each registered listener\r\n   *\r\n   * @example\r\n   *   emitter.addListener('someEvent', function(message) {\r\n   *     console.log(message);\r\n   *   });\r\n   *\r\n   *   emitter.emit('someEvent', 'abc'); // logs 'abc'\r\n   */\r\n  ;\r\n\r\n  _proto.emit = function emit(eventType) {\r\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\r\n\r\n    if (subscriptions) {\r\n      for (var i = 0, l = subscriptions.length; i < l; i++) {\r\n        var subscription = subscriptions[i]; // The subscription may have been removed during this event loop.\r\n\r\n        if (subscription && subscription.listener) {\r\n          this._currentSubscription = subscription;\r\n          subscription.listener.apply(subscription.context, Array.prototype.slice.call(arguments, 1));\r\n        }\r\n      }\r\n\r\n      this._currentSubscription = null;\r\n    }\r\n  }\r\n  /**\r\n   * Removes the given listener for event of specific type.\r\n   *\r\n   * @param {string} eventType - Name of the event to emit\r\n   * @param {function} listener - Function to invoke when the specified event is\r\n   *   emitted\r\n   *\r\n   * @example\r\n   *   emitter.removeListener('someEvent', function(message) {\r\n   *     console.log(message);\r\n   *   }); // removes the listener if already registered\r\n   *\r\n   */\r\n  ;\r\n\r\n  _proto.removeListener = function removeListener(eventType, listener) {\r\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\r\n\r\n    if (subscriptions) {\r\n      for (var i = 0, l = subscriptions.length; i < l; i++) {\r\n        var subscription = subscriptions[i]; // The subscription may have been removed during this event loop.\r\n        // its listener matches the listener in method parameters\r\n\r\n        if (subscription && subscription.listener === listener) {\r\n          subscription.remove();\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  return EventEmitter;\r\n}();\r\n\r\nexport default EventEmitter;"]},"metadata":{},"sourceType":"module"}