{"ast":null,"code":"var CSS_UNIT_RE = /^[+-]?\\d*(?:\\.\\d+)?(?:[Ee][+-]?\\d+)?(%|\\w*)/;\n\nvar getUnit = function getUnit(str) {\n  return str.match(CSS_UNIT_RE)[1];\n};\n\nvar isNumeric = function isNumeric(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n};\n\nvar multiplyStyleLengthValue = function multiplyStyleLengthValue(value, multiple) {\n  if (typeof value === 'string') {\n    var number = parseFloat(value) * multiple;\n    var unit = getUnit(value);\n    return \"\" + number + unit;\n  } else if (isNumeric(value)) {\n    return value * multiple;\n  }\n};\n\nexport default multiplyStyleLengthValue;","map":{"version":3,"sources":["C:/Users/Matt/Documents/GitHub/pro-creature-habits/node_modules/react-native-web/dist/modules/multiplyStyleLengthValue/index.js"],"names":["CSS_UNIT_RE","getUnit","str","match","isNumeric","n","isNaN","parseFloat","isFinite","multiplyStyleLengthValue","value","multiple","number","unit"],"mappings":"AAQA,IAAIA,WAAW,GAAG,6CAAlB;;AAEA,IAAIC,OAAO,GAAG,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAClC,SAAOA,GAAG,CAACC,KAAJ,CAAUH,WAAV,EAAuB,CAAvB,CAAP;AACD,CAFD;;AAIA,IAAII,SAAS,GAAG,SAASA,SAAT,CAAmBC,CAAnB,EAAsB;AACpC,SAAO,CAACC,KAAK,CAACC,UAAU,CAACF,CAAD,CAAX,CAAN,IAAyBG,QAAQ,CAACH,CAAD,CAAxC;AACD,CAFD;;AAIA,IAAII,wBAAwB,GAAG,SAASA,wBAAT,CAAkCC,KAAlC,EAAyCC,QAAzC,EAAmD;AAChF,MAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;AAC7B,QAAIE,MAAM,GAAGL,UAAU,CAACG,KAAD,CAAV,GAAoBC,QAAjC;AACA,QAAIE,IAAI,GAAGZ,OAAO,CAACS,KAAD,CAAlB;AACA,WAAO,KAAKE,MAAL,GAAcC,IAArB;AACD,GAJD,MAIO,IAAIT,SAAS,CAACM,KAAD,CAAb,EAAsB;AAC3B,WAAOA,KAAK,GAAGC,QAAf;AACD;AACF,CARD;;AAUA,eAAeF,wBAAf","sourcesContent":["/**\r\n * Copyright (c) Nicolas Gallagher.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n */\r\nvar CSS_UNIT_RE = /^[+-]?\\d*(?:\\.\\d+)?(?:[Ee][+-]?\\d+)?(%|\\w*)/;\r\n\r\nvar getUnit = function getUnit(str) {\r\n  return str.match(CSS_UNIT_RE)[1];\r\n};\r\n\r\nvar isNumeric = function isNumeric(n) {\r\n  return !isNaN(parseFloat(n)) && isFinite(n);\r\n};\r\n\r\nvar multiplyStyleLengthValue = function multiplyStyleLengthValue(value, multiple) {\r\n  if (typeof value === 'string') {\r\n    var number = parseFloat(value) * multiple;\r\n    var unit = getUnit(value);\r\n    return \"\" + number + unit;\r\n  } else if (isNumeric(value)) {\r\n    return value * multiple;\r\n  }\r\n};\r\n\r\nexport default multiplyStyleLengthValue;"]},"metadata":{},"sourceType":"module"}