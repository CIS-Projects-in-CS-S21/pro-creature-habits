{"ast":null,"code":"export var customTypes = {\n  JSON: 'TEXT'\n};\nexport function _createTableColumns(columnMapping) {\n  return Object.entries(columnMapping).map(function (i) {\n    var type = i[1].type;\n    var parts = [i[0], customTypes[type] || type];\n\n    if (i[1].primary_key) {\n      parts.push('NOT NULL PRIMARY KEY AUTOINCREMENT');\n    } else {\n      if (i[1].unique) parts.push('UNIQUE');\n      if (i[1].not_null) parts.push('NOT NULL');\n    }\n\n    return parts.join(' ');\n  }).join(', ');\n}\nexport function createTable(tableName, columnMapping) {\n  var columns = _createTableColumns(columnMapping);\n\n  return \"CREATE TABLE IF NOT EXISTS \" + tableName + \" (\" + columns + \");\";\n}\nexport function dropTable(tableName) {\n  return \"DROP TABLE IF EXISTS \" + tableName + \";\";\n}\nexport default {\n  createTable: createTable,\n  dropTable: dropTable\n};","map":{"version":3,"sources":["C:/Users/Matt/Documents/GitHub/pro-creature-habits/node_modules/expo-sqlite-orm/src/query_builder/schema.js"],"names":["customTypes","JSON","_createTableColumns","columnMapping","Object","entries","map","i","type","parts","primary_key","push","unique","not_null","join","createTable","tableName","columns","dropTable"],"mappings":"AAAA,OAAO,IAAMA,WAAW,GAAG;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAApB;AAKP,OAAO,SAASC,mBAAT,CAA6BC,aAA7B,EAA4C;AACjD,SAAOC,MAAM,CAACC,OAAP,CAAeF,aAAf,EACJG,GADI,CACA,UAAAC,CAAC,EAAI;AACR,QAAMC,IAAI,GAAGD,CAAC,CAAC,CAAD,CAAD,CAAKC,IAAlB;AACA,QAAMC,KAAK,GAAG,CAACF,CAAC,CAAC,CAAD,CAAF,EAAOP,WAAW,CAACQ,IAAD,CAAX,IAAqBA,IAA5B,CAAd;;AACA,QAAID,CAAC,CAAC,CAAD,CAAD,CAAKG,WAAT,EAAsB;AACpBD,MAAAA,KAAK,CAACE,IAAN,CAAW,oCAAX;AACD,KAFD,MAEO;AACL,UAAIJ,CAAC,CAAC,CAAD,CAAD,CAAKK,MAAT,EAAiBH,KAAK,CAACE,IAAN,CAAW,QAAX;AACjB,UAAIJ,CAAC,CAAC,CAAD,CAAD,CAAKM,QAAT,EAAmBJ,KAAK,CAACE,IAAN,CAAW,UAAX;AACpB;;AACD,WAAOF,KAAK,CAACK,IAAN,CAAW,GAAX,CAAP;AACD,GAXI,EAYJA,IAZI,CAYC,IAZD,CAAP;AAaD;AAGD,OAAO,SAASC,WAAT,CAAqBC,SAArB,EAAgCb,aAAhC,EAA+C;AACpD,MAAMc,OAAO,GAAGf,mBAAmB,CAACC,aAAD,CAAnC;;AACA,yCAAqCa,SAArC,UAAmDC,OAAnD;AACD;AAGD,OAAO,SAASC,SAAT,CAAmBF,SAAnB,EAA8B;AACnC,mCAA+BA,SAA/B;AACD;AAED,eAAe;AAAED,EAAAA,WAAW,EAAXA,WAAF;AAAeG,EAAAA,SAAS,EAATA;AAAf,CAAf","sourcesContent":["export const customTypes = { JSON: 'TEXT' }\r\n\r\n/* Creates a string with the columns to create a table like: \r\n *  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, name TEXT, age INTEGER\r\n */\r\nexport function _createTableColumns(columnMapping) {\r\n  return Object.entries(columnMapping)\r\n    .map(i => {\r\n      const type = i[1].type\r\n      const parts = [i[0], customTypes[type] || type]\r\n      if (i[1].primary_key) {\r\n        parts.push('NOT NULL PRIMARY KEY AUTOINCREMENT')\r\n      } else {\r\n        if (i[1].unique) parts.push('UNIQUE')\r\n        if (i[1].not_null) parts.push('NOT NULL')\r\n      }\r\n      return parts.join(' ')\r\n    })\r\n    .join(', ')\r\n}\r\n\r\n// Creates the \"CREATE TABLE\" sql statement\r\nexport function createTable(tableName, columnMapping) {\r\n  const columns = _createTableColumns(columnMapping)\r\n  return `CREATE TABLE IF NOT EXISTS ${tableName} (${columns});`\r\n}\r\n\r\n// Creates the \"DROP TABLE\" sql statement\r\nexport function dropTable(tableName) {\r\n  return `DROP TABLE IF EXISTS ${tableName};`\r\n}\r\n\r\nexport default { createTable, dropTable }\r\n"]},"metadata":{},"sourceType":"module"}