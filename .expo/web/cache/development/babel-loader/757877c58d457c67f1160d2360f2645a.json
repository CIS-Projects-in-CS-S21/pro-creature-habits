{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport DataTypes from \"./DataTypes\";\nimport DatabaseLayer from \"./DatabaseLayer\";\n\nvar Repository = function () {\n  function Repository(database, tableName, columnMapping) {\n    _classCallCheck(this, Repository);\n\n    this.columnMapping = columnMapping;\n    this.databaseLayer = new DatabaseLayer(database, tableName);\n  }\n\n  _createClass(Repository, [{\n    key: \"createTable\",\n    value: function createTable() {\n      return this.databaseLayer.createTable(this.columnMapping);\n    }\n  }, {\n    key: \"dropTable\",\n    value: function dropTable() {\n      return this.databaseLayer.dropTable();\n    }\n  }, {\n    key: \"insert\",\n    value: function insert(_obj) {\n      var _this = this;\n\n      var obj = DataTypes.toDatabaseValue(this.columnMapping, this._sanitize(_obj));\n      return this.databaseLayer.insert(obj).then(function (res) {\n        return DataTypes.toModelValue(_this.columnMapping, res);\n      });\n    }\n  }, {\n    key: \"update\",\n    value: function update(_obj) {\n      var obj = DataTypes.toDatabaseValue(this.columnMapping, this._sanitize(_obj));\n      return this.databaseLayer.update(obj);\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy(id) {\n      return this.databaseLayer.destroy(id);\n    }\n  }, {\n    key: \"destroyAll\",\n    value: function destroyAll() {\n      return this.databaseLayer.destroyAll();\n    }\n  }, {\n    key: \"find\",\n    value: function find(id) {\n      var _this2 = this;\n\n      return this.databaseLayer.find(id).then(function (res) {\n        return res ? DataTypes.toModelValue(_this2.columnMapping, res) : null;\n      });\n    }\n  }, {\n    key: \"findBy\",\n    value: function findBy() {\n      var _this3 = this;\n\n      var where = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.databaseLayer.findBy(where).then(function (res) {\n        return res ? DataTypes.toModelValue(_this3.columnMapping, res) : null;\n      });\n    }\n  }, {\n    key: \"query\",\n    value: function query() {\n      var _this4 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.databaseLayer.query(options).then(function (res) {\n        return res.map(function (p) {\n          return DataTypes.toModelValue(_this4.columnMapping, p);\n        });\n      });\n    }\n  }, {\n    key: \"_sanitize\",\n    value: function _sanitize(obj) {\n      var allowedKeys = Object.keys(this.columnMapping);\n      return Object.keys(obj).reduce(function (ret, key) {\n        return allowedKeys.includes(key) ? _objectSpread(_objectSpread({}, ret), {}, _defineProperty({}, key, obj[key])) : ret;\n      }, {});\n    }\n  }]);\n\n  return Repository;\n}();\n\nexport { Repository as default };","map":{"version":3,"sources":["/Users/elianacohen/AndroidStudioProjects/pro-creature-habits/node_modules/expo-sqlite-orm/src/Repository.js"],"names":["DataTypes","DatabaseLayer","Repository","database","tableName","columnMapping","databaseLayer","createTable","dropTable","_obj","obj","toDatabaseValue","_sanitize","insert","then","res","toModelValue","update","id","destroy","destroyAll","find","where","findBy","options","query","map","p","allowedKeys","Object","keys","reduce","ret","key","includes"],"mappings":"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","sourcesContent":["import DataTypes from './DataTypes'\nimport DatabaseLayer from './DatabaseLayer'\n\nexport default class Repository {\n  constructor(database, tableName, columnMapping) {\n    this.columnMapping = columnMapping\n    this.databaseLayer = new DatabaseLayer(database, tableName)\n  }\n\n  createTable() {\n    return this.databaseLayer.createTable(this.columnMapping)\n  }\n\n  dropTable() {\n    return this.databaseLayer.dropTable()\n  }\n\n  insert(_obj) {\n    const obj = DataTypes.toDatabaseValue(this.columnMapping, this._sanitize(_obj))\n    return this.databaseLayer.insert(obj).then(res => DataTypes.toModelValue(this.columnMapping, res))\n  }\n\n  update(_obj) {\n    const obj = DataTypes.toDatabaseValue(this.columnMapping, this._sanitize(_obj))\n    return this.databaseLayer.update(obj)\n  }\n\n  destroy(id) {\n    return this.databaseLayer.destroy(id)\n  }\n\n  destroyAll() {\n    return this.databaseLayer.destroyAll()\n  }\n\n  find(id) {\n    return this.databaseLayer.find(id).then(res => (res ? DataTypes.toModelValue(this.columnMapping, res) : null))\n  }\n\n  findBy(where = {}) {\n    return this.databaseLayer.findBy(where).then(res => (res ? DataTypes.toModelValue(this.columnMapping, res) : null))\n  }\n\n  query(options = {}) {\n    return this.databaseLayer.query(options).then(res => res.map(p => DataTypes.toModelValue(this.columnMapping, p)))\n  }\n\n  _sanitize(obj) {\n    const allowedKeys = Object.keys(this.columnMapping)\n    return Object.keys(obj).reduce((ret, key) => {\n      return allowedKeys.includes(key) ? { ...ret, [key]: obj[key] } : ret\n    }, {})\n  }\n}\n"]},"metadata":{},"sourceType":"module"}