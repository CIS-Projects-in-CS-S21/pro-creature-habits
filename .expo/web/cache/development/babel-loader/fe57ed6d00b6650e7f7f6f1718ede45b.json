{"ast":null,"code":"import Dimensions from \"../../exports/Dimensions\";\nimport findNodeHandle from \"../../exports/findNodeHandle\";\nimport invariant from 'fbjs/lib/invariant';\nimport Platform from \"../../exports/Platform\";\nimport TextInputState from \"../TextInputState\";\nimport UIManager from \"../../exports/UIManager\";\nimport warning from 'fbjs/lib/warning';\nvar emptyObject = {};\nvar IS_ANIMATING_TOUCH_START_THRESHOLD_MS = 16;\nvar ScrollResponderMixin = {\n  scrollResponderMixinGetInitialState: function scrollResponderMixinGetInitialState() {\n    return {\n      isTouching: false,\n      lastMomentumScrollBeginTime: 0,\n      lastMomentumScrollEndTime: 0,\n      observedScrollSinceBecomingResponder: false,\n      becameResponderWhileAnimating: false\n    };\n  },\n  scrollResponderHandleScrollShouldSetResponder: function scrollResponderHandleScrollShouldSetResponder() {\n    return this.state.isTouching;\n  },\n  scrollResponderHandleStartShouldSetResponder: function scrollResponderHandleStartShouldSetResponder() {\n    return false;\n  },\n  scrollResponderHandleStartShouldSetResponderCapture: function scrollResponderHandleStartShouldSetResponderCapture(e) {\n    return this.scrollResponderIsAnimating();\n  },\n  scrollResponderHandleResponderReject: function scrollResponderHandleResponderReject() {\n    warning(false, \"ScrollView doesn't take rejection well - scrolls anyway\");\n  },\n  scrollResponderHandleTerminationRequest: function scrollResponderHandleTerminationRequest() {\n    return !this.state.observedScrollSinceBecomingResponder;\n  },\n  scrollResponderHandleTouchEnd: function scrollResponderHandleTouchEnd(e) {\n    var nativeEvent = e.nativeEvent;\n    this.state.isTouching = nativeEvent.touches.length !== 0;\n    this.props.onTouchEnd && this.props.onTouchEnd(e);\n  },\n  scrollResponderHandleResponderRelease: function scrollResponderHandleResponderRelease(e) {\n    this.props.onResponderRelease && this.props.onResponderRelease(e);\n    var currentlyFocusedTextInput = TextInputState.currentlyFocusedField();\n\n    if (!this.props.keyboardShouldPersistTaps && currentlyFocusedTextInput != null && e.target !== currentlyFocusedTextInput && !this.state.observedScrollSinceBecomingResponder && !this.state.becameResponderWhileAnimating) {\n      this.props.onScrollResponderKeyboardDismissed && this.props.onScrollResponderKeyboardDismissed(e);\n      TextInputState.blurTextInput(currentlyFocusedTextInput);\n    }\n  },\n  scrollResponderHandleScroll: function scrollResponderHandleScroll(e) {\n    this.state.observedScrollSinceBecomingResponder = true;\n    this.props.onScroll && this.props.onScroll(e);\n  },\n  scrollResponderHandleResponderGrant: function scrollResponderHandleResponderGrant(e) {\n    this.state.observedScrollSinceBecomingResponder = false;\n    this.props.onResponderGrant && this.props.onResponderGrant(e);\n    this.state.becameResponderWhileAnimating = this.scrollResponderIsAnimating();\n  },\n  scrollResponderHandleScrollBeginDrag: function scrollResponderHandleScrollBeginDrag(e) {\n    this.props.onScrollBeginDrag && this.props.onScrollBeginDrag(e);\n  },\n  scrollResponderHandleScrollEndDrag: function scrollResponderHandleScrollEndDrag(e) {\n    this.props.onScrollEndDrag && this.props.onScrollEndDrag(e);\n  },\n  scrollResponderHandleMomentumScrollBegin: function scrollResponderHandleMomentumScrollBegin(e) {\n    this.state.lastMomentumScrollBeginTime = Date.now();\n    this.props.onMomentumScrollBegin && this.props.onMomentumScrollBegin(e);\n  },\n  scrollResponderHandleMomentumScrollEnd: function scrollResponderHandleMomentumScrollEnd(e) {\n    this.state.lastMomentumScrollEndTime = Date.now();\n    this.props.onMomentumScrollEnd && this.props.onMomentumScrollEnd(e);\n  },\n  scrollResponderHandleTouchStart: function scrollResponderHandleTouchStart(e) {\n    this.state.isTouching = true;\n    this.props.onTouchStart && this.props.onTouchStart(e);\n  },\n  scrollResponderHandleTouchMove: function scrollResponderHandleTouchMove(e) {\n    this.props.onTouchMove && this.props.onTouchMove(e);\n  },\n  scrollResponderIsAnimating: function scrollResponderIsAnimating() {\n    var now = Date.now();\n    var timeSinceLastMomentumScrollEnd = now - this.state.lastMomentumScrollEndTime;\n    var isAnimating = timeSinceLastMomentumScrollEnd < IS_ANIMATING_TOUCH_START_THRESHOLD_MS || this.state.lastMomentumScrollEndTime < this.state.lastMomentumScrollBeginTime;\n    return isAnimating;\n  },\n  scrollResponderGetScrollableNode: function scrollResponderGetScrollableNode() {\n    return this.getScrollableNode ? this.getScrollableNode() : findNodeHandle(this);\n  },\n  scrollResponderScrollTo: function scrollResponderScrollTo(x, y, animated) {\n    if (typeof x === 'number') {\n      console.warn('`scrollResponderScrollTo(x, y, animated)` is deprecated. Use `scrollResponderScrollTo({x: 5, y: 5, animated: true})` instead.');\n    } else {\n      var _ref = x || emptyObject;\n\n      x = _ref.x;\n      y = _ref.y;\n      animated = _ref.animated;\n    }\n\n    var node = this.scrollResponderGetScrollableNode();\n    var left = x || 0;\n    var top = y || 0;\n\n    if (typeof node.scroll === 'function') {\n      node.scroll({\n        top: top,\n        left: left,\n        behavior: !animated ? 'auto' : 'smooth'\n      });\n    } else {\n      node.scrollLeft = left;\n      node.scrollTop = top;\n    }\n  },\n  scrollResponderZoomTo: function scrollResponderZoomTo(rect, animated) {\n    if (Platform.OS !== 'ios') {\n      invariant('zoomToRect is not implemented');\n    }\n  },\n  scrollResponderFlashScrollIndicators: function scrollResponderFlashScrollIndicators() {},\n  scrollResponderScrollNativeHandleToKeyboard: function scrollResponderScrollNativeHandleToKeyboard(nodeHandle, additionalOffset, preventNegativeScrollOffset) {\n    this.additionalScrollOffset = additionalOffset || 0;\n    this.preventNegativeScrollOffset = !!preventNegativeScrollOffset;\n    UIManager.measureLayout(nodeHandle, findNodeHandle(this.getInnerViewNode()), this.scrollResponderTextInputFocusError, this.scrollResponderInputMeasureAndScrollToKeyboard);\n  },\n  scrollResponderInputMeasureAndScrollToKeyboard: function scrollResponderInputMeasureAndScrollToKeyboard(left, top, width, height) {\n    var keyboardScreenY = Dimensions.get('window').height;\n\n    if (this.keyboardWillOpenTo) {\n      keyboardScreenY = this.keyboardWillOpenTo.endCoordinates.screenY;\n    }\n\n    var scrollOffsetY = top - keyboardScreenY + height + this.additionalScrollOffset;\n\n    if (this.preventNegativeScrollOffset) {\n      scrollOffsetY = Math.max(0, scrollOffsetY);\n    }\n\n    this.scrollResponderScrollTo({\n      x: 0,\n      y: scrollOffsetY,\n      animated: true\n    });\n    this.additionalOffset = 0;\n    this.preventNegativeScrollOffset = false;\n  },\n  scrollResponderTextInputFocusError: function scrollResponderTextInputFocusError(e) {\n    console.error('Error measuring text field: ', e);\n  },\n  UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {\n    this.keyboardWillOpenTo = null;\n    this.additionalScrollOffset = 0;\n  },\n  scrollResponderKeyboardWillShow: function scrollResponderKeyboardWillShow(e) {\n    this.keyboardWillOpenTo = e;\n    this.props.onKeyboardWillShow && this.props.onKeyboardWillShow(e);\n  },\n  scrollResponderKeyboardWillHide: function scrollResponderKeyboardWillHide(e) {\n    this.keyboardWillOpenTo = null;\n    this.props.onKeyboardWillHide && this.props.onKeyboardWillHide(e);\n  },\n  scrollResponderKeyboardDidShow: function scrollResponderKeyboardDidShow(e) {\n    if (e) {\n      this.keyboardWillOpenTo = e;\n    }\n\n    this.props.onKeyboardDidShow && this.props.onKeyboardDidShow(e);\n  },\n  scrollResponderKeyboardDidHide: function scrollResponderKeyboardDidHide(e) {\n    this.keyboardWillOpenTo = null;\n    this.props.onKeyboardDidHide && this.props.onKeyboardDidHide(e);\n  }\n};\nvar ScrollResponder = {\n  Mixin: ScrollResponderMixin\n};\nexport default ScrollResponder;","map":{"version":3,"sources":["C:/Users/Matt/Documents/GitHub/pro-creature-habits/node_modules/react-native-web/dist/modules/ScrollResponder/index.js"],"names":["Dimensions","findNodeHandle","invariant","Platform","TextInputState","UIManager","warning","emptyObject","IS_ANIMATING_TOUCH_START_THRESHOLD_MS","ScrollResponderMixin","scrollResponderMixinGetInitialState","isTouching","lastMomentumScrollBeginTime","lastMomentumScrollEndTime","observedScrollSinceBecomingResponder","becameResponderWhileAnimating","scrollResponderHandleScrollShouldSetResponder","state","scrollResponderHandleStartShouldSetResponder","scrollResponderHandleStartShouldSetResponderCapture","e","scrollResponderIsAnimating","scrollResponderHandleResponderReject","scrollResponderHandleTerminationRequest","scrollResponderHandleTouchEnd","nativeEvent","touches","length","props","onTouchEnd","scrollResponderHandleResponderRelease","onResponderRelease","currentlyFocusedTextInput","currentlyFocusedField","keyboardShouldPersistTaps","target","onScrollResponderKeyboardDismissed","blurTextInput","scrollResponderHandleScroll","onScroll","scrollResponderHandleResponderGrant","onResponderGrant","scrollResponderHandleScrollBeginDrag","onScrollBeginDrag","scrollResponderHandleScrollEndDrag","onScrollEndDrag","scrollResponderHandleMomentumScrollBegin","Date","now","onMomentumScrollBegin","scrollResponderHandleMomentumScrollEnd","onMomentumScrollEnd","scrollResponderHandleTouchStart","onTouchStart","scrollResponderHandleTouchMove","onTouchMove","timeSinceLastMomentumScrollEnd","isAnimating","scrollResponderGetScrollableNode","getScrollableNode","scrollResponderScrollTo","x","y","animated","console","warn","_ref","node","left","top","scroll","behavior","scrollLeft","scrollTop","scrollResponderZoomTo","rect","OS","scrollResponderFlashScrollIndicators","scrollResponderScrollNativeHandleToKeyboard","nodeHandle","additionalOffset","preventNegativeScrollOffset","additionalScrollOffset","measureLayout","getInnerViewNode","scrollResponderTextInputFocusError","scrollResponderInputMeasureAndScrollToKeyboard","width","height","keyboardScreenY","get","keyboardWillOpenTo","endCoordinates","screenY","scrollOffsetY","Math","max","error","UNSAFE_componentWillMount","scrollResponderKeyboardWillShow","onKeyboardWillShow","scrollResponderKeyboardWillHide","onKeyboardWillHide","scrollResponderKeyboardDidShow","onKeyboardDidShow","scrollResponderKeyboardDidHide","onKeyboardDidHide","ScrollResponder","Mixin"],"mappings":"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","sourcesContent":["/**\r\n * Copyright (c) Nicolas Gallagher.\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n */\r\nimport Dimensions from '../../exports/Dimensions';\r\nimport findNodeHandle from '../../exports/findNodeHandle';\r\nimport invariant from 'fbjs/lib/invariant';\r\nimport Platform from '../../exports/Platform';\r\nimport TextInputState from '../TextInputState';\r\nimport UIManager from '../../exports/UIManager';\r\nimport warning from 'fbjs/lib/warning';\r\n/**\r\n * Mixin that can be integrated in order to handle scrolling that plays well\r\n * with `ResponderEventPlugin`. Integrate with your platform specific scroll\r\n * views, or even your custom built (every-frame animating) scroll views so that\r\n * all of these systems play well with the `ResponderEventPlugin`.\r\n *\r\n * iOS scroll event timing nuances:\r\n * ===============================\r\n *\r\n *\r\n * Scrolling without bouncing, if you touch down:\r\n * -------------------------------\r\n *\r\n * 1. `onMomentumScrollBegin` (when animation begins after letting up)\r\n *    ... physical touch starts ...\r\n * 2. `onTouchStartCapture`   (when you press down to stop the scroll)\r\n * 3. `onTouchStart`          (same, but bubble phase)\r\n * 4. `onResponderRelease`    (when lifting up - you could pause forever before * lifting)\r\n * 5. `onMomentumScrollEnd`\r\n *\r\n *\r\n * Scrolling with bouncing, if you touch down:\r\n * -------------------------------\r\n *\r\n * 1. `onMomentumScrollBegin` (when animation begins after letting up)\r\n *    ... bounce begins ...\r\n *    ... some time elapses ...\r\n *    ... physical touch during bounce ...\r\n * 2. `onMomentumScrollEnd`   (Makes no sense why this occurs first during bounce)\r\n * 3. `onTouchStartCapture`   (immediately after `onMomentumScrollEnd`)\r\n * 4. `onTouchStart`          (same, but bubble phase)\r\n * 5. `onTouchEnd`            (You could hold the touch start for a long time)\r\n * 6. `onMomentumScrollBegin` (When releasing the view starts bouncing back)\r\n *\r\n * So when we receive an `onTouchStart`, how can we tell if we are touching\r\n * *during* an animation (which then causes the animation to stop)? The only way\r\n * to tell is if the `touchStart` occurred immediately after the\r\n * `onMomentumScrollEnd`.\r\n *\r\n * This is abstracted out for you, so you can just call this.scrollResponderIsAnimating() if\r\n * necessary\r\n *\r\n * `ScrollResponder` also includes logic for blurring a currently focused input\r\n * if one is focused while scrolling. The `ScrollResponder` is a natural place\r\n * to put this logic since it can support not dismissing the keyboard while\r\n * scrolling, unless a recognized \"tap\"-like gesture has occurred.\r\n *\r\n * The public lifecycle API includes events for keyboard interaction, responder\r\n * interaction, and scrolling (among others). The keyboard callbacks\r\n * `onKeyboardWill/Did/*` are *global* events, but are invoked on scroll\r\n * responder's props so that you can guarantee that the scroll responder's\r\n * internal state has been updated accordingly (and deterministically) by\r\n * the time the props callbacks are invoke. Otherwise, you would always wonder\r\n * if the scroll responder is currently in a state where it recognizes new\r\n * keyboard positions etc. If coordinating scrolling with keyboard movement,\r\n * *always* use these hooks instead of listening to your own global keyboard\r\n * events.\r\n *\r\n * Public keyboard lifecycle API: (props callbacks)\r\n *\r\n * Standard Keyboard Appearance Sequence:\r\n *\r\n *   this.props.onKeyboardWillShow\r\n *   this.props.onKeyboardDidShow\r\n *\r\n * `onScrollResponderKeyboardDismissed` will be invoked if an appropriate\r\n * tap inside the scroll responder's scrollable region was responsible\r\n * for the dismissal of the keyboard. There are other reasons why the\r\n * keyboard could be dismissed.\r\n *\r\n *   this.props.onScrollResponderKeyboardDismissed\r\n *\r\n * Standard Keyboard Hide Sequence:\r\n *\r\n *   this.props.onKeyboardWillHide\r\n *   this.props.onKeyboardDidHide\r\n */\r\n\r\nvar emptyObject = {};\r\nvar IS_ANIMATING_TOUCH_START_THRESHOLD_MS = 16;\r\nvar ScrollResponderMixin = {\r\n  // mixins: [Subscribable.Mixin],\r\n  scrollResponderMixinGetInitialState: function scrollResponderMixinGetInitialState() {\r\n    return {\r\n      isTouching: false,\r\n      lastMomentumScrollBeginTime: 0,\r\n      lastMomentumScrollEndTime: 0,\r\n      // Reset to false every time becomes responder. This is used to:\r\n      // - Determine if the scroll view has been scrolled and therefore should\r\n      // refuse to give up its responder lock.\r\n      // - Determine if releasing should dismiss the keyboard when we are in\r\n      // tap-to-dismiss mode (!this.props.keyboardShouldPersistTaps).\r\n      observedScrollSinceBecomingResponder: false,\r\n      becameResponderWhileAnimating: false\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Invoke this from an `onScroll` event.\r\n   */\r\n  scrollResponderHandleScrollShouldSetResponder: function scrollResponderHandleScrollShouldSetResponder() {\r\n    return this.state.isTouching;\r\n  },\r\n\r\n  /**\r\n   * Merely touch starting is not sufficient for a scroll view to become the\r\n   * responder. Being the \"responder\" means that the very next touch move/end\r\n   * event will result in an action/movement.\r\n   *\r\n   * Invoke this from an `onStartShouldSetResponder` event.\r\n   *\r\n   * `onStartShouldSetResponder` is used when the next move/end will trigger\r\n   * some UI movement/action, but when you want to yield priority to views\r\n   * nested inside of the view.\r\n   *\r\n   * There may be some cases where scroll views actually should return `true`\r\n   * from `onStartShouldSetResponder`: Any time we are detecting a standard tap\r\n   * that gives priority to nested views.\r\n   *\r\n   * - If a single tap on the scroll view triggers an action such as\r\n   *   recentering a map style view yet wants to give priority to interaction\r\n   *   views inside (such as dropped pins or labels), then we would return true\r\n   *   from this method when there is a single touch.\r\n   *\r\n   * - Similar to the previous case, if a two finger \"tap\" should trigger a\r\n   *   zoom, we would check the `touches` count, and if `>= 2`, we would return\r\n   *   true.\r\n   *\r\n   */\r\n  scrollResponderHandleStartShouldSetResponder: function scrollResponderHandleStartShouldSetResponder() {\r\n    return false;\r\n  },\r\n\r\n  /**\r\n   * There are times when the scroll view wants to become the responder\r\n   * (meaning respond to the next immediate `touchStart/touchEnd`), in a way\r\n   * that *doesn't* give priority to nested views (hence the capture phase):\r\n   *\r\n   * - Currently animating.\r\n   * - Tapping anywhere that is not the focused input, while the keyboard is\r\n   *   up (which should dismiss the keyboard).\r\n   *\r\n   * Invoke this from an `onStartShouldSetResponderCapture` event.\r\n   */\r\n  scrollResponderHandleStartShouldSetResponderCapture: function scrollResponderHandleStartShouldSetResponderCapture(e) {\r\n    // First see if we want to eat taps while the keyboard is up\r\n    // var currentlyFocusedTextInput = TextInputState.currentlyFocusedField();\r\n    // if (!this.props.keyboardShouldPersistTaps &&\r\n    //   currentlyFocusedTextInput != null &&\r\n    //   e.target !== currentlyFocusedTextInput) {\r\n    //   return true;\r\n    // }\r\n    return this.scrollResponderIsAnimating();\r\n  },\r\n\r\n  /**\r\n   * Invoke this from an `onResponderReject` event.\r\n   *\r\n   * Some other element is not yielding its role as responder. Normally, we'd\r\n   * just disable the `UIScrollView`, but a touch has already began on it, the\r\n   * `UIScrollView` will not accept being disabled after that. The easiest\r\n   * solution for now is to accept the limitation of disallowing this\r\n   * altogether. To improve this, find a way to disable the `UIScrollView` after\r\n   * a touch has already started.\r\n   */\r\n  scrollResponderHandleResponderReject: function scrollResponderHandleResponderReject() {\r\n    warning(false, \"ScrollView doesn't take rejection well - scrolls anyway\");\r\n  },\r\n\r\n  /**\r\n   * We will allow the scroll view to give up its lock iff it acquired the lock\r\n   * during an animation. This is a very useful default that happens to satisfy\r\n   * many common user experiences.\r\n   *\r\n   * - Stop a scroll on the left edge, then turn that into an outer view's\r\n   *   backswipe.\r\n   * - Stop a scroll mid-bounce at the top, continue pulling to have the outer\r\n   *   view dismiss.\r\n   * - However, without catching the scroll view mid-bounce (while it is\r\n   *   motionless), if you drag far enough for the scroll view to become\r\n   *   responder (and therefore drag the scroll view a bit), any backswipe\r\n   *   navigation of a swipe gesture higher in the view hierarchy, should be\r\n   *   rejected.\r\n   */\r\n  scrollResponderHandleTerminationRequest: function scrollResponderHandleTerminationRequest() {\r\n    return !this.state.observedScrollSinceBecomingResponder;\r\n  },\r\n\r\n  /**\r\n   * Invoke this from an `onTouchEnd` event.\r\n   *\r\n   * @param {SyntheticEvent} e Event.\r\n   */\r\n  scrollResponderHandleTouchEnd: function scrollResponderHandleTouchEnd(e) {\r\n    var nativeEvent = e.nativeEvent;\r\n    this.state.isTouching = nativeEvent.touches.length !== 0;\r\n    this.props.onTouchEnd && this.props.onTouchEnd(e);\r\n  },\r\n\r\n  /**\r\n   * Invoke this from an `onResponderRelease` event.\r\n   */\r\n  scrollResponderHandleResponderRelease: function scrollResponderHandleResponderRelease(e) {\r\n    this.props.onResponderRelease && this.props.onResponderRelease(e); // By default scroll views will unfocus a textField\r\n    // if another touch occurs outside of it\r\n\r\n    var currentlyFocusedTextInput = TextInputState.currentlyFocusedField();\r\n\r\n    if (!this.props.keyboardShouldPersistTaps && currentlyFocusedTextInput != null && e.target !== currentlyFocusedTextInput && !this.state.observedScrollSinceBecomingResponder && !this.state.becameResponderWhileAnimating) {\r\n      this.props.onScrollResponderKeyboardDismissed && this.props.onScrollResponderKeyboardDismissed(e);\r\n      TextInputState.blurTextInput(currentlyFocusedTextInput);\r\n    }\r\n  },\r\n  scrollResponderHandleScroll: function scrollResponderHandleScroll(e) {\r\n    this.state.observedScrollSinceBecomingResponder = true;\r\n    this.props.onScroll && this.props.onScroll(e);\r\n  },\r\n\r\n  /**\r\n   * Invoke this from an `onResponderGrant` event.\r\n   */\r\n  scrollResponderHandleResponderGrant: function scrollResponderHandleResponderGrant(e) {\r\n    this.state.observedScrollSinceBecomingResponder = false;\r\n    this.props.onResponderGrant && this.props.onResponderGrant(e);\r\n    this.state.becameResponderWhileAnimating = this.scrollResponderIsAnimating();\r\n  },\r\n\r\n  /**\r\n   * Unfortunately, `onScrollBeginDrag` also fires when *stopping* the scroll\r\n   * animation, and there's not an easy way to distinguish a drag vs. stopping\r\n   * momentum.\r\n   *\r\n   * Invoke this from an `onScrollBeginDrag` event.\r\n   */\r\n  scrollResponderHandleScrollBeginDrag: function scrollResponderHandleScrollBeginDrag(e) {\r\n    this.props.onScrollBeginDrag && this.props.onScrollBeginDrag(e);\r\n  },\r\n\r\n  /**\r\n   * Invoke this from an `onScrollEndDrag` event.\r\n   */\r\n  scrollResponderHandleScrollEndDrag: function scrollResponderHandleScrollEndDrag(e) {\r\n    this.props.onScrollEndDrag && this.props.onScrollEndDrag(e);\r\n  },\r\n\r\n  /**\r\n   * Invoke this from an `onMomentumScrollBegin` event.\r\n   */\r\n  scrollResponderHandleMomentumScrollBegin: function scrollResponderHandleMomentumScrollBegin(e) {\r\n    this.state.lastMomentumScrollBeginTime = Date.now();\r\n    this.props.onMomentumScrollBegin && this.props.onMomentumScrollBegin(e);\r\n  },\r\n\r\n  /**\r\n   * Invoke this from an `onMomentumScrollEnd` event.\r\n   */\r\n  scrollResponderHandleMomentumScrollEnd: function scrollResponderHandleMomentumScrollEnd(e) {\r\n    this.state.lastMomentumScrollEndTime = Date.now();\r\n    this.props.onMomentumScrollEnd && this.props.onMomentumScrollEnd(e);\r\n  },\r\n\r\n  /**\r\n   * Invoke this from an `onTouchStart` event.\r\n   *\r\n   * Since we know that the `SimpleEventPlugin` occurs later in the plugin\r\n   * order, after `ResponderEventPlugin`, we can detect that we were *not*\r\n   * permitted to be the responder (presumably because a contained view became\r\n   * responder). The `onResponderReject` won't fire in that case - it only\r\n   * fires when a *current* responder rejects our request.\r\n   *\r\n   * @param {SyntheticEvent} e Touch Start event.\r\n   */\r\n  scrollResponderHandleTouchStart: function scrollResponderHandleTouchStart(e) {\r\n    this.state.isTouching = true;\r\n    this.props.onTouchStart && this.props.onTouchStart(e);\r\n  },\r\n\r\n  /**\r\n   * Invoke this from an `onTouchMove` event.\r\n   *\r\n   * Since we know that the `SimpleEventPlugin` occurs later in the plugin\r\n   * order, after `ResponderEventPlugin`, we can detect that we were *not*\r\n   * permitted to be the responder (presumably because a contained view became\r\n   * responder). The `onResponderReject` won't fire in that case - it only\r\n   * fires when a *current* responder rejects our request.\r\n   *\r\n   * @param {SyntheticEvent} e Touch Start event.\r\n   */\r\n  scrollResponderHandleTouchMove: function scrollResponderHandleTouchMove(e) {\r\n    this.props.onTouchMove && this.props.onTouchMove(e);\r\n  },\r\n\r\n  /**\r\n   * A helper function for this class that lets us quickly determine if the\r\n   * view is currently animating. This is particularly useful to know when\r\n   * a touch has just started or ended.\r\n   */\r\n  scrollResponderIsAnimating: function scrollResponderIsAnimating() {\r\n    var now = Date.now();\r\n    var timeSinceLastMomentumScrollEnd = now - this.state.lastMomentumScrollEndTime;\r\n    var isAnimating = timeSinceLastMomentumScrollEnd < IS_ANIMATING_TOUCH_START_THRESHOLD_MS || this.state.lastMomentumScrollEndTime < this.state.lastMomentumScrollBeginTime;\r\n    return isAnimating;\r\n  },\r\n\r\n  /**\r\n   * Returns the node that represents native view that can be scrolled.\r\n   * Components can pass what node to use by defining a `getScrollableNode`\r\n   * function otherwise `this` is used.\r\n   */\r\n  scrollResponderGetScrollableNode: function scrollResponderGetScrollableNode() {\r\n    return this.getScrollableNode ? this.getScrollableNode() : findNodeHandle(this);\r\n  },\r\n\r\n  /**\r\n   * A helper function to scroll to a specific point in the scrollview.\r\n   * This is currently used to help focus on child textviews, but can also\r\n   * be used to quickly scroll to any element we want to focus. Syntax:\r\n   *\r\n   * scrollResponderScrollTo(options: {x: number = 0; y: number = 0; animated: boolean = true})\r\n   *\r\n   * Note: The weird argument signature is due to the fact that, for historical reasons,\r\n   * the function also accepts separate arguments as as alternative to the options object.\r\n   * This is deprecated due to ambiguity (y before x), and SHOULD NOT BE USED.\r\n   */\r\n  scrollResponderScrollTo: function scrollResponderScrollTo(x, y, animated) {\r\n    if (typeof x === 'number') {\r\n      console.warn('`scrollResponderScrollTo(x, y, animated)` is deprecated. Use `scrollResponderScrollTo({x: 5, y: 5, animated: true})` instead.');\r\n    } else {\r\n      var _ref = x || emptyObject;\r\n\r\n      x = _ref.x;\r\n      y = _ref.y;\r\n      animated = _ref.animated;\r\n    }\r\n\r\n    var node = this.scrollResponderGetScrollableNode();\r\n    var left = x || 0;\r\n    var top = y || 0;\r\n\r\n    if (typeof node.scroll === 'function') {\r\n      node.scroll({\r\n        top: top,\r\n        left: left,\r\n        behavior: !animated ? 'auto' : 'smooth'\r\n      });\r\n    } else {\r\n      node.scrollLeft = left;\r\n      node.scrollTop = top;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * A helper function to zoom to a specific rect in the scrollview. The argument has the shape\r\n   * {x: number; y: number; width: number; height: number; animated: boolean = true}\r\n   *\r\n   * @platform ios\r\n   */\r\n  scrollResponderZoomTo: function scrollResponderZoomTo(rect, animated) // deprecated, put this inside the rect argument instead\r\n  {\r\n    if (Platform.OS !== 'ios') {\r\n      invariant('zoomToRect is not implemented');\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Displays the scroll indicators momentarily.\r\n   */\r\n  scrollResponderFlashScrollIndicators: function scrollResponderFlashScrollIndicators() {},\r\n\r\n  /**\r\n   * This method should be used as the callback to onFocus in a TextInputs'\r\n   * parent view. Note that any module using this mixin needs to return\r\n   * the parent view's ref in getScrollViewRef() in order to use this method.\r\n   * @param {any} nodeHandle The TextInput node handle\r\n   * @param {number} additionalOffset The scroll view's top \"contentInset\".\r\n   *        Default is 0.\r\n   * @param {bool} preventNegativeScrolling Whether to allow pulling the content\r\n   *        down to make it meet the keyboard's top. Default is false.\r\n   */\r\n  scrollResponderScrollNativeHandleToKeyboard: function scrollResponderScrollNativeHandleToKeyboard(nodeHandle, additionalOffset, preventNegativeScrollOffset) {\r\n    this.additionalScrollOffset = additionalOffset || 0;\r\n    this.preventNegativeScrollOffset = !!preventNegativeScrollOffset;\r\n    UIManager.measureLayout(nodeHandle, findNodeHandle(this.getInnerViewNode()), this.scrollResponderTextInputFocusError, this.scrollResponderInputMeasureAndScrollToKeyboard);\r\n  },\r\n\r\n  /**\r\n   * The calculations performed here assume the scroll view takes up the entire\r\n   * screen - even if has some content inset. We then measure the offsets of the\r\n   * keyboard, and compensate both for the scroll view's \"contentInset\".\r\n   *\r\n   * @param {number} left Position of input w.r.t. table view.\r\n   * @param {number} top Position of input w.r.t. table view.\r\n   * @param {number} width Width of the text input.\r\n   * @param {number} height Height of the text input.\r\n   */\r\n  scrollResponderInputMeasureAndScrollToKeyboard: function scrollResponderInputMeasureAndScrollToKeyboard(left, top, width, height) {\r\n    var keyboardScreenY = Dimensions.get('window').height;\r\n\r\n    if (this.keyboardWillOpenTo) {\r\n      keyboardScreenY = this.keyboardWillOpenTo.endCoordinates.screenY;\r\n    }\r\n\r\n    var scrollOffsetY = top - keyboardScreenY + height + this.additionalScrollOffset; // By default, this can scroll with negative offset, pulling the content\r\n    // down so that the target component's bottom meets the keyboard's top.\r\n    // If requested otherwise, cap the offset at 0 minimum to avoid content\r\n    // shifting down.\r\n\r\n    if (this.preventNegativeScrollOffset) {\r\n      scrollOffsetY = Math.max(0, scrollOffsetY);\r\n    }\r\n\r\n    this.scrollResponderScrollTo({\r\n      x: 0,\r\n      y: scrollOffsetY,\r\n      animated: true\r\n    });\r\n    this.additionalOffset = 0;\r\n    this.preventNegativeScrollOffset = false;\r\n  },\r\n  scrollResponderTextInputFocusError: function scrollResponderTextInputFocusError(e) {\r\n    console.error('Error measuring text field: ', e);\r\n  },\r\n\r\n  /**\r\n   * `componentWillMount` is the closest thing to a  standard \"constructor\" for\r\n   * React components.\r\n   *\r\n   * The `keyboardWillShow` is called before input focus.\r\n   */\r\n  UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {\r\n    this.keyboardWillOpenTo = null;\r\n    this.additionalScrollOffset = 0; // this.addListenerOn(RCTDeviceEventEmitter, 'keyboardWillShow', this.scrollResponderKeyboardWillShow);\r\n    // this.addListenerOn(RCTDeviceEventEmitter, 'keyboardWillHide', this.scrollResponderKeyboardWillHide);\r\n    // this.addListenerOn(RCTDeviceEventEmitter, 'keyboardDidShow', this.scrollResponderKeyboardDidShow);\r\n    // this.addListenerOn(RCTDeviceEventEmitter, 'keyboardDidHide', this.scrollResponderKeyboardDidHide);\r\n  },\r\n\r\n  /**\r\n   * Warning, this may be called several times for a single keyboard opening.\r\n   * It's best to store the information in this method and then take any action\r\n   * at a later point (either in `keyboardDidShow` or other).\r\n   *\r\n   * Here's the order that events occur in:\r\n   * - focus\r\n   * - willShow {startCoordinates, endCoordinates} several times\r\n   * - didShow several times\r\n   * - blur\r\n   * - willHide {startCoordinates, endCoordinates} several times\r\n   * - didHide several times\r\n   *\r\n   * The `ScrollResponder` providesModule callbacks for each of these events.\r\n   * Even though any user could have easily listened to keyboard events\r\n   * themselves, using these `props` callbacks ensures that ordering of events\r\n   * is consistent - and not dependent on the order that the keyboard events are\r\n   * subscribed to. This matters when telling the scroll view to scroll to where\r\n   * the keyboard is headed - the scroll responder better have been notified of\r\n   * the keyboard destination before being instructed to scroll to where the\r\n   * keyboard will be. Stick to the `ScrollResponder` callbacks, and everything\r\n   * will work.\r\n   *\r\n   * WARNING: These callbacks will fire even if a keyboard is displayed in a\r\n   * different navigation pane. Filter out the events to determine if they are\r\n   * relevant to you. (For example, only if you receive these callbacks after\r\n   * you had explicitly focused a node etc).\r\n   */\r\n  scrollResponderKeyboardWillShow: function scrollResponderKeyboardWillShow(e) {\r\n    this.keyboardWillOpenTo = e;\r\n    this.props.onKeyboardWillShow && this.props.onKeyboardWillShow(e);\r\n  },\r\n  scrollResponderKeyboardWillHide: function scrollResponderKeyboardWillHide(e) {\r\n    this.keyboardWillOpenTo = null;\r\n    this.props.onKeyboardWillHide && this.props.onKeyboardWillHide(e);\r\n  },\r\n  scrollResponderKeyboardDidShow: function scrollResponderKeyboardDidShow(e) {\r\n    // TODO(7693961): The event for DidShow is not available on iOS yet.\r\n    // Use the one from WillShow and do not assign.\r\n    if (e) {\r\n      this.keyboardWillOpenTo = e;\r\n    }\r\n\r\n    this.props.onKeyboardDidShow && this.props.onKeyboardDidShow(e);\r\n  },\r\n  scrollResponderKeyboardDidHide: function scrollResponderKeyboardDidHide(e) {\r\n    this.keyboardWillOpenTo = null;\r\n    this.props.onKeyboardDidHide && this.props.onKeyboardDidHide(e);\r\n  }\r\n};\r\nvar ScrollResponder = {\r\n  Mixin: ScrollResponderMixin\r\n};\r\nexport default ScrollResponder;"]},"metadata":{},"sourceType":"module"}