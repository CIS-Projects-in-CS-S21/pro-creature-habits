{"ast":null,"code":"'use strict';\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nimport EventEmitter from \"../emitter/EventEmitter\";\nimport RCTDeviceEventEmitter from \"./RCTDeviceEventEmitter\";\nimport invariant from 'fbjs/lib/invariant';\n\nvar NativeEventEmitter = function (_EventEmitter) {\n  _inheritsLoose(NativeEventEmitter, _EventEmitter);\n\n  function NativeEventEmitter(nativeModule) {\n    return _EventEmitter.call(this, RCTDeviceEventEmitter.sharedSubscriber) || this;\n  }\n\n  var _proto = NativeEventEmitter.prototype;\n\n  _proto.addListener = function addListener(eventType, listener, context) {\n    if (this._nativeModule != null) {\n      this._nativeModule.addListener(eventType);\n    }\n\n    return _EventEmitter.prototype.addListener.call(this, eventType, listener, context);\n  };\n\n  _proto.removeAllListeners = function removeAllListeners(eventType) {\n    invariant(eventType, 'eventType argument is required.');\n    var count = this.listeners(eventType).length;\n\n    if (this._nativeModule != null) {\n      this._nativeModule.removeListeners(count);\n    }\n\n    _EventEmitter.prototype.removeAllListeners.call(this, eventType);\n  };\n\n  _proto.removeSubscription = function removeSubscription(subscription) {\n    if (this._nativeModule != null) {\n      this._nativeModule.removeListeners(1);\n    }\n\n    _EventEmitter.prototype.removeSubscription.call(this, subscription);\n  };\n\n  return NativeEventEmitter;\n}(EventEmitter);\n\nexport default NativeEventEmitter;","map":{"version":3,"sources":["C:/Users/Matt/Documents/GitHub/pro-creature-habits/node_modules/react-native-web/dist/vendor/react-native/NativeEventEmitter/index.js"],"names":["_inheritsLoose","subClass","superClass","prototype","Object","create","constructor","__proto__","EventEmitter","RCTDeviceEventEmitter","invariant","NativeEventEmitter","_EventEmitter","nativeModule","call","sharedSubscriber","_proto","addListener","eventType","listener","context","_nativeModule","removeAllListeners","count","listeners","length","removeListeners","removeSubscription","subscription"],"mappings":"AASA;;AAEA,SAASA,cAAT,CAAwBC,QAAxB,EAAkCC,UAAlC,EAA8C;AAAED,EAAAA,QAAQ,CAACE,SAAT,GAAqBC,MAAM,CAACC,MAAP,CAAcH,UAAU,CAACC,SAAzB,CAArB;AAA0DF,EAAAA,QAAQ,CAACE,SAAT,CAAmBG,WAAnB,GAAiCL,QAAjC;AAA2CA,EAAAA,QAAQ,CAACM,SAAT,GAAqBL,UAArB;AAAkC;;AAEvL,OAAOM,YAAP;AACA,OAAOC,qBAAP;AACA,OAAOC,SAAP,MAAsB,oBAAtB;;AAMA,IAAIC,kBAAkB,GAEtB,UAAUC,aAAV,EAAyB;AACvBZ,EAAAA,cAAc,CAACW,kBAAD,EAAqBC,aAArB,CAAd;;AAEA,WAASD,kBAAT,CAA4BE,YAA5B,EAA0C;AACxC,WAAOD,aAAa,CAACE,IAAd,CAAmB,IAAnB,EAAyBL,qBAAqB,CAACM,gBAA/C,KAAoE,IAA3E;AACD;;AAED,MAAIC,MAAM,GAAGL,kBAAkB,CAACR,SAAhC;;AAEAa,EAAAA,MAAM,CAACC,WAAP,GAAqB,SAASA,WAAT,CAAqBC,SAArB,EAAgCC,QAAhC,EAA0CC,OAA1C,EAAmD;AACtE,QAAI,KAAKC,aAAL,IAAsB,IAA1B,EAAgC;AAC9B,WAAKA,aAAL,CAAmBJ,WAAnB,CAA+BC,SAA/B;AACD;;AAED,WAAON,aAAa,CAACT,SAAd,CAAwBc,WAAxB,CAAoCH,IAApC,CAAyC,IAAzC,EAA+CI,SAA/C,EAA0DC,QAA1D,EAAoEC,OAApE,CAAP;AACD,GAND;;AAQAJ,EAAAA,MAAM,CAACM,kBAAP,GAA4B,SAASA,kBAAT,CAA4BJ,SAA5B,EAAuC;AACjER,IAAAA,SAAS,CAACQ,SAAD,EAAY,iCAAZ,CAAT;AACA,QAAIK,KAAK,GAAG,KAAKC,SAAL,CAAeN,SAAf,EAA0BO,MAAtC;;AAEA,QAAI,KAAKJ,aAAL,IAAsB,IAA1B,EAAgC;AAC9B,WAAKA,aAAL,CAAmBK,eAAnB,CAAmCH,KAAnC;AACD;;AAEDX,IAAAA,aAAa,CAACT,SAAd,CAAwBmB,kBAAxB,CAA2CR,IAA3C,CAAgD,IAAhD,EAAsDI,SAAtD;AACD,GATD;;AAWAF,EAAAA,MAAM,CAACW,kBAAP,GAA4B,SAASA,kBAAT,CAA4BC,YAA5B,EAA0C;AACpE,QAAI,KAAKP,aAAL,IAAsB,IAA1B,EAAgC;AAC9B,WAAKA,aAAL,CAAmBK,eAAnB,CAAmC,CAAnC;AACD;;AAEDd,IAAAA,aAAa,CAACT,SAAd,CAAwBwB,kBAAxB,CAA2Cb,IAA3C,CAAgD,IAAhD,EAAsDc,YAAtD;AACD,GAND;;AAQA,SAAOjB,kBAAP;AACD,CArCD,CAqCEH,YArCF,CAFA;;AAyCA,eAAeG,kBAAf","sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * \r\n */\r\n'use strict';\r\n\r\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\r\n\r\nimport EventEmitter from '../emitter/EventEmitter';\r\nimport RCTDeviceEventEmitter from './RCTDeviceEventEmitter';\r\nimport invariant from 'fbjs/lib/invariant';\r\n\r\n/**\r\n * Abstract base class for implementing event-emitting modules. This implements\r\n * a subset of the standard EventEmitter node module API.\r\n */\r\nvar NativeEventEmitter =\r\n/*#__PURE__*/\r\nfunction (_EventEmitter) {\r\n  _inheritsLoose(NativeEventEmitter, _EventEmitter);\r\n\r\n  function NativeEventEmitter(nativeModule) {\r\n    return _EventEmitter.call(this, RCTDeviceEventEmitter.sharedSubscriber) || this;\r\n  }\r\n\r\n  var _proto = NativeEventEmitter.prototype;\r\n\r\n  _proto.addListener = function addListener(eventType, listener, context) {\r\n    if (this._nativeModule != null) {\r\n      this._nativeModule.addListener(eventType);\r\n    }\r\n\r\n    return _EventEmitter.prototype.addListener.call(this, eventType, listener, context);\r\n  };\r\n\r\n  _proto.removeAllListeners = function removeAllListeners(eventType) {\r\n    invariant(eventType, 'eventType argument is required.');\r\n    var count = this.listeners(eventType).length;\r\n\r\n    if (this._nativeModule != null) {\r\n      this._nativeModule.removeListeners(count);\r\n    }\r\n\r\n    _EventEmitter.prototype.removeAllListeners.call(this, eventType);\r\n  };\r\n\r\n  _proto.removeSubscription = function removeSubscription(subscription) {\r\n    if (this._nativeModule != null) {\r\n      this._nativeModule.removeListeners(1);\r\n    }\r\n\r\n    _EventEmitter.prototype.removeSubscription.call(this, subscription);\r\n  };\r\n\r\n  return NativeEventEmitter;\r\n}(EventEmitter);\r\n\r\nexport default NativeEventEmitter;"]},"metadata":{},"sourceType":"module"}