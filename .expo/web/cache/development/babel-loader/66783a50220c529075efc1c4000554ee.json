{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/Users/elianacohen/AndroidStudioProjects/pro-creature-habits/src/screens/SignIn.js\";\nimport React, { useCallback } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport UserInfo from \"../databases/UserInfo\";\nimport { OFF } from \"../redux/modalVisible\";\nimport { RESET_BUTTON_PRESSED } from \"../App\";\nimport { useDispatch } from \"react-redux\";\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#406BE9'\n  },\n  text: {\n    color: 'white'\n  },\n  input: {\n    width: \"85%\",\n    backgroundColor: \"white\",\n    marginBottom: 10,\n    padding: 15,\n    borderRadius: 5\n  },\n  buttonsContainer: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    padding: 10\n  },\n  button: {\n    padding: 10,\n    width: \"25%\",\n    backgroundColor: '#402688',\n    alignItems: 'center',\n    margin: 10,\n    borderRadius: 5\n  }\n});\nexport default function SignInScreen(_ref) {\n  var onSignIn = _ref.onSignIn,\n      navigation = _ref.navigation;\n  var dispatch = useDispatch();\n  UserInfo.createTable();\n  var checkLogin = useCallback(function _callee(username, password) {\n    var authenticated, user;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            authenticated = false;\n            _context.prev = 1;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(UserInfo.findBy({\n              username_eq: username\n            }));\n\n          case 4:\n            user = _context.sent;\n\n            if (password == user.password) {\n              console.log(\"Correct\");\n              authenticated = true;\n              onSignIn();\n            } else {\n              console.log(\"Wrong Username/Password\");\n            }\n\n            _context.next = 11;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](1);\n            console.log(\"User not found\");\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 8]], Promise);\n  }, []);\n\n  var onSubmit = function onSubmit() {\n    checkLogin(username, password);\n  };\n\n  var onSigningUp = function onSigningUp() {\n    navigation.navigate('Sign Up');\n  };\n\n  var _React$useState = React.useState(''),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      username = _React$useState2[0],\n      setUsername = _React$useState2[1];\n\n  var _React$useState3 = React.useState(''),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      password = _React$useState4[0],\n      setPassword = _React$useState4[1];\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 6\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: 'white',\n      fontSize: 40,\n      marginTop: '-20%',\n      marginBottom: '20%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, \"Creature Habits\"), React.createElement(TextInput, {\n    value: username,\n    onChangeText: function onChangeText(username) {\n      return setUsername(username);\n    },\n    placeholder: 'Username',\n    style: styles.input,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }), React.createElement(TextInput, {\n    value: password,\n    onChangeText: function onChangeText(password) {\n      return setPassword(password);\n    },\n    placeholder: 'Password',\n    secureTextEntry: true,\n    style: styles.input,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }\n  }), React.createElement(View, {\n    style: styles.buttonsContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }\n  }, React.createElement(TouchableOpacity, {\n    style: styles.button,\n    onPress: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 6\n    }\n  }, React.createElement(Text, {\n    style: styles.text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, \"Login\")), React.createElement(TouchableOpacity, {\n    style: styles.button,\n    onPress: onSigningUp,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 6\n    }\n  }, React.createElement(Text, {\n    style: styles.text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }, \"Sign Up\"))), React.createElement(TouchableOpacity, {\n    style: styles.button,\n    onPress: function onPress() {\n      return dispatch({\n        type: RESET_BUTTON_PRESSED\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: styles.text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 6\n    }\n  }, \"Reset\")));\n}","map":{"version":3,"sources":["/Users/elianacohen/AndroidStudioProjects/pro-creature-habits/src/screens/SignIn.js"],"names":["React","useCallback","UserInfo","OFF","RESET_BUTTON_PRESSED","useDispatch","styles","StyleSheet","create","container","flex","alignItems","justifyContent","backgroundColor","text","color","input","width","marginBottom","padding","borderRadius","buttonsContainer","flexDirection","button","margin","SignInScreen","onSignIn","navigation","dispatch","createTable","checkLogin","username","password","authenticated","findBy","username_eq","user","console","log","onSubmit","onSigningUp","navigate","useState","setUsername","setPassword","fontSize","marginTop","type"],"mappings":"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","sourcesContent":["import React, { useCallback } from 'react';\nimport { View, Text, StyleSheet, TextInput, TouchableOpacity } from \"react-native\";\nimport UserInfo from \"../databases/UserInfo\";\nimport {OFF} from \"../redux/modalVisible\";\nimport {RESET_BUTTON_PRESSED} from \"../App\";\nimport {useDispatch} from \"react-redux\";\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflex: 1,\n\t\talignItems: 'center',\n\t\tjustifyContent: 'center',\n\t\tbackgroundColor: '#406BE9',\n\t},\n\ttext: {\n\t\tcolor: 'white'\n\t},\n\tinput:{\n\t\twidth:\"85%\",\n\t\tbackgroundColor: \"white\",\n\t\tmarginBottom: 10,\n\t\tpadding: 15,\n\t\tborderRadius: 5\n\t},\n    buttonsContainer:{\n\t\tflexDirection: \"row\",\n\t\tjustifyContent: \"space-between\",\n\t\tpadding: 10\n\t},\n\tbutton:{\n\t\tpadding: 10,\n\t\twidth: \"25%\",\n\t\tbackgroundColor: '#402688',\n\t\talignItems: 'center',\n\t\tmargin: 10,\n\t\tborderRadius: 5\n\t},\n});\n\n\nexport default function SignInScreen({ onSignIn, navigation }){\n\tconst dispatch = useDispatch();\n\tUserInfo.createTable()\n\tconst checkLogin = useCallback(async (username, password) => {\n\t\tlet authenticated = false\n\t\ttry {\n\t\t\tconst user = await UserInfo.findBy({username_eq: username})\n\t\t\tif (password == user.password) {\n\t\t\t\tconsole.log(\"Correct\");\n\t\t\t\tauthenticated = true\n\t\t\t\tonSignIn()\n\n\t\t\t} else {\n\t\t\t\tconsole.log(\"Wrong Username/Password\");\n\t\t\t}\n\t\t}\n\t\tcatch{\n\t\t\tconsole.log(\"User not found\");\n\t\t}\n\n\n\n\t}, [])\n\n\tconst onSubmit = () => {\n\t\tcheckLogin(username, password);\n\t}\n\tconst onSigningUp = () => {\n\t\tnavigation.navigate('Sign Up')\n\t}\n\n\n\tconst [username, setUsername] = React.useState('');\n\tconst [password, setPassword] = React.useState('');\n\t\treturn (\n\t\t  \t<View style={styles.container}>\n\t\t\t\t<Text style={{color: 'white', fontSize: 40, marginTop: '-20%', marginBottom: '20%'}}>\n\t\t\t\t\tCreature Habits\n\t\t\t\t</Text>\n\t\t\t\t<TextInput\n\t\t\t\t  value={username}\n\t\t\t\t  onChangeText={username => setUsername(username)}\n\t\t\t\t  placeholder={'Username'}\n\t\t\t\t  style={styles.input}\n\t\t\t\t/>\n\t\t\t\t<TextInput\n\t\t\t\t  value={password}\n\t\t\t\t  onChangeText={password => setPassword(password)}\n\t\t\t\t  placeholder={'Password'}\n\t\t\t\t  secureTextEntry={true}\n\t\t\t\t  style={styles.input}\n\t\t\t\t/>\n\t\t\t\t<View style={styles.buttonsContainer}>\n\t\t\t\t\t<TouchableOpacity\n\t\t\t\t\t\tstyle={styles.button}\n\t\t\t\t\t\tonPress={onSubmit}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Text style={styles.text}>Login</Text>\n\t\t\t\t\t</TouchableOpacity>\n\t\t\t\t\t<TouchableOpacity\n\t\t\t\t\t\tstyle={styles.button}\n\t\t\t\t\t\tonPress={onSigningUp}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Text style={styles.text}>Sign Up</Text>\n\t\t\t\t\t</TouchableOpacity>\n\t\t\t\t</View>\n\t\t\t\t<TouchableOpacity\n\t\t\t\t\tstyle={styles.button}\n\t\t\t\t\tonPress={() => dispatch({type: RESET_BUTTON_PRESSED})}\n\t\t\t\t>\n\t\t\t\t\t<Text style={styles.text}>Reset</Text>\n\t\t\t\t</TouchableOpacity>\n\t\t\t</View>\n\t\t)\n\n\t}\n\n"]},"metadata":{},"sourceType":"module"}