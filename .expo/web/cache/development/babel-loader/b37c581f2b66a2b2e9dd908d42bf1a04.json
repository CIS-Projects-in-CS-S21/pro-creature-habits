{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/elianacohen/AndroidStudioProjects/pro-creature-habits/node_modules/react-native-progress/Circle.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Surface as ARTSurface } from '@react-native-community/art';\nimport Arc from \"./Shapes/Arc\";\nimport withAnimation from \"./withAnimation\";\nvar CIRCLE = Math.PI * 2;\nvar AnimatedSurface = Animated.createAnimatedComponent(ARTSurface);\nvar AnimatedArc = Animated.createAnimatedComponent(Arc);\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'transparent',\n    overflow: 'hidden'\n  }\n});\nexport var ProgressCircle = function (_Component) {\n  _inherits(ProgressCircle, _Component);\n\n  var _super = _createSuper(ProgressCircle);\n\n  function ProgressCircle(props, context) {\n    var _this;\n\n    _classCallCheck(this, ProgressCircle);\n\n    _this = _super.call(this, props, context);\n    _this.progressValue = 0;\n    return _this;\n  }\n\n  _createClass(ProgressCircle, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      if (this.props.animated) {\n        this.props.progress.addListener(function (event) {\n          _this2.progressValue = event.value;\n\n          if (_this2.props.showsText || _this2.progressValue === 1) {\n            _this2.forceUpdate();\n          }\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          animated = _this$props.animated,\n          borderColor = _this$props.borderColor,\n          borderWidth = _this$props.borderWidth,\n          color = _this$props.color,\n          children = _this$props.children,\n          direction = _this$props.direction,\n          fill = _this$props.fill,\n          formatText = _this$props.formatText,\n          indeterminate = _this$props.indeterminate,\n          progress = _this$props.progress,\n          rotation = _this$props.rotation,\n          showsText = _this$props.showsText,\n          size = _this$props.size,\n          style = _this$props.style,\n          strokeCap = _this$props.strokeCap,\n          textStyle = _this$props.textStyle,\n          thickness = _this$props.thickness,\n          unfilledColor = _this$props.unfilledColor,\n          endAngle = _this$props.endAngle,\n          allowFontScaling = _this$props.allowFontScaling,\n          restProps = _objectWithoutProperties(_this$props, [\"animated\", \"borderColor\", \"borderWidth\", \"color\", \"children\", \"direction\", \"fill\", \"formatText\", \"indeterminate\", \"progress\", \"rotation\", \"showsText\", \"size\", \"style\", \"strokeCap\", \"textStyle\", \"thickness\", \"unfilledColor\", \"endAngle\", \"allowFontScaling\"]);\n\n      var border = borderWidth || (indeterminate ? 1 : 0);\n      var radius = size / 2 - border;\n      var offset = {\n        top: border,\n        left: border\n      };\n      var textOffset = border + thickness;\n      var textSize = size - textOffset * 2;\n      var Surface = rotation ? AnimatedSurface : ARTSurface;\n      var Shape = animated ? AnimatedArc : Arc;\n      var progressValue = animated ? this.progressValue : progress;\n      var angle = animated ? Animated.multiply(progress, CIRCLE) : progress * CIRCLE;\n      return React.createElement(View, _extends({\n        style: [styles.container, style]\n      }, restProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 7\n        }\n      }), React.createElement(Surface, {\n        width: size,\n        height: size,\n        style: {\n          transform: [{\n            rotate: indeterminate && rotation ? rotation.interpolate({\n              inputRange: [0, 1],\n              outputRange: ['0deg', '360deg']\n            }) : '0deg'\n          }]\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 9\n        }\n      }, unfilledColor && progressValue !== 1 ? React.createElement(Shape, {\n        fill: fill,\n        radius: radius,\n        offset: offset,\n        startAngle: angle,\n        endAngle: CIRCLE,\n        direction: direction,\n        stroke: unfilledColor,\n        strokeWidth: thickness,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 13\n        }\n      }) : false, !indeterminate ? React.createElement(Shape, {\n        fill: fill,\n        radius: radius,\n        offset: offset,\n        startAngle: 0,\n        endAngle: angle,\n        direction: direction,\n        stroke: color,\n        strokeCap: strokeCap,\n        strokeWidth: thickness,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }\n      }) : false, border ? React.createElement(Arc, {\n        radius: size / 2,\n        startAngle: 0,\n        endAngle: (indeterminate ? endAngle * 2 : 2) * Math.PI,\n        stroke: borderColor || color,\n        strokeCap: strokeCap,\n        strokeWidth: border,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 13\n        }\n      }) : false), !indeterminate && showsText ? React.createElement(View, {\n        style: {\n          position: 'absolute',\n          left: textOffset,\n          top: textOffset,\n          width: textSize,\n          height: textSize,\n          borderRadius: textSize / 2,\n          alignItems: 'center',\n          justifyContent: 'center'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }\n      }, React.createElement(Text, {\n        style: [{\n          color: color,\n          fontSize: textSize / 4.5,\n          fontWeight: '300'\n        }, textStyle],\n        allowFontScaling: allowFontScaling,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 13\n        }\n      }, formatText(progressValue))) : false, children);\n    }\n  }]);\n\n  return ProgressCircle;\n}(Component);\nProgressCircle.propTypes = {\n  animated: PropTypes.bool,\n  borderColor: PropTypes.string,\n  borderWidth: PropTypes.number,\n  color: PropTypes.string,\n  children: PropTypes.node,\n  direction: PropTypes.oneOf(['clockwise', 'counter-clockwise']),\n  fill: PropTypes.string,\n  formatText: PropTypes.func,\n  indeterminate: PropTypes.bool,\n  progress: PropTypes.oneOfType([PropTypes.number, PropTypes.instanceOf(Animated.Value)]),\n  rotation: PropTypes.instanceOf(Animated.Value),\n  showsText: PropTypes.bool,\n  size: PropTypes.number,\n  style: PropTypes.any,\n  strokeCap: PropTypes.oneOf(['butt', 'square', 'round']),\n  textStyle: PropTypes.any,\n  thickness: PropTypes.number,\n  unfilledColor: PropTypes.string,\n  endAngle: PropTypes.number,\n  allowFontScaling: PropTypes.bool\n};\nProgressCircle.defaultProps = {\n  borderWidth: 1,\n  color: 'rgba(0, 122, 255, 1)',\n  direction: 'clockwise',\n  formatText: function formatText(progress) {\n    return Math.round(progress * 100) + \"%\";\n  },\n  progress: 0,\n  showsText: false,\n  size: 40,\n  thickness: 3,\n  endAngle: 0.9,\n  allowFontScaling: true\n};\nexport default withAnimation(ProgressCircle);","map":{"version":3,"sources":["/Users/elianacohen/AndroidStudioProjects/pro-creature-habits/node_modules/react-native-progress/Circle.js"],"names":["React","Component","PropTypes","Surface","ARTSurface","Arc","withAnimation","CIRCLE","Math","PI","AnimatedSurface","Animated","createAnimatedComponent","AnimatedArc","styles","StyleSheet","create","container","backgroundColor","overflow","ProgressCircle","props","context","progressValue","animated","progress","addListener","event","value","showsText","forceUpdate","borderColor","borderWidth","color","children","direction","fill","formatText","indeterminate","rotation","size","style","strokeCap","textStyle","thickness","unfilledColor","endAngle","allowFontScaling","restProps","border","radius","offset","top","left","textOffset","textSize","Shape","angle","multiply","transform","rotate","interpolate","inputRange","outputRange","position","width","height","borderRadius","alignItems","justifyContent","fontSize","fontWeight","propTypes","bool","string","number","node","oneOf","func","oneOfType","instanceOf","Value","any","defaultProps","round"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Animated, StyleSheet, Text, View } from 'react-native';\nimport { Surface as ARTSurface } from '@react-native-community/art';\n\nimport Arc from './Shapes/Arc';\nimport withAnimation from './withAnimation';\n\nconst CIRCLE = Math.PI * 2;\n\nconst AnimatedSurface = Animated.createAnimatedComponent(ARTSurface);\nconst AnimatedArc = Animated.createAnimatedComponent(Arc);\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'transparent',\n    overflow: 'hidden',\n  },\n});\n\nexport class ProgressCircle extends Component {\n  static propTypes = {\n    animated: PropTypes.bool,\n    borderColor: PropTypes.string,\n    borderWidth: PropTypes.number,\n    color: PropTypes.string,\n    children: PropTypes.node,\n    direction: PropTypes.oneOf(['clockwise', 'counter-clockwise']),\n    fill: PropTypes.string,\n    formatText: PropTypes.func,\n    indeterminate: PropTypes.bool,\n    progress: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.instanceOf(Animated.Value),\n    ]),\n    rotation: PropTypes.instanceOf(Animated.Value),\n    showsText: PropTypes.bool,\n    size: PropTypes.number,\n    style: PropTypes.any,\n    strokeCap: PropTypes.oneOf(['butt', 'square', 'round']),\n    textStyle: PropTypes.any,\n    thickness: PropTypes.number,\n    unfilledColor: PropTypes.string,\n    endAngle: PropTypes.number,\n    allowFontScaling: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    borderWidth: 1,\n    color: 'rgba(0, 122, 255, 1)',\n    direction: 'clockwise',\n    formatText: progress => `${Math.round(progress * 100)}%`,\n    progress: 0,\n    showsText: false,\n    size: 40,\n    thickness: 3,\n    endAngle: 0.9,\n    allowFontScaling: true,\n  };\n\n  constructor(props, context) {\n    super(props, context);\n\n    this.progressValue = 0;\n  }\n\n  componentDidMount() {\n    if (this.props.animated) {\n      this.props.progress.addListener(event => {\n        this.progressValue = event.value;\n        if (this.props.showsText || this.progressValue === 1) {\n          this.forceUpdate();\n        }\n      });\n    }\n  }\n\n  render() {\n    const {\n      animated,\n      borderColor,\n      borderWidth,\n      color,\n      children,\n      direction,\n      fill,\n      formatText,\n      indeterminate,\n      progress,\n      rotation,\n      showsText,\n      size,\n      style,\n      strokeCap,\n      textStyle,\n      thickness,\n      unfilledColor,\n      endAngle,\n      allowFontScaling,\n      ...restProps\n    } = this.props;\n\n    const border = borderWidth || (indeterminate ? 1 : 0);\n\n    const radius = size / 2 - border;\n    const offset = {\n      top: border,\n      left: border,\n    };\n    const textOffset = border + thickness;\n    const textSize = size - textOffset * 2;\n\n    const Surface = rotation ? AnimatedSurface : ARTSurface;\n    const Shape = animated ? AnimatedArc : Arc;\n    const progressValue = animated ? this.progressValue : progress;\n    const angle = animated\n      ? Animated.multiply(progress, CIRCLE)\n      : progress * CIRCLE;\n\n    return (\n      <View style={[styles.container, style]} {...restProps}>\n        <Surface\n          width={size}\n          height={size}\n          style={{\n            transform: [\n              {\n                rotate:\n                  indeterminate && rotation\n                    ? rotation.interpolate({\n                        inputRange: [0, 1],\n                        outputRange: ['0deg', '360deg'],\n                      })\n                    : '0deg',\n              },\n            ],\n          }}\n        >\n          {unfilledColor && progressValue !== 1 ? (\n            <Shape\n              fill={fill}\n              radius={radius}\n              offset={offset}\n              startAngle={angle}\n              endAngle={CIRCLE}\n              direction={direction}\n              stroke={unfilledColor}\n              strokeWidth={thickness}\n            />\n          ) : (\n            false\n          )}\n          {!indeterminate ? (\n            <Shape\n              fill={fill}\n              radius={radius}\n              offset={offset}\n              startAngle={0}\n              endAngle={angle}\n              direction={direction}\n              stroke={color}\n              strokeCap={strokeCap}\n              strokeWidth={thickness}\n            />\n          ) : (\n            false\n          )}\n          {border ? (\n            <Arc\n              radius={size / 2}\n              startAngle={0}\n              endAngle={(indeterminate ? endAngle * 2 : 2) * Math.PI}\n              stroke={borderColor || color}\n              strokeCap={strokeCap}\n              strokeWidth={border}\n            />\n          ) : (\n            false\n          )}\n        </Surface>\n        {!indeterminate && showsText ? (\n          <View\n            style={{\n              position: 'absolute',\n              left: textOffset,\n              top: textOffset,\n              width: textSize,\n              height: textSize,\n              borderRadius: textSize / 2,\n              alignItems: 'center',\n              justifyContent: 'center',\n            }}\n          >\n            <Text\n              style={[\n                {\n                  color,\n                  fontSize: textSize / 4.5,\n                  fontWeight: '300',\n                },\n                textStyle,\n              ]}\n              allowFontScaling={allowFontScaling}\n            >\n              {formatText(progressValue)}\n            </Text>\n          </View>\n        ) : (\n          false\n        )}\n        {children}\n      </View>\n    );\n  }\n}\n\nexport default withAnimation(ProgressCircle);\n"]},"metadata":{},"sourceType":"module"}