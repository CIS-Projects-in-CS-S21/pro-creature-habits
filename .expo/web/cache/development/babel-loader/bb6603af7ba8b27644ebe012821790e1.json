{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport omit from 'lodash/omit';\nimport nullthrows from 'nullthrows';\nimport * as React from 'react';\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { assertStatusValuesInBounds, getNativeSourceAndFullInitialStatusForLoadAsync, getNativeSourceFromSource, getUnloadedStatus, PlaybackMixin } from \"./AV\";\nimport ExpoVideoManager from \"./ExpoVideoManager\";\nimport ExponentAV from \"./ExponentAV\";\nimport ExponentVideo from \"./ExponentVideo\";\nimport { ResizeMode } from \"./Video.types\";\nexport { ResizeMode };\nexport var FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = 0;\nexport var FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = 1;\nexport var FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = 2;\nexport var FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = 3;\nexport var IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;\nexport var IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;\nexport var IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;\nexport var IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;\n\nvar _STYLES = StyleSheet.create({\n  base: {\n    overflow: 'hidden'\n  },\n  poster: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    resizeMode: 'contain'\n  },\n  video: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0\n  }\n});\n\nvar ExpoVideoManagerConstants = ExpoVideoManager;\nvar ExpoVideoViewManager = ExpoVideoManager;\n\nvar Video = function (_React$Component) {\n  _inherits(Video, _React$Component);\n\n  var _super = _createSuper(Video);\n\n  function Video(props) {\n    var _this;\n\n    _classCallCheck(this, Video);\n\n    _this = _super.call(this, props);\n    _this._nativeRef = React.createRef();\n    _this._onPlaybackStatusUpdate = null;\n\n    _this._handleNewStatus = function (status) {\n      if (_this.state.showPoster && status.isLoaded && (status.isPlaying || status.positionMillis !== 0)) {\n        _this.setState({\n          showPoster: false\n        });\n      }\n\n      if (_this.props.onPlaybackStatusUpdate) {\n        _this.props.onPlaybackStatusUpdate(status);\n      }\n\n      if (_this._onPlaybackStatusUpdate) {\n        _this._onPlaybackStatusUpdate(status);\n      }\n    };\n\n    _this._performOperationAndHandleStatusAsync = function _callee(operation) {\n      var video, handle, status;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              video = _this._nativeRef.current;\n\n              if (video) {\n                _context.next = 3;\n                break;\n              }\n\n              throw new Error(\"Cannot complete operation because the Video component has not yet loaded\");\n\n            case 3:\n              handle = findNodeHandle(_this._nativeRef.current);\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(operation(handle));\n\n            case 6:\n              status = _context.sent;\n\n              _this._handleNewStatus(status);\n\n              return _context.abrupt(\"return\", status);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this._setFullscreen = function _callee2(value) {\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", _this._performOperationAndHandleStatusAsync(function (tag) {\n                return ExpoVideoViewManager.setFullscreen(tag, value);\n              }));\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.presentFullscreenPlayer = function _callee3() {\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              return _context3.abrupt(\"return\", _this._setFullscreen(true));\n\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.presentIOSFullscreenPlayer = function () {\n      console.warn(\"You're using `presentIOSFullscreenPlayer`. Please migrate your code to use `presentFullscreenPlayer` instead.\");\n      return _this.presentFullscreenPlayer();\n    };\n\n    _this.presentFullscreenPlayerAsync = function _callee4() {\n      return _regeneratorRuntime.async(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return _regeneratorRuntime.awrap(_this.presentFullscreenPlayer());\n\n            case 2:\n              return _context4.abrupt(\"return\", _context4.sent);\n\n            case 3:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.dismissFullscreenPlayer = function _callee5() {\n      return _regeneratorRuntime.async(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              return _context5.abrupt(\"return\", _this._setFullscreen(false));\n\n            case 1:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.dismissIOSFullscreenPlayer = function () {\n      console.warn(\"You're using `dismissIOSFullscreenPlayer`. Please migrate your code to use `dismissFullscreenPlayer` instead.\");\n\n      _this.dismissFullscreenPlayer();\n    };\n\n    _this.getStatusAsync = function _callee6() {\n      return _regeneratorRuntime.async(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              return _context6.abrupt(\"return\", _this._performOperationAndHandleStatusAsync(function (tag) {\n                return ExponentAV.getStatusForVideo(tag);\n              }));\n\n            case 1:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.loadAsync = function _callee7(source) {\n      var initialStatus,\n          downloadFirst,\n          _await$getNativeSourc,\n          nativeSource,\n          fullInitialStatus,\n          _args7 = arguments;\n\n      return _regeneratorRuntime.async(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              initialStatus = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : {};\n              downloadFirst = _args7.length > 2 && _args7[2] !== undefined ? _args7[2] : true;\n              _context7.next = 4;\n              return _regeneratorRuntime.awrap(getNativeSourceAndFullInitialStatusForLoadAsync(source, initialStatus, downloadFirst));\n\n            case 4:\n              _await$getNativeSourc = _context7.sent;\n              nativeSource = _await$getNativeSourc.nativeSource;\n              fullInitialStatus = _await$getNativeSourc.fullInitialStatus;\n              return _context7.abrupt(\"return\", _this._performOperationAndHandleStatusAsync(function (tag) {\n                return ExponentAV.loadForVideo(tag, nativeSource, fullInitialStatus);\n              }));\n\n            case 8:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.unloadAsync = function _callee8() {\n      return _regeneratorRuntime.async(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              return _context8.abrupt(\"return\", _this._performOperationAndHandleStatusAsync(function (tag) {\n                return ExponentAV.unloadForVideo(tag);\n              }));\n\n            case 1:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.setStatusAsync = function _callee9(status) {\n      return _regeneratorRuntime.async(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              assertStatusValuesInBounds(status);\n              return _context9.abrupt(\"return\", _this._performOperationAndHandleStatusAsync(function (tag) {\n                return ExponentAV.setStatusForVideo(tag, status);\n              }));\n\n            case 2:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.replayAsync = function _callee10() {\n      var status,\n          _args10 = arguments;\n      return _regeneratorRuntime.async(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              status = _args10.length > 0 && _args10[0] !== undefined ? _args10[0] : {};\n\n              if (!(status.positionMillis && status.positionMillis !== 0)) {\n                _context10.next = 3;\n                break;\n              }\n\n              throw new Error('Requested position after replay has to be 0.');\n\n            case 3:\n              return _context10.abrupt(\"return\", _this._performOperationAndHandleStatusAsync(function (tag) {\n                return ExponentAV.replayVideo(tag, _objectSpread(_objectSpread({}, status), {}, {\n                  positionMillis: 0,\n                  shouldPlay: true\n                }));\n              }));\n\n            case 4:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this._nativeOnPlaybackStatusUpdate = function (event) {\n      _this._handleNewStatus(event.nativeEvent);\n    };\n\n    _this._nativeOnLoadStart = function () {\n      if (_this.props.onLoadStart) {\n        _this.props.onLoadStart();\n      }\n    };\n\n    _this._nativeOnLoad = function (event) {\n      if (_this.props.onLoad) {\n        _this.props.onLoad(event.nativeEvent);\n      }\n\n      _this._handleNewStatus(event.nativeEvent);\n    };\n\n    _this._nativeOnError = function (event) {\n      var error = event.nativeEvent.error;\n\n      if (_this.props.onError) {\n        _this.props.onError(error);\n      }\n\n      _this._handleNewStatus(getUnloadedStatus(error));\n    };\n\n    _this._nativeOnReadyForDisplay = function (event) {\n      if (_this.props.onReadyForDisplay) {\n        _this.props.onReadyForDisplay(event.nativeEvent);\n      }\n    };\n\n    _this._nativeOnFullscreenUpdate = function (event) {\n      if (_this.props.onIOSFullscreenUpdate && _this.props.onFullscreenUpdate) {\n        console.warn(\"You've supplied both `onIOSFullscreenUpdate` and `onFullscreenUpdate`. You're going to receive updates on both the callbacks.\");\n      } else if (_this.props.onIOSFullscreenUpdate) {\n        console.warn(\"You're using `onIOSFullscreenUpdate`. Please migrate your code to use `onFullscreenUpdate` instead.\");\n      }\n\n      if (_this.props.onIOSFullscreenUpdate) {\n        _this.props.onIOSFullscreenUpdate(event.nativeEvent);\n      }\n\n      if (_this.props.onFullscreenUpdate) {\n        _this.props.onFullscreenUpdate(event.nativeEvent);\n      }\n    };\n\n    _this._renderPoster = function () {\n      return _this.props.usePoster && _this.state.showPoster ? React.createElement(Image, {\n        style: [_STYLES.poster, _this.props.posterStyle],\n        source: _this.props.posterSource\n      }) : null;\n    };\n\n    _this.state = {\n      showPoster: !!props.usePoster\n    };\n    return _this;\n  }\n\n  _createClass(Video, [{\n    key: \"setNativeProps\",\n    value: function setNativeProps(nativeProps) {\n      var nativeVideo = nullthrows(this._nativeRef.current);\n      nativeVideo.setNativeProps(nativeProps);\n    }\n  }, {\n    key: \"setOnPlaybackStatusUpdate\",\n    value: function setOnPlaybackStatusUpdate(onPlaybackStatusUpdate) {\n      this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n      this.getStatusAsync();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var source = getNativeSourceFromSource(this.props.source) || undefined;\n      var nativeResizeMode = ExpoVideoManagerConstants.ScaleNone;\n\n      if (this.props.resizeMode) {\n        var resizeMode = this.props.resizeMode;\n\n        if (resizeMode === ResizeMode.STRETCH) {\n          nativeResizeMode = ExpoVideoManagerConstants.ScaleToFill;\n        } else if (resizeMode === ResizeMode.CONTAIN) {\n          nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFit;\n        } else if (resizeMode === ResizeMode.COVER) {\n          nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFill;\n        }\n      }\n\n      var status = _objectSpread({}, this.props.status);\n\n      ['progressUpdateIntervalMillis', 'positionMillis', 'shouldPlay', 'rate', 'shouldCorrectPitch', 'volume', 'isMuted', 'isLooping'].forEach(function (prop) {\n        if (prop in _this2.props) {\n          status[prop] = _this2.props[prop];\n        }\n      });\n\n      var nativeProps = _objectSpread(_objectSpread({}, omit.apply(void 0, [this.props, 'source', 'onPlaybackStatusUpdate', 'usePoster', 'posterSource', 'posterStyle'].concat(_toConsumableArray(Object.keys(status))))), {}, {\n        style: StyleSheet.flatten([_STYLES.base, this.props.style]),\n        source: source,\n        resizeMode: nativeResizeMode,\n        status: status,\n        onStatusUpdate: this._nativeOnPlaybackStatusUpdate,\n        onLoadStart: this._nativeOnLoadStart,\n        onLoad: this._nativeOnLoad,\n        onError: this._nativeOnError,\n        onReadyForDisplay: this._nativeOnReadyForDisplay,\n        onFullscreenUpdate: this._nativeOnFullscreenUpdate\n      });\n\n      return React.createElement(View, {\n        style: nativeProps.style,\n        pointerEvents: \"box-none\"\n      }, React.createElement(ExponentVideo, _extends({\n        ref: this._nativeRef\n      }, nativeProps, {\n        style: _STYLES.video\n      })), this._renderPoster());\n    }\n  }]);\n\n  return Video;\n}(React.Component);\n\nexport { Video as default };\nVideo.RESIZE_MODE_CONTAIN = ResizeMode.CONTAIN;\nVideo.RESIZE_MODE_COVER = ResizeMode.COVER;\nVideo.RESIZE_MODE_STRETCH = ResizeMode.STRETCH;\nVideo.IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;\nVideo.IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;\nVideo.IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;\nVideo.IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;\nVideo.FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;\nVideo.FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;\nVideo.FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;\nVideo.FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;\n\n_extends(Video.prototype, PlaybackMixin);","map":{"version":3,"sources":["../src/Video.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,IAAP,MAAiB,aAAjB;AACA,OAAO,UAAP,MAAuB,YAAvB;AACA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;;;;;AAGA,SACE,0BADF,EAEE,+CAFF,EAGE,yBAHF,EAIE,iBAJF,EAME,aANF;AAYA,OAAO,gBAAP;AACA,OAAO,UAAP;AACA,OAAO,aAAP;AACA,SAOE,UAPF;AAWA,SAOE,UAPF;AAcA,OAAO,IAAM,qCAAqC,GAAG,CAA9C;AACP,OAAO,IAAM,oCAAoC,GAAG,CAA7C;AACP,OAAO,IAAM,qCAAqC,GAAG,CAA9C;AACP,OAAO,IAAM,oCAAoC,GAAG,CAA7C;AAEP,OAAO,IAAM,yCAAyC,GAAG,qCAAlD;AACP,OAAO,IAAM,wCAAwC,GAAG,oCAAjD;AACP,OAAO,IAAM,yCAAyC,GAAG,qCAAlD;AACP,OAAO,IAAM,wCAAwC,GAAG,oCAAjD;;AAEP,IAAM,OAAO,GAAG,UAAU,CAAC,MAAX,CAAkB;AAChC,EAAA,IAAI,EAAE;AACJ,IAAA,QAAQ,EAAE;AADN,GAD0B;AAIhC,EAAA,MAAM,EAAE;AACN,IAAA,QAAQ,EAAE,UADJ;AAEN,IAAA,IAAI,EAAE,CAFA;AAGN,IAAA,GAAG,EAAE,CAHC;AAIN,IAAA,KAAK,EAAE,CAJD;AAKN,IAAA,MAAM,EAAE,CALF;AAMN,IAAA,UAAU,EAAE;AANN,GAJwB;AAYhC,EAAA,KAAK,EAAE;AACL,IAAA,QAAQ,EAAE,UADL;AAEL,IAAA,IAAI,EAAE,CAFD;AAGL,IAAA,GAAG,EAAE,CAHA;AAIL,IAAA,KAAK,EAAE,CAJF;AAKL,IAAA,MAAM,EAAE;AALH;AAZyB,CAAlB,CAAhB;;AAuBA,IAAM,yBAAyB,GAAG,gBAAlC;AACA,IAAM,oBAAoB,GAAG,gBAA7B;;IAEqB,K;;;;;AAoBnB,iBAAY,KAAZ,EAA6B;AAAA;;AAAA;;AAC3B,8BAAM,KAAN;AANF,UAAA,UAAA,GAAa,KAAK,CAAC,SAAN,EAAb;AACA,UAAA,uBAAA,GAAuE,IAAvE;;AAkBA,UAAA,gBAAA,GAAmB,UAAC,MAAD,EAA6B;AAC9C,UACE,MAAK,KAAL,CAAW,UAAX,IACA,MAAM,CAAC,QADP,KAEC,MAAM,CAAC,SAAP,IAAoB,MAAM,CAAC,cAAP,KAA0B,CAF/C,CADF,EAIE;AACA,cAAK,QAAL,CAAc;AAAE,UAAA,UAAU,EAAE;AAAd,SAAd;AACD;;AAED,UAAI,MAAK,KAAL,CAAW,sBAAf,EAAuC;AACrC,cAAK,KAAL,CAAW,sBAAX,CAAkC,MAAlC;AACD;;AACD,UAAI,MAAK,uBAAT,EAAkC;AAChC,cAAK,uBAAL,CAA6B,MAA7B;AACD;AACF,KAfD;;AAiBA,UAAA,qCAAA,GAAwC,iBACtC,SADsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAGhC,cAAA,KAHgC,GAGxB,MAAK,UAAL,CAAgB,OAHQ;;AAAA,kBAIjC,KAJiC;AAAA;AAAA;AAAA;;AAAA,oBAK9B,IAAI,KAAJ,4EAL8B;;AAAA;AAQhC,cAAA,MARgC,GAQvB,cAAc,CAAC,MAAK,UAAL,CAAgB,OAAjB,CARS;AAAA;AAAA,+CASC,SAAS,CAAC,MAAD,CATV;;AAAA;AAShC,cAAA,MATgC;;AAUtC,oBAAK,gBAAL,CAAsB,MAAtB;;AAVsC,+CAW/B,MAX+B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAxC;;AAgBA,UAAA,cAAA,GAAiB,kBAAO,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA,gDACR,MAAK,qCAAL,CAA2C,UAAC,GAAD;AAAA,uBAChD,oBAAoB,CAAC,aAArB,CAAmC,GAAnC,EAAwC,KAAxC,CADgD;AAAA,eAA3C,CADQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAjB;;AAMA,UAAA,uBAAA,GAA0B;AAAA;AAAA;AAAA;AAAA;AAAA,gDACjB,MAAK,cAAL,CAAoB,IAApB,CADiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA1B;;AAIA,UAAA,0BAAA,GAA6B,YAAK;AAChC,MAAA,OAAO,CAAC,IAAR,CACE,+GADF;AAGA,aAAO,MAAK,uBAAL,EAAP;AACD,KALD;;AAOA,UAAA,4BAAA,GAA+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAChB,MAAK,uBAAL,EADgB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA/B;;AAIA,UAAA,uBAAA,GAA0B;AAAA;AAAA;AAAA;AAAA;AAAA,gDACjB,MAAK,cAAL,CAAoB,KAApB,CADiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA1B;;AAIA,UAAA,0BAAA,GAA6B,YAAK;AAChC,MAAA,OAAO,CAAC,IAAR,CACE,+GADF;;AAGA,YAAK,uBAAL;AACD,KALD;;AAYA,UAAA,cAAA,GAAiB;AAAA;AAAA;AAAA;AAAA;AAAA,gDACR,MAAK,qCAAL,CAA2C,UAAC,GAAD;AAAA,uBAChD,UAAU,CAAC,iBAAX,CAA6B,GAA7B,CADgD;AAAA,eAA3C,CADQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAjB;;AAQA,UAAA,SAAA,GAAY,kBACV,MADU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEV,cAAA,aAFU,8DAE6B,EAF7B;AAGV,cAAA,aAHU,8DAGe,IAHf;AAAA;AAAA,+CAQA,+CAA+C,CAAC,MAAD,EAAS,aAAT,EAAwB,aAAxB,CAR/C;;AAAA;AAAA;AAMR,cAAA,YANQ,yBAMR,YANQ;AAOR,cAAA,iBAPQ,yBAOR,iBAPQ;AAAA,gDASH,MAAK,qCAAL,CAA2C,UAAC,GAAD;AAAA,uBAChD,UAAU,CAAC,YAAX,CAAwB,GAAxB,EAA6B,YAA7B,EAA2C,iBAA3C,CADgD;AAAA,eAA3C,CATG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAZ;;AAeA,UAAA,WAAA,GAAc;AAAA;AAAA;AAAA;AAAA;AAAA,gDACL,MAAK,qCAAL,CAA2C,UAAC,GAAD;AAAA,uBAChD,UAAU,CAAC,cAAX,CAA0B,GAA1B,CADgD;AAAA,eAA3C,CADK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAd;;AAQA,UAAA,cAAA,GAAiB,kBAAO,MAAP;AAAA;AAAA;AAAA;AAAA;AACf,cAAA,0BAA0B,CAAC,MAAD,CAA1B;AADe,gDAER,MAAK,qCAAL,CAA2C,UAAC,GAAD;AAAA,uBAChD,UAAU,CAAC,iBAAX,CAA6B,GAA7B,EAAkC,MAAlC,CADgD;AAAA,eAA3C,CAFQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAjB;;AAOA,UAAA,WAAA,GAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAO,cAAA,MAAP,iEAAuC,EAAvC;;AAAA,oBACR,MAAM,CAAC,cAAP,IAAyB,MAAM,CAAC,cAAP,KAA0B,CAD3C;AAAA;AAAA;AAAA;;AAAA,oBAEJ,IAAI,KAAJ,CAAU,8CAAV,CAFI;;AAAA;AAAA,iDAKL,MAAK,qCAAL,CAA2C,UAAC,GAAD;AAAA,uBAChD,UAAU,CAAC,WAAX,CAAuB,GAAvB,kCACK,MADL;AAEE,kBAAA,cAAc,EAAE,CAFlB;AAGE,kBAAA,UAAU,EAAE;AAHd,mBADgD;AAAA,eAA3C,CALK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAd;;AAyCA,UAAA,6BAAA,GAAgC,UAAC,KAAD,EAA6C;AAC3E,YAAK,gBAAL,CAAsB,KAAK,CAAC,WAA5B;AACD,KAFD;;AAKA,UAAA,kBAAA,GAAqB,YAAK;AACxB,UAAI,MAAK,KAAL,CAAW,WAAf,EAA4B;AAC1B,cAAK,KAAL,CAAW,WAAX;AACD;AACF,KAJD;;AAMA,UAAA,aAAA,GAAgB,UAAC,KAAD,EAA6C;AAC3D,UAAI,MAAK,KAAL,CAAW,MAAf,EAAuB;AACrB,cAAK,KAAL,CAAW,MAAX,CAAkB,KAAK,CAAC,WAAxB;AACD;;AACD,YAAK,gBAAL,CAAsB,KAAK,CAAC,WAA5B;AACD,KALD;;AAOA,UAAA,cAAA,GAAiB,UAAC,KAAD,EAA8C;AAC7D,UAAM,KAAK,GAAW,KAAK,CAAC,WAAN,CAAkB,KAAxC;;AACA,UAAI,MAAK,KAAL,CAAW,OAAf,EAAwB;AACtB,cAAK,KAAL,CAAW,OAAX,CAAmB,KAAnB;AACD;;AACD,YAAK,gBAAL,CAAsB,iBAAiB,CAAC,KAAD,CAAvC;AACD,KAND;;AAQA,UAAA,wBAAA,GAA2B,UAAC,KAAD,EAAsD;AAC/E,UAAI,MAAK,KAAL,CAAW,iBAAf,EAAkC;AAChC,cAAK,KAAL,CAAW,iBAAX,CAA6B,KAAK,CAAC,WAAnC;AACD;AACF,KAJD;;AAMA,UAAA,yBAAA,GAA4B,UAAC,KAAD,EAAuD;AACjF,UAAI,MAAK,KAAL,CAAW,qBAAX,IAAoC,MAAK,KAAL,CAAW,kBAAnD,EAAuE;AACrE,QAAA,OAAO,CAAC,IAAR,CACE,+HADF;AAGD,OAJD,MAIO,IAAI,MAAK,KAAL,CAAW,qBAAf,EAAsC;AAC3C,QAAA,OAAO,CAAC,IAAR,CACE,qGADF;AAGD;;AAED,UAAI,MAAK,KAAL,CAAW,qBAAf,EAAsC;AACpC,cAAK,KAAL,CAAW,qBAAX,CAAiC,KAAK,CAAC,WAAvC;AACD;;AAED,UAAI,MAAK,KAAL,CAAW,kBAAf,EAAmC;AACjC,cAAK,KAAL,CAAW,kBAAX,CAA8B,KAAK,CAAC,WAApC;AACD;AACF,KAlBD;;AAoBA,UAAA,aAAA,GAAgB;AAAA,aACd,MAAK,KAAL,CAAW,SAAX,IAAwB,MAAK,KAAL,CAAW,UAAnC,GAEE,KAAA,CAAA,aAAA,CAAC,KAAD,EAAM;AAAC,QAAA,KAAK,EAAE,CAAC,OAAO,CAAC,MAAT,EAAiB,MAAK,KAAL,CAAW,WAA5B,CAAR;AAAkD,QAAA,MAAM,EAAE,MAAK,KAAL,CAAW;AAArE,OAAN,CAFF,GAGI,IAJU;AAAA,KAAhB;;AArNE,UAAK,KAAL,GAAa;AACX,MAAA,UAAU,EAAE,CAAC,CAAC,KAAK,CAAC;AADT,KAAb;AAF2B;AAK5B;;;;WAED,wBAAe,WAAf,EAA4C;AAC1C,UAAM,WAAW,GAAG,UAAU,CAAC,KAAK,UAAL,CAAgB,OAAjB,CAA9B;AACA,MAAA,WAAW,CAAC,cAAZ,CAA2B,WAA3B;AACD;;;WA8HD,mCAA0B,sBAA1B,EAA6F;AAC3F,WAAK,uBAAL,GAA+B,sBAA/B;AACA,WAAK,cAAL;AACD;;;WAkFD,kBAAM;AAAA;;AACJ,UAAM,MAAM,GAAG,yBAAyB,CAAC,KAAK,KAAL,CAAW,MAAZ,CAAzB,IAAgD,SAA/D;AAEA,UAAI,gBAAgB,GAAG,yBAAyB,CAAC,SAAjD;;AACA,UAAI,KAAK,KAAL,CAAW,UAAf,EAA2B;AACzB,YAAM,UAAU,GAAG,KAAK,KAAL,CAAW,UAA9B;;AACA,YAAI,UAAU,KAAK,UAAU,CAAC,OAA9B,EAAuC;AACrC,UAAA,gBAAgB,GAAG,yBAAyB,CAAC,WAA7C;AACD,SAFD,MAEO,IAAI,UAAU,KAAK,UAAU,CAAC,OAA9B,EAAuC;AAC5C,UAAA,gBAAgB,GAAG,yBAAyB,CAAC,cAA7C;AACD,SAFM,MAEA,IAAI,UAAU,KAAK,UAAU,CAAC,KAA9B,EAAqC;AAC1C,UAAA,gBAAgB,GAAG,yBAAyB,CAAC,eAA7C;AACD;AACF;;AAGD,UAAM,MAAM,qBAA+B,KAAK,KAAL,CAAW,MAA1C,CAAZ;;AACA,OACE,8BADF,EAEE,gBAFF,EAGE,YAHF,EAIE,MAJF,EAKE,oBALF,EAME,QANF,EAOE,SAPF,EAQE,WARF,EASE,OATF,CASU,UAAA,IAAI,EAAG;AACf,YAAI,IAAI,IAAI,MAAI,CAAC,KAAjB,EAAwB;AACtB,UAAA,MAAM,CAAC,IAAD,CAAN,GAAe,MAAI,CAAC,KAAL,CAAW,IAAX,CAAf;AACD;AACF,OAbD;;AAiBA,UAAM,WAAW,mCACZ,IAAI,MAAJ,UACD,KAAK,KADJ,EAED,QAFC,EAGD,wBAHC,EAID,WAJC,EAKD,cALC,EAMD,aANC,4BAOE,MAAM,CAAC,IAAP,CAAY,MAAZ,CAPF,GADY;AAUf,QAAA,KAAK,EAAE,UAAU,CAAC,OAAX,CAAmB,CAAC,OAAO,CAAC,IAAT,EAAe,KAAK,KAAL,CAAW,KAA1B,CAAnB,CAVQ;AAWf,QAAA,MAAM,EAAN,MAXe;AAYf,QAAA,UAAU,EAAE,gBAZG;AAaf,QAAA,MAAM,EAAN,MAbe;AAcf,QAAA,cAAc,EAAE,KAAK,6BAdN;AAef,QAAA,WAAW,EAAE,KAAK,kBAfH;AAgBf,QAAA,MAAM,EAAE,KAAK,aAhBE;AAiBf,QAAA,OAAO,EAAE,KAAK,cAjBC;AAkBf,QAAA,iBAAiB,EAAE,KAAK,wBAlBT;AAmBf,QAAA,kBAAkB,EAAE,KAAK;AAnBV,QAAjB;;AAsBA,aACE,KAAA,CAAA,aAAA,CAAC,IAAD,EAAK;AAAC,QAAA,KAAK,EAAE,WAAW,CAAC,KAApB;AAA2B,QAAA,aAAa,EAAC;AAAzC,OAAL,EACE,KAAA,CAAA,aAAA,CAAC,aAAD,EAAc,SAAA;AAAC,QAAA,GAAG,EAAE,KAAK;AAAX,OAAA,EAA2B,WAA3B,EAAsC;AAAE,QAAA,KAAK,EAAE,OAAO,CAAC;AAAjB,OAAtC,CAAd,CADF,EAEG,KAAK,aAAL,EAFH,CADF;AAMD;;;;EA/SgC,KAAK,CAAC,S;;SAApB,K;AACZ,KAAA,CAAA,mBAAA,GAAsB,UAAU,CAAC,OAAjC;AACA,KAAA,CAAA,iBAAA,GAAoB,UAAU,CAAC,KAA/B;AACA,KAAA,CAAA,mBAAA,GAAsB,UAAU,CAAC,OAAjC;AAEA,KAAA,CAAA,yCAAA,GAA4C,yCAA5C;AACA,KAAA,CAAA,wCAAA,GAA2C,wCAA3C;AACA,KAAA,CAAA,yCAAA,GAA4C,yCAA5C;AACA,KAAA,CAAA,wCAAA,GAA2C,wCAA3C;AAEA,KAAA,CAAA,qCAAA,GAAwC,qCAAxC;AACA,KAAA,CAAA,oCAAA,GAAuC,oCAAvC;AACA,KAAA,CAAA,qCAAA,GAAwC,qCAAxC;AACA,KAAA,CAAA,oCAAA,GAAuC,oCAAvC;;AAqST,SAAc,KAAK,CAAC,SAApB,EAA+B,aAA/B","sourcesContent":["import omit from 'lodash/omit';\nimport nullthrows from 'nullthrows';\nimport * as React from 'react';\nimport { findNodeHandle, Image, NativeMethods, StyleSheet, View } from 'react-native';\n\nimport {\n  assertStatusValuesInBounds,\n  getNativeSourceAndFullInitialStatusForLoadAsync,\n  getNativeSourceFromSource,\n  getUnloadedStatus,\n  Playback,\n  PlaybackMixin,\n  AVPlaybackSource,\n  AVPlaybackStatus,\n  AVPlaybackStatusToSet,\n  AVPlaybackNativeSource,\n} from './AV';\nimport ExpoVideoManager from './ExpoVideoManager';\nimport ExponentAV from './ExponentAV';\nimport ExponentVideo from './ExponentVideo';\nimport {\n  ExponentVideoComponent,\n  VideoFullscreenUpdateEvent,\n  VideoNativeProps,\n  VideoNaturalSize,\n  VideoProps,\n  VideoReadyForDisplayEvent,\n  ResizeMode,\n  VideoState,\n} from './Video.types';\n\nexport {\n  ExponentVideoComponent,\n  VideoFullscreenUpdateEvent,\n  VideoNativeProps,\n  VideoNaturalSize,\n  VideoProps,\n  VideoReadyForDisplayEvent,\n  ResizeMode,\n  VideoState,\n  AVPlaybackStatus,\n  AVPlaybackStatusToSet,\n  AVPlaybackNativeSource,\n};\n\nexport const FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = 0;\nexport const FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = 1;\nexport const FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = 2;\nexport const FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = 3;\n\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;\n\nconst _STYLES = StyleSheet.create({\n  base: {\n    overflow: 'hidden',\n  },\n  poster: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    resizeMode: 'contain',\n  },\n  video: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n  },\n});\n\n// On a real device UIManager should be present, however when running offline tests with jest-expo\n// we have to use the provided native module mock to access constants\nconst ExpoVideoManagerConstants = ExpoVideoManager;\nconst ExpoVideoViewManager = ExpoVideoManager;\n\nexport default class Video extends React.Component<VideoProps, VideoState> implements Playback {\n  static RESIZE_MODE_CONTAIN = ResizeMode.CONTAIN;\n  static RESIZE_MODE_COVER = ResizeMode.COVER;\n  static RESIZE_MODE_STRETCH = ResizeMode.STRETCH;\n\n  static IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;\n  static IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;\n  static IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;\n  static IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;\n\n  static FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;\n  static FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;\n  static FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;\n  static FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;\n\n  _nativeRef = React.createRef<InstanceType<ExponentVideoComponent> & NativeMethods>();\n  _onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null;\n\n  // componentOrHandle: null | number | React.Component<any, any> | React.ComponentClass<any>\n\n  constructor(props: VideoProps) {\n    super(props);\n    this.state = {\n      showPoster: !!props.usePoster,\n    };\n  }\n\n  setNativeProps(nativeProps: VideoNativeProps) {\n    const nativeVideo = nullthrows(this._nativeRef.current);\n    nativeVideo.setNativeProps(nativeProps);\n  }\n\n  // Internal methods\n\n  _handleNewStatus = (status: AVPlaybackStatus) => {\n    if (\n      this.state.showPoster &&\n      status.isLoaded &&\n      (status.isPlaying || status.positionMillis !== 0)\n    ) {\n      this.setState({ showPoster: false });\n    }\n\n    if (this.props.onPlaybackStatusUpdate) {\n      this.props.onPlaybackStatusUpdate(status);\n    }\n    if (this._onPlaybackStatusUpdate) {\n      this._onPlaybackStatusUpdate(status);\n    }\n  };\n\n  _performOperationAndHandleStatusAsync = async (\n    operation: (tag: number) => Promise<AVPlaybackStatus>\n  ): Promise<AVPlaybackStatus> => {\n    const video = this._nativeRef.current;\n    if (!video) {\n      throw new Error(`Cannot complete operation because the Video component has not yet loaded`);\n    }\n\n    const handle = findNodeHandle(this._nativeRef.current)!;\n    const status: AVPlaybackStatus = await operation(handle);\n    this._handleNewStatus(status);\n    return status;\n  };\n\n  // ### iOS Fullscreening API ###\n\n  _setFullscreen = async (value: boolean) => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExpoVideoViewManager.setFullscreen(tag, value)\n    );\n  };\n\n  presentFullscreenPlayer = async () => {\n    return this._setFullscreen(true);\n  };\n\n  presentIOSFullscreenPlayer = () => {\n    console.warn(\n      \"You're using `presentIOSFullscreenPlayer`. Please migrate your code to use `presentFullscreenPlayer` instead.\"\n    );\n    return this.presentFullscreenPlayer();\n  };\n\n  presentFullscreenPlayerAsync = async () => {\n    return await this.presentFullscreenPlayer();\n  };\n\n  dismissFullscreenPlayer = async () => {\n    return this._setFullscreen(false);\n  };\n\n  dismissIOSFullscreenPlayer = () => {\n    console.warn(\n      \"You're using `dismissIOSFullscreenPlayer`. Please migrate your code to use `dismissFullscreenPlayer` instead.\"\n    );\n    this.dismissFullscreenPlayer();\n  };\n\n  // ### Unified playback API ### (consistent with Audio.js)\n  // All calls automatically call onPlaybackStatusUpdate as a side effect.\n\n  // Get status API\n\n  getStatusAsync = async (): Promise<AVPlaybackStatus> => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.getStatusForVideo(tag)\n    );\n  };\n\n  // Loading / unloading API\n\n  loadAsync = async (\n    source: AVPlaybackSource,\n    initialStatus: AVPlaybackStatusToSet = {},\n    downloadFirst: boolean = true\n  ): Promise<AVPlaybackStatus> => {\n    const {\n      nativeSource,\n      fullInitialStatus,\n    } = await getNativeSourceAndFullInitialStatusForLoadAsync(source, initialStatus, downloadFirst);\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.loadForVideo(tag, nativeSource, fullInitialStatus)\n    );\n  };\n\n  // Equivalent to setting URI to null.\n  unloadAsync = async (): Promise<AVPlaybackStatus> => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.unloadForVideo(tag)\n    );\n  };\n\n  // Set status API (only available while isLoaded = true)\n\n  setStatusAsync = async (status: AVPlaybackStatusToSet): Promise<AVPlaybackStatus> => {\n    assertStatusValuesInBounds(status);\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.setStatusForVideo(tag, status)\n    );\n  };\n\n  replayAsync = async (status: AVPlaybackStatusToSet = {}): Promise<AVPlaybackStatus> => {\n    if (status.positionMillis && status.positionMillis !== 0) {\n      throw new Error('Requested position after replay has to be 0.');\n    }\n\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.replayVideo(tag, {\n        ...status,\n        positionMillis: 0,\n        shouldPlay: true,\n      })\n    );\n  };\n\n  setOnPlaybackStatusUpdate(onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null) {\n    this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n    this.getStatusAsync();\n  }\n\n  // Methods of the Playback interface that are set via PlaybackMixin\n  playAsync!: () => Promise<AVPlaybackStatus>;\n  playFromPositionAsync!: (\n    positionMillis: number,\n    tolerances?: { toleranceMillisBefore?: number; toleranceMillisAfter?: number }\n  ) => Promise<AVPlaybackStatus>;\n  pauseAsync!: () => Promise<AVPlaybackStatus>;\n  stopAsync!: () => Promise<AVPlaybackStatus>;\n  setPositionAsync!: (\n    positionMillis: number,\n    tolerances?: { toleranceMillisBefore?: number; toleranceMillisAfter?: number }\n  ) => Promise<AVPlaybackStatus>;\n  setRateAsync!: (rate: number, shouldCorrectPitch: boolean) => Promise<AVPlaybackStatus>;\n  setVolumeAsync!: (volume: number) => Promise<AVPlaybackStatus>;\n  setIsMutedAsync!: (isMuted: boolean) => Promise<AVPlaybackStatus>;\n  setIsLoopingAsync!: (isLooping: boolean) => Promise<AVPlaybackStatus>;\n  setProgressUpdateIntervalAsync!: (\n    progressUpdateIntervalMillis: number\n  ) => Promise<AVPlaybackStatus>;\n\n  // ### Callback wrappers ###\n\n  _nativeOnPlaybackStatusUpdate = (event: { nativeEvent: AVPlaybackStatus }) => {\n    this._handleNewStatus(event.nativeEvent);\n  };\n\n  // TODO make sure we are passing the right stuff\n  _nativeOnLoadStart = () => {\n    if (this.props.onLoadStart) {\n      this.props.onLoadStart();\n    }\n  };\n\n  _nativeOnLoad = (event: { nativeEvent: AVPlaybackStatus }) => {\n    if (this.props.onLoad) {\n      this.props.onLoad(event.nativeEvent);\n    }\n    this._handleNewStatus(event.nativeEvent);\n  };\n\n  _nativeOnError = (event: { nativeEvent: { error: string } }) => {\n    const error: string = event.nativeEvent.error;\n    if (this.props.onError) {\n      this.props.onError(error);\n    }\n    this._handleNewStatus(getUnloadedStatus(error));\n  };\n\n  _nativeOnReadyForDisplay = (event: { nativeEvent: VideoReadyForDisplayEvent }) => {\n    if (this.props.onReadyForDisplay) {\n      this.props.onReadyForDisplay(event.nativeEvent);\n    }\n  };\n\n  _nativeOnFullscreenUpdate = (event: { nativeEvent: VideoFullscreenUpdateEvent }) => {\n    if (this.props.onIOSFullscreenUpdate && this.props.onFullscreenUpdate) {\n      console.warn(\n        \"You've supplied both `onIOSFullscreenUpdate` and `onFullscreenUpdate`. You're going to receive updates on both the callbacks.\"\n      );\n    } else if (this.props.onIOSFullscreenUpdate) {\n      console.warn(\n        \"You're using `onIOSFullscreenUpdate`. Please migrate your code to use `onFullscreenUpdate` instead.\"\n      );\n    }\n\n    if (this.props.onIOSFullscreenUpdate) {\n      this.props.onIOSFullscreenUpdate(event.nativeEvent);\n    }\n\n    if (this.props.onFullscreenUpdate) {\n      this.props.onFullscreenUpdate(event.nativeEvent);\n    }\n  };\n\n  _renderPoster = () =>\n    this.props.usePoster && this.state.showPoster ? (\n      // @ts-ignore: the react-native type declarations are overly restrictive\n      <Image style={[_STYLES.poster, this.props.posterStyle]} source={this.props.posterSource!} />\n    ) : null;\n\n  render() {\n    const source = getNativeSourceFromSource(this.props.source) || undefined;\n\n    let nativeResizeMode = ExpoVideoManagerConstants.ScaleNone;\n    if (this.props.resizeMode) {\n      const resizeMode = this.props.resizeMode;\n      if (resizeMode === ResizeMode.STRETCH) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleToFill;\n      } else if (resizeMode === ResizeMode.CONTAIN) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFit;\n      } else if (resizeMode === ResizeMode.COVER) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFill;\n      }\n    }\n\n    // Set status via individual props\n    const status: AVPlaybackStatusToSet = { ...this.props.status };\n    [\n      'progressUpdateIntervalMillis',\n      'positionMillis',\n      'shouldPlay',\n      'rate',\n      'shouldCorrectPitch',\n      'volume',\n      'isMuted',\n      'isLooping',\n    ].forEach(prop => {\n      if (prop in this.props) {\n        status[prop] = this.props[prop];\n      }\n    });\n\n    // Replace selected native props\n    // @ts-ignore: TypeScript thinks \"children\" is not in the list of props\n    const nativeProps: VideoNativeProps = {\n      ...omit(\n        this.props,\n        'source',\n        'onPlaybackStatusUpdate',\n        'usePoster',\n        'posterSource',\n        'posterStyle',\n        ...Object.keys(status)\n      ),\n      style: StyleSheet.flatten([_STYLES.base, this.props.style]),\n      source,\n      resizeMode: nativeResizeMode,\n      status,\n      onStatusUpdate: this._nativeOnPlaybackStatusUpdate,\n      onLoadStart: this._nativeOnLoadStart,\n      onLoad: this._nativeOnLoad,\n      onError: this._nativeOnError,\n      onReadyForDisplay: this._nativeOnReadyForDisplay,\n      onFullscreenUpdate: this._nativeOnFullscreenUpdate,\n    };\n\n    return (\n      <View style={nativeProps.style} pointerEvents=\"box-none\">\n        <ExponentVideo ref={this._nativeRef} {...nativeProps} style={_STYLES.video} />\n        {this._renderPoster()}\n      </View>\n    );\n  }\n}\n\nObject.assign(Video.prototype, PlaybackMixin);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}