{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/elianacohen/AndroidStudioProjects/pro-creature-habits/node_modules/@react-native-community/art/lib/Shape.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport { NativeShape } from \"./nativeComponents\";\nimport Path from \"./ARTSerializablePath\";\nimport { extractTransform, extractShadow, extractOpacity, childrenAsString, extractColor, extractStrokeJoin, extractStrokeCap, extractBrush } from \"./helpers\";\n\nvar Shape = function (_React$Component) {\n  _inherits(Shape, _React$Component);\n\n  var _super = _createSuper(Shape);\n\n  function Shape() {\n    _classCallCheck(this, Shape);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Shape, [{\n    key: \"render\",\n    value: function render() {\n      var props = this.props;\n      var path = props.d || childrenAsString(props.children);\n      var d = (path instanceof Path ? path : new Path(path)).toJSON();\n      return React.createElement(NativeShape, {\n        fill: extractBrush(props.fill, props),\n        opacity: extractOpacity(props),\n        stroke: extractColor(props.stroke),\n        strokeCap: extractStrokeCap(props.strokeCap),\n        strokeDash: props.strokeDash || null,\n        strokeJoin: extractStrokeJoin(props.strokeJoin),\n        strokeWidth: props.strokeWidth,\n        transform: extractTransform(props),\n        shadow: extractShadow(this.props),\n        d: d,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 7\n        }\n      });\n    }\n  }]);\n\n  return Shape;\n}(React.Component);\n\nShape.defaultProps = {\n  strokeWidth: 1,\n  width: 0,\n  height: 0\n};\nexport { Shape as default };","map":{"version":3,"sources":["/Users/elianacohen/AndroidStudioProjects/pro-creature-habits/node_modules/@react-native-community/art/lib/Shape.js"],"names":["React","NativeShape","Path","extractTransform","extractShadow","extractOpacity","childrenAsString","extractColor","extractStrokeJoin","extractStrokeCap","extractBrush","Shape","props","path","d","children","toJSON","fill","stroke","strokeCap","strokeDash","strokeJoin","strokeWidth","Component","defaultProps","width","height"],"mappings":";;;;;;;;;;;AASA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAAQC,WAAR;AACA,OAAOC,IAAP;AACA,SACEC,gBADF,EAEEC,aAFF,EAGEC,cAHF,EAIEC,gBAJF,EAKEC,YALF,EAMEC,iBANF,EAOEC,gBAPF,EAQEC,YARF;;IAmCqBC,K;;;;;;;;;;;;;WAOnB,kBAAS;AACP,UAAMC,KAAK,GAAG,KAAKA,KAAnB;AACA,UAAMC,IAAI,GAAGD,KAAK,CAACE,CAAN,IAAWR,gBAAgB,CAACM,KAAK,CAACG,QAAP,CAAxC;AACA,UAAMD,CAAC,GAAG,CAACD,IAAI,YAAYX,IAAhB,GAAuBW,IAAvB,GAA8B,IAAIX,IAAJ,CAASW,IAAT,CAA/B,EAA+CG,MAA/C,EAAV;AAEA,aACE,oBAAC,WAAD;AACE,QAAA,IAAI,EAAEN,YAAY,CAACE,KAAK,CAACK,IAAP,EAAaL,KAAb,CADpB;AAEE,QAAA,OAAO,EAAEP,cAAc,CAACO,KAAD,CAFzB;AAGE,QAAA,MAAM,EAAEL,YAAY,CAACK,KAAK,CAACM,MAAP,CAHtB;AAIE,QAAA,SAAS,EAAET,gBAAgB,CAACG,KAAK,CAACO,SAAP,CAJ7B;AAKE,QAAA,UAAU,EAAEP,KAAK,CAACQ,UAAN,IAAoB,IALlC;AAME,QAAA,UAAU,EAAEZ,iBAAiB,CAACI,KAAK,CAACS,UAAP,CAN/B;AAOE,QAAA,WAAW,EAAET,KAAK,CAACU,WAPrB;AAQE,QAAA,SAAS,EAAEnB,gBAAgB,CAACS,KAAD,CAR7B;AASE,QAAA,MAAM,EAAER,aAAa,CAAC,KAAKQ,KAAN,CATvB;AAUE,QAAA,CAAC,EAAEE,CAVL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAcD;;;;EA1BgCd,KAAK,CAACuB,S;;AAApBZ,K,CACZa,Y,GAAe;AACpBF,EAAAA,WAAW,EAAE,CADO;AAEpBG,EAAAA,KAAK,EAAE,CAFa;AAGpBC,EAAAA,MAAM,EAAE;AAHY,C;SADHf,K","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport * as React from 'react';\nimport {NativeShape} from './nativeComponents';\nimport Path from './ARTSerializablePath';\nimport {\n  extractTransform,\n  extractShadow,\n  extractOpacity,\n  childrenAsString,\n  extractColor,\n  extractStrokeJoin,\n  extractStrokeCap,\n  extractBrush,\n} from './helpers';\nimport type {\n  TransformProps,\n  ShadowProps,\n  OpacityProps,\n  StrokeJoin,\n  StrokeCap,\n  Brush,\n} from './types';\n\nexport type ShapeProps = TransformProps &\n  ShadowProps &\n  OpacityProps & {\n    fill?: string | Brush,\n    stroke?: string,\n    strokeCap?: StrokeCap,\n    strokeDash?: Array<number>,\n    strokeJoin?: StrokeJoin,\n    strokeWidth: number,\n    children?: React.Node,\n    d?: string | Path,\n    children?: string | Array<string>,\n    width: number,\n    height: number,\n  };\n\nexport default class Shape extends React.Component<ShapeProps> {\n  static defaultProps = {\n    strokeWidth: 1,\n    width: 0,\n    height: 0,\n  };\n\n  render() {\n    const props = this.props;\n    const path = props.d || childrenAsString(props.children);\n    const d = (path instanceof Path ? path : new Path(path)).toJSON();\n\n    return (\n      <NativeShape\n        fill={extractBrush(props.fill, props)}\n        opacity={extractOpacity(props)}\n        stroke={extractColor(props.stroke)}\n        strokeCap={extractStrokeCap(props.strokeCap)}\n        strokeDash={props.strokeDash || null}\n        strokeJoin={extractStrokeJoin(props.strokeJoin)}\n        strokeWidth={props.strokeWidth}\n        transform={extractTransform(props)}\n        shadow={extractShadow(this.props)}\n        d={d}\n      />\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}