{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport { CodedError } from '@unimodules/core';\nimport * as AppAuth from 'expo-app-auth';\nimport Constants from 'expo-constants';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar isInExpo = Constants.appOwnership === 'expo';\nexport function getPlatformGUID(config) {\n  var clientId = config.clientId;\n  var iosClientId = isInExpo ? config.iosClientId : config.iosStandaloneAppClientId;\n  var androidClientId = isInExpo ? config.androidClientId : config.androidStandaloneAppClientId;\n  var platformClientId = Platform.select({\n    ios: iosClientId,\n    android: androidClientId,\n    default: config.clientId\n  }) || clientId;\n\n  if (typeof iosClientId === 'string' && typeof androidClientId === 'string' && iosClientId === androidClientId) {\n    throw new CodedError('ERR_GOOGLE_CONFIG', 'Keys for Android and iOS cannot be the same value. Ensure you are linking the client IDs matching the given platforms in the Google APIs console: https://console.developers.google.com/apis/credentials');\n  }\n\n  if (!platformClientId) {\n    throw new CodedError('ERR_GOOGLE_CONFIG', 'Please provide the appropriate client ID. See the documentation for more details https://docs.expo.io/versions/latest/sdk/google/#loginasync');\n  }\n\n  var guid = guidFromClientId(platformClientId);\n  return guid;\n}\nvar PROJECT_ID_LENGTH = 32;\n\nfunction isValidGUID(guid) {\n  var components = guid.split('-');\n\n  if (components.length !== 2) {\n    return {\n      isValid: false,\n      reason: \"`\" + guid + \"` must be a string of numbers and an alphanumeric string \" + PROJECT_ID_LENGTH + \" characters long, joined with a hyphen.\"\n    };\n  }\n\n  var projectNumber = components[0];\n  var projectId = components[1];\n\n  if (isNaN(+projectNumber)) {\n    var hashedProjectId = Array(PROJECT_ID_LENGTH).fill('x');\n    return {\n      isValid: false,\n      reason: \"`\" + projectNumber + \"-\" + hashedProjectId + \"` project number must be a string of numbers.\"\n    };\n  }\n\n  if (!projectId.match('^[a-zA-Z0-9]+$')) {\n    var hashedProjectNumber = Array(projectNumber.length).fill('x');\n    return {\n      isValid: false,\n      reason: \"`\" + hashedProjectNumber + \"-\" + projectId + \"` project ID must be an alphanumeric string \" + PROJECT_ID_LENGTH + \" characters long.\"\n    };\n  }\n\n  return {\n    isValid: true\n  };\n}\n\nfunction guidFromClientId(clientId) {\n  var clientIdComponents = clientId.split('.').filter(function (component) {\n    return component.includes('-');\n  });\n  var guid = clientIdComponents[0];\n\n  var _isValidGUID = isValidGUID(guid),\n      isValid = _isValidGUID.isValid,\n      reason = _isValidGUID.reason;\n\n  if (!isValid) {\n    throw new CodedError('ERR_GOOGLE_GUID', reason + ' Please ensure you copied the client ID correctly.');\n  }\n\n  return guid;\n}\n\nexport function logInAsync(config) {\n  var userDefinedScopes, requiredScopes, scopes, guid, clientId, redirectUrl, extras, logInResult, userInfoResponse, userInfo, message;\n  return _regeneratorRuntime.async(function logInAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (config.behavior !== undefined) {\n            console.warn(\"Deprecated: Native Google Sign-In has been moved to Expo.GoogleSignIn ('expo-google-sign-in') Falling back to `web` behavior. `behavior` deprecated in SDK 34\");\n          }\n\n          if (config.webClientId !== undefined) {\n            console.warn('Deprecated: You will need to use expo-google-sign-in to do server side authentication outside of the Expo client');\n          }\n\n          userDefinedScopes = config.scopes || [];\n          requiredScopes = [].concat(_toConsumableArray(userDefinedScopes), ['profile', 'email', 'openid']);\n          scopes = _toConsumableArray(new Set(requiredScopes));\n          guid = getPlatformGUID(config);\n          clientId = guid + \".apps.googleusercontent.com\";\n          redirectUrl = config.redirectUrl ? config.redirectUrl : AppAuth.OAuthRedirect + \":/oauth2redirect/google\";\n          extras = {};\n\n          if (config.language) {\n            extras.hl = config.language;\n          }\n\n          if (config.loginHint) {\n            extras.login_hint = config.loginHint;\n          }\n\n          _context.prev = 11;\n          _context.next = 14;\n          return _regeneratorRuntime.awrap(AppAuth.authAsync({\n            issuer: 'https://accounts.google.com',\n            scopes: scopes,\n            redirectUrl: redirectUrl,\n            clientId: clientId,\n            additionalParameters: extras\n          }));\n\n        case 14:\n          logInResult = _context.sent;\n          _context.next = 17;\n          return _regeneratorRuntime.awrap(fetch('https://www.googleapis.com/userinfo/v2/me', {\n            headers: {\n              Authorization: \"Bearer \" + logInResult.accessToken\n            }\n          }));\n\n        case 17:\n          userInfoResponse = _context.sent;\n          _context.next = 20;\n          return _regeneratorRuntime.awrap(userInfoResponse.json());\n\n        case 20:\n          userInfo = _context.sent;\n          return _context.abrupt(\"return\", {\n            type: 'success',\n            accessToken: logInResult.accessToken,\n            idToken: logInResult.idToken,\n            refreshToken: logInResult.refreshToken,\n            user: {\n              id: userInfo.id,\n              name: userInfo.name,\n              givenName: userInfo.given_name,\n              familyName: userInfo.family_name,\n              photoUrl: userInfo.picture,\n              email: userInfo.email\n            }\n          });\n\n        case 24:\n          _context.prev = 24;\n          _context.t0 = _context[\"catch\"](11);\n          message = _context.t0.message.toLowerCase();\n\n          if (!(message.includes('user cancelled') || message.includes('error -3'))) {\n            _context.next = 29;\n            break;\n          }\n\n          return _context.abrupt(\"return\", {\n            type: 'cancel'\n          });\n\n        case 29:\n          throw _context.t0;\n\n        case 30:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[11, 24]], Promise);\n}\nexport function logOutAsync(_ref) {\n  var accessToken, inputConfig, guid, clientId, config;\n  return _regeneratorRuntime.async(function logOutAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          accessToken = _ref.accessToken, inputConfig = _objectWithoutProperties(_ref, [\"accessToken\"]);\n          guid = getPlatformGUID(inputConfig);\n          clientId = guid + \".apps.googleusercontent.com\";\n          config = {\n            issuer: 'https://accounts.google.com',\n            clientId: clientId\n          };\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap(AppAuth.revokeAsync(config, {\n            token: accessToken,\n            isClientIdProvided: !!clientId\n          }));\n\n        case 6:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 7:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["../src/Google.ts"],"names":[],"mappings":"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","sourcesContent":["import { CodedError } from '@unimodules/core';\nimport * as AppAuth from 'expo-app-auth';\nimport Constants from 'expo-constants';\nimport { Platform } from 'react-native';\n\nconst isInExpo = Constants.appOwnership === 'expo';\nexport type GoogleLogInConfig = {\n  /**\n   * Used in the Expo Play Store client app on Android (development only).\n   *\n   * - Create an Android OAuth Client ID from the [Credentials Page](https://console.developers.google.com/apis/credentials).\n   * - Run `openssl rand -base64 32 | openssl sha1 -c` in your terminal, it will output a string that looks like A1:B2:C3 but longer.\n   * - Paste the output from the previous step into the \"Signing-certificate fingerprint\" text field.\n   * - Use `host.exp.exponent` as the \"Package name\".\n   */\n  androidClientId?: string;\n  /**\n   * Used in the Expo App Store client app on iOS (development only).\n   *\n   * - Select \"iOS Application\" as the Application Type from the [Credentials Page](https://console.developers.google.com/apis/credentials).\n   * - Use `host.exp.exponent` as the bundle identifier.\n   */\n  iosClientId?: string;\n  /**\n   * Used in your custom Android app (production).\n   * Visit the docs page [Deploying to a standalone app on Android](https://docs.expo.io/versions/latest/sdk/google/#deploying-to-a-standalone-app-on-android) for more info.\n   */\n  androidStandaloneAppClientId?: string;\n  /**\n   * Used in your custom iOS app (production).\n   * Visit the docs page [Deploying to a standalone app on iOS](https://docs.expo.io/versions/latest/sdk/google/#deploying-to-a-standalone-app-on-ios) for more info.\n   */\n  iosStandaloneAppClientId?: string;\n  /**\n   * @deprecated [learn more here](https://docs.expo.io/versions/latest/sdk/google/#server-side-apis).\n   */\n  webClientId?: string;\n  /**\n   * System authentication is very different from web auth.\n   * All system functionality has been moved to expo-google-sign-in\n   */\n  behavior?: 'system' | 'web';\n  scopes?: string[];\n  /**\n   * Optionally you can define your own redirect URL.\n   * If this isn't defined then it will be infered from the correct client ID.\n   */\n  redirectUrl?: string;\n  /**\n   * Language for the sign in UI, in the form of ISO 639-1 language code optionally followed by a dash\n   * and ISO 3166-1 alpha-2 region code, such as 'it' or 'pt-PT'.\n   * Only set this value if it's different from the system default (which you can access via expo-localization).\n   */\n  language?: string;\n  /**\n   * If the user's email address is known ahead of time, it can be supplied to be the default option.\n   * If the user has approved access for this app in the past then auth may return without any further interaction.\n   */\n  loginHint?: string;\n  /**\n   * If no other client IDs are defined this will be used.\n   */\n  clientId?: string;\n};\n\nexport type GoogleUser = {\n  id?: string;\n  name?: string;\n  givenName?: string;\n  familyName?: string;\n  photoUrl?: string;\n  email?: string;\n};\n\nexport type LogInResult =\n  | {\n      type: 'cancel';\n    }\n  | {\n      type: 'success';\n      accessToken: string | null;\n      idToken: string | null;\n      refreshToken: string | null;\n      user: GoogleUser;\n    };\n\nexport function getPlatformGUID(config: GoogleLogInConfig) {\n  const { clientId } = config;\n\n  const iosClientId = isInExpo ? config.iosClientId : config.iosStandaloneAppClientId;\n  const androidClientId = isInExpo ? config.androidClientId : config.androidStandaloneAppClientId;\n\n  const platformClientId =\n    Platform.select({\n      ios: iosClientId,\n      android: androidClientId,\n      default: config.clientId,\n    }) || clientId;\n\n  if (\n    typeof iosClientId === 'string' &&\n    typeof androidClientId === 'string' &&\n    iosClientId === androidClientId\n  ) {\n    throw new CodedError(\n      'ERR_GOOGLE_CONFIG',\n      'Keys for Android and iOS cannot be the same value. Ensure you are linking the client IDs matching the given platforms in the Google APIs console: https://console.developers.google.com/apis/credentials'\n    );\n  }\n\n  if (!platformClientId) {\n    throw new CodedError(\n      'ERR_GOOGLE_CONFIG',\n      'Please provide the appropriate client ID. See the documentation for more details https://docs.expo.io/versions/latest/sdk/google/#loginasync'\n    );\n  }\n\n  const guid = guidFromClientId(platformClientId);\n  return guid;\n}\n\nconst PROJECT_ID_LENGTH = 32;\n\nfunction isValidGUID(guid: string) {\n  const components = guid.split('-');\n  if (components.length !== 2) {\n    return {\n      isValid: false,\n      reason: `\\`${guid}\\` must be a string of numbers and an alphanumeric string ${PROJECT_ID_LENGTH} characters long, joined with a hyphen.`,\n    };\n  }\n  const projectNumber = components[0];\n  const projectId = components[1];\n  if (isNaN(+projectNumber)) {\n    const hashedProjectId = Array(PROJECT_ID_LENGTH).fill('x');\n    return {\n      isValid: false,\n      reason: `\\`${projectNumber}-${hashedProjectId}\\` project number must be a string of numbers.`,\n    };\n  }\n  if (!projectId.match('^[a-zA-Z0-9]+$')) {\n    const hashedProjectNumber = Array(projectNumber.length).fill('x');\n    return {\n      isValid: false,\n      reason: `\\`${hashedProjectNumber}-${projectId}\\` project ID must be an alphanumeric string ${PROJECT_ID_LENGTH} characters long.`,\n    };\n  }\n\n  return { isValid: true };\n}\n\nfunction guidFromClientId(clientId: string): string {\n  const clientIdComponents = clientId.split('.').filter(component => component.includes('-'));\n\n  const guid = clientIdComponents[0];\n  const { isValid, reason } = isValidGUID(guid);\n  if (!isValid) {\n    throw new CodedError(\n      'ERR_GOOGLE_GUID',\n      reason + ' Please ensure you copied the client ID correctly.'\n    );\n  }\n\n  return guid;\n}\n\n/**\n * Prompts the user to log into Google and grants your app permission to access some of their Google data, as specified by the scopes.\n *\n * Get started in:\n * - [**Expo Client**](https://docs.expo.io/versions/latest/sdk/google/#using-it-inside-of-the-expo-app)\n * - [**Standalone**](https://docs.expo.io/versions/latest/sdk/google/#deploying-to-a-standalone-app-on-ios)\n *\n * @param config\n */\nexport async function logInAsync(config: GoogleLogInConfig): Promise<LogInResult> {\n  if (config.behavior !== undefined) {\n    console.warn(\n      \"Deprecated: Native Google Sign-In has been moved to Expo.GoogleSignIn ('expo-google-sign-in') Falling back to `web` behavior. `behavior` deprecated in SDK 34\"\n    );\n  }\n\n  if (config.webClientId !== undefined) {\n    console.warn(\n      'Deprecated: You will need to use expo-google-sign-in to do server side authentication outside of the Expo client'\n    );\n  }\n\n  const userDefinedScopes = config.scopes || [];\n  /* Add the required scopes for returning profile data. */\n  const requiredScopes = [...userDefinedScopes, 'profile', 'email', 'openid'];\n  /* Remove duplicates */\n  const scopes = [...new Set(requiredScopes)];\n\n  const guid = getPlatformGUID(config);\n\n  const clientId = `${guid}.apps.googleusercontent.com`;\n  const redirectUrl = config.redirectUrl\n    ? config.redirectUrl\n    : `${AppAuth.OAuthRedirect}:/oauth2redirect/google`;\n\n  const extras: Record<string, string> = {};\n  if (config.language) {\n    // The OpenID property `ui_locales` doesn't seem to work as expected,\n    // but `hl` will work to change the UI language.\n    // Reference: https://github.com/googleapis/google-api-nodejs-client/blob/9d0dd2b6fa03c5e32efb0e39daac6291ebad2c3d/src/apis/customsearch/v1.ts#L230\n    extras.hl = config.language;\n  }\n  if (config.loginHint) {\n    // Reference https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest\n    extras.login_hint = config.loginHint;\n  }\n\n  try {\n    const logInResult = await AppAuth.authAsync({\n      issuer: 'https://accounts.google.com',\n      scopes,\n      redirectUrl,\n      clientId,\n      additionalParameters: extras,\n    });\n\n    // Web login only returns an accessToken so use it to fetch the same info as the native login\n    // does.\n    const userInfoResponse = await fetch('https://www.googleapis.com/userinfo/v2/me', {\n      headers: { Authorization: `Bearer ${logInResult.accessToken}` },\n    });\n    const userInfo = await userInfoResponse.json();\n\n    return {\n      type: 'success',\n      accessToken: logInResult.accessToken,\n      idToken: logInResult.idToken,\n      refreshToken: logInResult.refreshToken,\n      user: {\n        id: userInfo.id,\n        name: userInfo.name,\n        givenName: userInfo.given_name,\n        familyName: userInfo.family_name,\n        photoUrl: userInfo.picture,\n        email: userInfo.email,\n      },\n    };\n  } catch (error) {\n    const message = (error.message as string).toLowerCase();\n    // Error code -3 is the native error code for user cancel on iOS\n    if (message.includes('user cancelled') || message.includes('error -3')) {\n      return { type: 'cancel' };\n    }\n    throw error;\n  }\n}\n\nexport async function logOutAsync({\n  accessToken,\n  ...inputConfig\n}: GoogleLogInConfig & { accessToken: string }): Promise<any> {\n  const guid = getPlatformGUID(inputConfig);\n\n  const clientId = `${guid}.apps.googleusercontent.com`;\n\n  const config = {\n    issuer: 'https://accounts.google.com',\n    clientId,\n  };\n\n  return await AppAuth.revokeAsync(config, {\n    token: accessToken,\n    isClientIdProvided: !!clientId,\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}