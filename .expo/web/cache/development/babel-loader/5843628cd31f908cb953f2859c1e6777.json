{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Matt\\\\Documents\\\\GitHub\\\\pro-creature-habits\\\\node_modules\\\\react-native-gesture-handler\\\\Swipeable.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport { PanGestureHandler, TapGestureHandler, State } from \"./GestureHandler\";\nvar DRAG_TOSS = 0.05;\n\nvar Swipeable = function (_Component) {\n  _inherits(Swipeable, _Component);\n\n  var _super = _createSuper(Swipeable);\n\n  function Swipeable(_props) {\n    var _this;\n\n    _classCallCheck(this, Swipeable);\n\n    _this = _super.call(this, _props);\n\n    _this._updateAnimatedEvent = function (props, state) {\n      var friction = props.friction,\n          overshootFriction = props.overshootFriction,\n          useNativeAnimations = props.useNativeAnimations;\n      var dragX = state.dragX,\n          rowTranslation = state.rowTranslation,\n          _state$leftWidth = state.leftWidth,\n          leftWidth = _state$leftWidth === void 0 ? 0 : _state$leftWidth,\n          _state$rowWidth = state.rowWidth,\n          rowWidth = _state$rowWidth === void 0 ? 0 : _state$rowWidth;\n      var _state$rightOffset = state.rightOffset,\n          rightOffset = _state$rightOffset === void 0 ? rowWidth : _state$rightOffset;\n      var rightWidth = Math.max(0, rowWidth - rightOffset);\n      var _props$overshootLeft = props.overshootLeft,\n          overshootLeft = _props$overshootLeft === void 0 ? leftWidth > 0 : _props$overshootLeft,\n          _props$overshootRight = props.overshootRight,\n          overshootRight = _props$overshootRight === void 0 ? rightWidth > 0 : _props$overshootRight;\n      var transX = Animated.add(rowTranslation, dragX.interpolate({\n        inputRange: [0, friction],\n        outputRange: [0, 1]\n      })).interpolate({\n        inputRange: [-rightWidth - (overshootRight ? 1 : overshootFriction), -rightWidth, leftWidth, leftWidth + (overshootLeft ? 1 : overshootFriction)],\n        outputRange: [-rightWidth - (overshootRight || overshootFriction > 1 ? 1 : 0), -rightWidth, leftWidth, leftWidth + (overshootLeft || overshootFriction > 1 ? 1 : 0)]\n      });\n      _this._transX = transX;\n      _this._showLeftAction = leftWidth > 0 ? transX.interpolate({\n        inputRange: [-1, 0, leftWidth],\n        outputRange: [0, 0, 1]\n      }) : new Animated.Value(0);\n      _this._leftActionTranslate = _this._showLeftAction.interpolate({\n        inputRange: [0, Number.MIN_VALUE],\n        outputRange: [-10000, 0],\n        extrapolate: 'clamp'\n      });\n      _this._showRightAction = rightWidth > 0 ? transX.interpolate({\n        inputRange: [-rightWidth, 0, 1],\n        outputRange: [1, 0, 0]\n      }) : new Animated.Value(0);\n      _this._rightActionTranslate = _this._showRightAction.interpolate({\n        inputRange: [0, Number.MIN_VALUE],\n        outputRange: [-10000, 0],\n        extrapolate: 'clamp'\n      });\n    };\n\n    _this._onTapHandlerStateChange = function (_ref) {\n      var nativeEvent = _ref.nativeEvent;\n\n      if (nativeEvent.oldState === State.ACTIVE) {\n        _this.close();\n      }\n    };\n\n    _this._onHandlerStateChange = function (_ref2) {\n      var nativeEvent = _ref2.nativeEvent;\n\n      if (nativeEvent.oldState === State.ACTIVE) {\n        _this._handleRelease(nativeEvent);\n      }\n    };\n\n    _this._handleRelease = function (nativeEvent) {\n      var velocityX = nativeEvent.velocityX,\n          dragX = nativeEvent.translationX;\n      var _this$state = _this.state,\n          _this$state$leftWidth = _this$state.leftWidth,\n          leftWidth = _this$state$leftWidth === void 0 ? 0 : _this$state$leftWidth,\n          _this$state$rowWidth = _this$state.rowWidth,\n          rowWidth = _this$state$rowWidth === void 0 ? 0 : _this$state$rowWidth,\n          rowState = _this$state.rowState;\n      var _this$state$rightOffs = _this.state.rightOffset,\n          rightOffset = _this$state$rightOffs === void 0 ? rowWidth : _this$state$rightOffs;\n      var rightWidth = rowWidth - rightOffset;\n      var _this$props = _this.props,\n          friction = _this$props.friction,\n          _this$props$leftThres = _this$props.leftThreshold,\n          leftThreshold = _this$props$leftThres === void 0 ? leftWidth / 2 : _this$props$leftThres,\n          _this$props$rightThre = _this$props.rightThreshold,\n          rightThreshold = _this$props$rightThre === void 0 ? rightWidth / 2 : _this$props$rightThre;\n      var startOffsetX = _this._currentOffset() + dragX / friction;\n      var translationX = (dragX + DRAG_TOSS * velocityX) / friction;\n      var toValue = 0;\n\n      if (rowState === 0) {\n        if (translationX > leftThreshold) {\n          toValue = leftWidth;\n        } else if (translationX < -rightThreshold) {\n          toValue = -rightWidth;\n        }\n      } else if (rowState === 1) {\n        if (translationX > -leftThreshold) {\n          toValue = leftWidth;\n        }\n      } else {\n        if (translationX < rightThreshold) {\n          toValue = -rightWidth;\n        }\n      }\n\n      _this._animateRow(startOffsetX, toValue, velocityX / friction);\n    };\n\n    _this._animateRow = function (fromValue, toValue, velocityX) {\n      var _this$state2 = _this.state,\n          dragX = _this$state2.dragX,\n          rowTranslation = _this$state2.rowTranslation;\n      dragX.setValue(0);\n      rowTranslation.setValue(fromValue);\n\n      _this.setState({\n        rowState: Math.sign(toValue)\n      });\n\n      Animated.spring(rowTranslation, _objectSpread({\n        restSpeedThreshold: 1.7,\n        restDisplacementThreshold: 0.4,\n        velocity: velocityX,\n        bounciness: 0,\n        toValue: toValue,\n        useNativeDriver: _this.props.useNativeAnimations\n      }, _this.props.animationOptions)).start(function (_ref3) {\n        var finished = _ref3.finished;\n\n        if (finished) {\n          if (toValue > 0 && _this.props.onSwipeableLeftOpen) {\n            _this.props.onSwipeableLeftOpen();\n          } else if (toValue < 0 && _this.props.onSwipeableRightOpen) {\n            _this.props.onSwipeableRightOpen();\n          }\n\n          if (toValue === 0) {\n            _this.props.onSwipeableClose && _this.props.onSwipeableClose();\n          } else {\n            _this.props.onSwipeableOpen && _this.props.onSwipeableOpen();\n          }\n        }\n      });\n\n      if (toValue > 0 && _this.props.onSwipeableLeftWillOpen) {\n        _this.props.onSwipeableLeftWillOpen();\n      } else if (toValue < 0 && _this.props.onSwipeableRightWillOpen) {\n        _this.props.onSwipeableRightWillOpen();\n      }\n\n      if (toValue === 0) {\n        _this.props.onSwipeableWillClose && _this.props.onSwipeableWillClose();\n      } else {\n        _this.props.onSwipeableWillOpen && _this.props.onSwipeableWillOpen();\n      }\n    };\n\n    _this._onRowLayout = function (_ref4) {\n      var nativeEvent = _ref4.nativeEvent;\n\n      _this.setState({\n        rowWidth: nativeEvent.layout.width\n      });\n    };\n\n    _this._currentOffset = function () {\n      var _this$state3 = _this.state,\n          _this$state3$leftWidt = _this$state3.leftWidth,\n          leftWidth = _this$state3$leftWidt === void 0 ? 0 : _this$state3$leftWidt,\n          _this$state3$rowWidth = _this$state3.rowWidth,\n          rowWidth = _this$state3$rowWidth === void 0 ? 0 : _this$state3$rowWidth,\n          rowState = _this$state3.rowState;\n      var _this$state$rightOffs2 = _this.state.rightOffset,\n          rightOffset = _this$state$rightOffs2 === void 0 ? rowWidth : _this$state$rightOffs2;\n      var rightWidth = rowWidth - rightOffset;\n\n      if (rowState === 1) {\n        return leftWidth;\n      } else if (rowState === -1) {\n        return -rightWidth;\n      }\n\n      return 0;\n    };\n\n    _this.close = function () {\n      _this._animateRow(_this._currentOffset(), 0);\n    };\n\n    _this.openLeft = function () {\n      var _this$state$leftWidth2 = _this.state.leftWidth,\n          leftWidth = _this$state$leftWidth2 === void 0 ? 0 : _this$state$leftWidth2;\n\n      _this._animateRow(_this._currentOffset(), leftWidth);\n    };\n\n    _this.openRight = function () {\n      var _this$state$rowWidth2 = _this.state.rowWidth,\n          rowWidth = _this$state$rowWidth2 === void 0 ? 0 : _this$state$rowWidth2;\n      var _this$state$rightOffs3 = _this.state.rightOffset,\n          rightOffset = _this$state$rightOffs3 === void 0 ? rowWidth : _this$state$rightOffs3;\n      var rightWidth = rowWidth - rightOffset;\n\n      _this._animateRow(_this._currentOffset(), -rightWidth);\n    };\n\n    var _dragX = new Animated.Value(0);\n\n    _this.state = {\n      dragX: _dragX,\n      rowTranslation: new Animated.Value(0),\n      rowState: 0,\n      leftWidth: undefined,\n      rightOffset: undefined,\n      rowWidth: undefined\n    };\n\n    _this._updateAnimatedEvent(_props, _this.state);\n\n    _this._onGestureEvent = Animated.event([{\n      nativeEvent: {\n        translationX: _dragX\n      }\n    }], {\n      useNativeDriver: _props.useNativeAnimations\n    });\n    return _this;\n  }\n\n  _createClass(Swipeable, [{\n    key: \"UNSAFE_componentWillUpdate\",\n    value: function UNSAFE_componentWillUpdate(props, state) {\n      if (this.props.friction !== props.friction || this.props.overshootLeft !== props.overshootLeft || this.props.overshootRight !== props.overshootRight || this.props.overshootFriction !== props.overshootFriction || this.state.leftWidth !== state.leftWidth || this.state.rightOffset !== state.rightOffset || this.state.rowWidth !== state.rowWidth) {\n        this._updateAnimatedEvent(props, state);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var rowState = this.state.rowState;\n      var _this$props2 = this.props,\n          children = _this$props2.children,\n          renderLeftActions = _this$props2.renderLeftActions,\n          renderRightActions = _this$props2.renderRightActions;\n      var left = renderLeftActions && React.createElement(Animated.View, {\n        style: [styles.leftActions, {\n          transform: [{\n            translateX: this._leftActionTranslate\n          }]\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 7\n        }\n      }, renderLeftActions(this._showLeftAction, this._transX), React.createElement(View, {\n        onLayout: function onLayout(_ref5) {\n          var nativeEvent = _ref5.nativeEvent;\n          return _this2.setState({\n            leftWidth: nativeEvent.layout.x\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 9\n        }\n      }));\n      var right = renderRightActions && React.createElement(Animated.View, {\n        style: [styles.rightActions, {\n          transform: [{\n            translateX: this._rightActionTranslate\n          }]\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 7\n        }\n      }, renderRightActions(this._showRightAction, this._transX), React.createElement(View, {\n        onLayout: function onLayout(_ref6) {\n          var nativeEvent = _ref6.nativeEvent;\n          return _this2.setState({\n            rightOffset: nativeEvent.layout.x\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 9\n        }\n      }));\n      return React.createElement(PanGestureHandler, _extends({\n        activeOffsetX: [-10, 10]\n      }, this.props, {\n        onGestureEvent: this._onGestureEvent,\n        onHandlerStateChange: this._onHandlerStateChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 7\n        }\n      }), React.createElement(Animated.View, {\n        onLayout: this._onRowLayout,\n        style: [styles.container, this.props.containerStyle],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 9\n        }\n      }, left, right, React.createElement(TapGestureHandler, {\n        enabled: rowState !== 0,\n        onHandlerStateChange: this._onTapHandlerStateChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 11\n        }\n      }, React.createElement(Animated.View, {\n        pointerEvents: rowState === 0 ? 'auto' : 'box-only',\n        style: [{\n          transform: [{\n            translateX: this._transX\n          }]\n        }, this.props.childrenContainerStyle],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 13\n        }\n      }, children))));\n    }\n  }]);\n\n  return Swipeable;\n}(Component);\n\nSwipeable.defaultProps = {\n  friction: 1,\n  overshootFriction: 1,\n  useNativeAnimations: true\n};\nexport { Swipeable as default };\nvar styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden'\n  },\n  leftActions: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    flexDirection: I18nManager.isRTL ? 'row-reverse' : 'row'\n  }),\n  rightActions: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    flexDirection: I18nManager.isRTL ? 'row' : 'row-reverse'\n  })\n});","map":{"version":3,"sources":["C:/Users/Matt/Documents/GitHub/pro-creature-habits/node_modules/react-native-gesture-handler/Swipeable.js"],"names":["React","Component","PanGestureHandler","TapGestureHandler","State","DRAG_TOSS","Swipeable","props","_updateAnimatedEvent","state","friction","overshootFriction","useNativeAnimations","dragX","rowTranslation","leftWidth","rowWidth","rightOffset","rightWidth","Math","max","overshootLeft","overshootRight","transX","Animated","add","interpolate","inputRange","outputRange","_transX","_showLeftAction","Value","_leftActionTranslate","Number","MIN_VALUE","extrapolate","_showRightAction","_rightActionTranslate","_onTapHandlerStateChange","nativeEvent","oldState","ACTIVE","close","_onHandlerStateChange","_handleRelease","velocityX","translationX","rowState","leftThreshold","rightThreshold","startOffsetX","_currentOffset","toValue","_animateRow","fromValue","setValue","setState","sign","spring","restSpeedThreshold","restDisplacementThreshold","velocity","bounciness","useNativeDriver","animationOptions","start","finished","onSwipeableLeftOpen","onSwipeableRightOpen","onSwipeableClose","onSwipeableOpen","onSwipeableLeftWillOpen","onSwipeableRightWillOpen","onSwipeableWillClose","onSwipeableWillOpen","_onRowLayout","layout","width","openLeft","openRight","undefined","_onGestureEvent","event","children","renderLeftActions","renderRightActions","left","styles","leftActions","transform","translateX","x","right","rightActions","container","containerStyle","childrenContainerStyle","defaultProps","StyleSheet","create","overflow","absoluteFillObject","flexDirection","I18nManager","isRTL"],"mappings":"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","sourcesContent":["// @flow\r\n\r\n// Similarily to the DrawerLayout component this deserves to be put in a\r\n// separate repo. Although, keeping it here for the time being will allow us\r\n// to move faster and fix possible issues quicker\r\n\r\nimport React, { Component } from 'react';\r\nimport { Animated, StyleSheet, View, I18nManager } from 'react-native';\r\n\r\nimport { PanGestureHandler, TapGestureHandler, State } from './GestureHandler';\r\n\r\nconst DRAG_TOSS = 0.05;\r\n\r\nexport type PropType = {\r\n  children: any,\r\n  friction: number,\r\n  leftThreshold?: number,\r\n  rightThreshold?: number,\r\n  overshootLeft?: boolean,\r\n  overshootRight?: boolean,\r\n  overshootFriction: number,\r\n  onSwipeableLeftOpen?: Function,\r\n  onSwipeableRightOpen?: Function,\r\n  onSwipeableOpen?: Function,\r\n  onSwipeableClose?: Function,\r\n  onSwipeableLeftWillOpen?: Function,\r\n  onSwipeableRightWillOpen?: Function,\r\n  onSwipeableWillOpen?: Function,\r\n  onSwipeableWillClose?: Function,\r\n  renderLeftActions?: (\r\n    progressAnimatedValue: any,\r\n    dragAnimatedValue: any\r\n  ) => any,\r\n  renderRightActions?: (\r\n    progressAnimatedValue: any,\r\n    dragAnimatedValue: any\r\n  ) => any,\r\n  useNativeAnimations: boolean,\r\n  animationOptions?: Object,\r\n  containerStyle?: Object,\r\n  childrenContainerStyle?: Object,\r\n};\r\ntype StateType = {\r\n  dragX: Animated.Value,\r\n  rowTranslation: Animated.Value,\r\n  rowState: number,\r\n  leftWidth: number | typeof undefined,\r\n  rightOffset: number | typeof undefined,\r\n  rowWidth: number | typeof undefined,\r\n};\r\n\r\nexport default class Swipeable extends Component<PropType, StateType> {\r\n  static defaultProps = {\r\n    friction: 1,\r\n    overshootFriction: 1,\r\n    useNativeAnimations: true,\r\n  };\r\n  _onGestureEvent: ?Animated.Event;\r\n  _transX: ?Animated.Interpolation;\r\n  _showLeftAction: ?Animated.Interpolation | ?Animated.Value;\r\n  _leftActionTranslate: ?Animated.Interpolation;\r\n  _showRightAction: ?Animated.Interpolation | ?Animated.Value;\r\n  _rightActionTranslate: ?Animated.Interpolation;\r\n\r\n  constructor(props: PropType) {\r\n    super(props);\r\n    const dragX = new Animated.Value(0);\r\n    this.state = {\r\n      dragX,\r\n      rowTranslation: new Animated.Value(0),\r\n      rowState: 0,\r\n      leftWidth: undefined,\r\n      rightOffset: undefined,\r\n      rowWidth: undefined,\r\n    };\r\n    this._updateAnimatedEvent(props, this.state);\r\n\r\n    this._onGestureEvent = Animated.event(\r\n      [{ nativeEvent: { translationX: dragX } }],\r\n      { useNativeDriver: props.useNativeAnimations }\r\n    );\r\n  }\r\n\r\n  UNSAFE_componentWillUpdate(props: PropType, state: StateType) {\r\n    if (\r\n      this.props.friction !== props.friction ||\r\n      this.props.overshootLeft !== props.overshootLeft ||\r\n      this.props.overshootRight !== props.overshootRight ||\r\n      this.props.overshootFriction !== props.overshootFriction ||\r\n      this.state.leftWidth !== state.leftWidth ||\r\n      this.state.rightOffset !== state.rightOffset ||\r\n      this.state.rowWidth !== state.rowWidth\r\n    ) {\r\n      this._updateAnimatedEvent(props, state);\r\n    }\r\n  }\r\n\r\n  _updateAnimatedEvent = (props: PropType, state: StateType) => {\r\n    const { friction, overshootFriction, useNativeAnimations } = props;\r\n    const { dragX, rowTranslation, leftWidth = 0, rowWidth = 0 } = state;\r\n    const { rightOffset = rowWidth } = state;\r\n    const rightWidth = Math.max(0, rowWidth - rightOffset);\r\n\r\n    const {\r\n      overshootLeft = leftWidth > 0,\r\n      overshootRight = rightWidth > 0,\r\n    } = props;\r\n\r\n    const transX = Animated.add(\r\n      rowTranslation,\r\n      dragX.interpolate({\r\n        inputRange: [0, friction],\r\n        outputRange: [0, 1],\r\n      })\r\n    ).interpolate({\r\n      inputRange: [\r\n        -rightWidth - (overshootRight ? 1 : overshootFriction),\r\n        -rightWidth,\r\n        leftWidth,\r\n        leftWidth + (overshootLeft ? 1 : overshootFriction),\r\n      ],\r\n      outputRange: [\r\n        -rightWidth - (overshootRight || overshootFriction > 1 ? 1 : 0),\r\n        -rightWidth,\r\n        leftWidth,\r\n        leftWidth + (overshootLeft || overshootFriction > 1 ? 1 : 0),\r\n      ],\r\n    });\r\n    this._transX = transX;\r\n    this._showLeftAction =\r\n      leftWidth > 0\r\n        ? transX.interpolate({\r\n            inputRange: [-1, 0, leftWidth],\r\n            outputRange: [0, 0, 1],\r\n          })\r\n        : new Animated.Value(0);\r\n    this._leftActionTranslate = this._showLeftAction.interpolate({\r\n      inputRange: [0, Number.MIN_VALUE],\r\n      outputRange: [-10000, 0],\r\n      extrapolate: 'clamp',\r\n    });\r\n    this._showRightAction =\r\n      rightWidth > 0\r\n        ? transX.interpolate({\r\n            inputRange: [-rightWidth, 0, 1],\r\n            outputRange: [1, 0, 0],\r\n          })\r\n        : new Animated.Value(0);\r\n    this._rightActionTranslate = this._showRightAction.interpolate({\r\n      inputRange: [0, Number.MIN_VALUE],\r\n      outputRange: [-10000, 0],\r\n      extrapolate: 'clamp',\r\n    });\r\n  };\r\n\r\n  _onTapHandlerStateChange = ({ nativeEvent }) => {\r\n    if (nativeEvent.oldState === State.ACTIVE) {\r\n      this.close();\r\n    }\r\n  };\r\n\r\n  _onHandlerStateChange = ({ nativeEvent }) => {\r\n    if (nativeEvent.oldState === State.ACTIVE) {\r\n      this._handleRelease(nativeEvent);\r\n    }\r\n  };\r\n\r\n  _handleRelease = nativeEvent => {\r\n    const { velocityX, translationX: dragX } = nativeEvent;\r\n    const { leftWidth = 0, rowWidth = 0, rowState } = this.state;\r\n    const { rightOffset = rowWidth } = this.state;\r\n    const rightWidth = rowWidth - rightOffset;\r\n    const {\r\n      friction,\r\n      leftThreshold = leftWidth / 2,\r\n      rightThreshold = rightWidth / 2,\r\n    } = this.props;\r\n\r\n    const startOffsetX = this._currentOffset() + dragX / friction;\r\n    const translationX = (dragX + DRAG_TOSS * velocityX) / friction;\r\n\r\n    let toValue = 0;\r\n    if (rowState === 0) {\r\n      if (translationX > leftThreshold) {\r\n        toValue = leftWidth;\r\n      } else if (translationX < -rightThreshold) {\r\n        toValue = -rightWidth;\r\n      }\r\n    } else if (rowState === 1) {\r\n      // swiped to left\r\n      if (translationX > -leftThreshold) {\r\n        toValue = leftWidth;\r\n      }\r\n    } else {\r\n      // swiped to right\r\n      if (translationX < rightThreshold) {\r\n        toValue = -rightWidth;\r\n      }\r\n    }\r\n\r\n    this._animateRow(startOffsetX, toValue, velocityX / friction);\r\n  };\r\n\r\n  _animateRow = (fromValue, toValue, velocityX) => {\r\n    const { dragX, rowTranslation } = this.state;\r\n    dragX.setValue(0);\r\n    rowTranslation.setValue(fromValue);\r\n\r\n    this.setState({ rowState: Math.sign(toValue) });\r\n    Animated.spring(rowTranslation, {\r\n      restSpeedThreshold: 1.7,\r\n      restDisplacementThreshold: 0.4,\r\n      velocity: velocityX,\r\n      bounciness: 0,\r\n      toValue,\r\n      useNativeDriver: this.props.useNativeAnimations,\r\n      ...this.props.animationOptions,\r\n    }).start(({ finished }) => {\r\n      if (finished) {\r\n        if (toValue > 0 && this.props.onSwipeableLeftOpen) {\r\n          this.props.onSwipeableLeftOpen();\r\n        } else if (toValue < 0 && this.props.onSwipeableRightOpen) {\r\n          this.props.onSwipeableRightOpen();\r\n        }\r\n\r\n        if (toValue === 0) {\r\n          this.props.onSwipeableClose && this.props.onSwipeableClose();\r\n        } else {\r\n          this.props.onSwipeableOpen && this.props.onSwipeableOpen();\r\n        }\r\n      }\r\n    });\r\n    if (toValue > 0 && this.props.onSwipeableLeftWillOpen) {\r\n      this.props.onSwipeableLeftWillOpen();\r\n    } else if (toValue < 0 && this.props.onSwipeableRightWillOpen) {\r\n      this.props.onSwipeableRightWillOpen();\r\n    }\r\n\r\n    if (toValue === 0) {\r\n      this.props.onSwipeableWillClose && this.props.onSwipeableWillClose();\r\n    } else {\r\n      this.props.onSwipeableWillOpen && this.props.onSwipeableWillOpen();\r\n    }\r\n  };\r\n\r\n  _onRowLayout = ({ nativeEvent }) => {\r\n    this.setState({ rowWidth: nativeEvent.layout.width });\r\n  };\r\n\r\n  _currentOffset = () => {\r\n    const { leftWidth = 0, rowWidth = 0, rowState } = this.state;\r\n    const { rightOffset = rowWidth } = this.state;\r\n    const rightWidth = rowWidth - rightOffset;\r\n    if (rowState === 1) {\r\n      return leftWidth;\r\n    } else if (rowState === -1) {\r\n      return -rightWidth;\r\n    }\r\n    return 0;\r\n  };\r\n\r\n  close = () => {\r\n    this._animateRow(this._currentOffset(), 0);\r\n  };\r\n\r\n  openLeft = () => {\r\n    const { leftWidth = 0 } = this.state;\r\n    this._animateRow(this._currentOffset(), leftWidth);\r\n  };\r\n\r\n  openRight = () => {\r\n    const { rowWidth = 0 } = this.state;\r\n    const { rightOffset = rowWidth } = this.state;\r\n    const rightWidth = rowWidth - rightOffset;\r\n    this._animateRow(this._currentOffset(), -rightWidth);\r\n  };\r\n\r\n  render() {\r\n    const { rowState } = this.state;\r\n    const { children, renderLeftActions, renderRightActions } = this.props;\r\n\r\n    const left = renderLeftActions && (\r\n      <Animated.View\r\n        style={[\r\n          styles.leftActions,\r\n          { transform: [{ translateX: this._leftActionTranslate }] },\r\n        ]}>\r\n        {renderLeftActions(this._showLeftAction, this._transX)}\r\n        <View\r\n          onLayout={({ nativeEvent }) =>\r\n            this.setState({ leftWidth: nativeEvent.layout.x })\r\n          }\r\n        />\r\n      </Animated.View>\r\n    );\r\n\r\n    const right = renderRightActions && (\r\n      <Animated.View\r\n        style={[\r\n          styles.rightActions,\r\n          { transform: [{ translateX: this._rightActionTranslate }] },\r\n        ]}>\r\n        {renderRightActions(this._showRightAction, this._transX)}\r\n        <View\r\n          onLayout={({ nativeEvent }) =>\r\n            this.setState({ rightOffset: nativeEvent.layout.x })\r\n          }\r\n        />\r\n      </Animated.View>\r\n    );\r\n\r\n    return (\r\n      <PanGestureHandler\r\n        activeOffsetX={[-10, 10]}\r\n        {...this.props}\r\n        onGestureEvent={this._onGestureEvent}\r\n        onHandlerStateChange={this._onHandlerStateChange}>\r\n        <Animated.View\r\n          onLayout={this._onRowLayout}\r\n          style={[styles.container, this.props.containerStyle]}>\r\n          {left}\r\n          {right}\r\n          <TapGestureHandler\r\n            enabled={rowState !== 0}\r\n            onHandlerStateChange={this._onTapHandlerStateChange}>\r\n            <Animated.View\r\n              pointerEvents={rowState === 0 ? 'auto' : 'box-only'}\r\n              style={[\r\n                {\r\n                  transform: [{ translateX: this._transX }],\r\n                },\r\n                this.props.childrenContainerStyle,\r\n              ]}>\r\n              {children}\r\n            </Animated.View>\r\n          </TapGestureHandler>\r\n        </Animated.View>\r\n      </PanGestureHandler>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    overflow: 'hidden',\r\n  },\r\n  leftActions: {\r\n    ...StyleSheet.absoluteFillObject,\r\n    flexDirection: I18nManager.isRTL? 'row-reverse': 'row',\r\n  },\r\n  rightActions: {\r\n    ...StyleSheet.absoluteFillObject,\r\n    flexDirection: I18nManager.isRTL ? 'row' : 'row-reverse',\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}