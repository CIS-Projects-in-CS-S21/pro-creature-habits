{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/elianacohen/AndroidStudioProjects/pro-creature-habits/node_modules/react-native-progress/Shapes/Sector.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Shape as ARTShape, Path as ARTPath } from '@react-native-community/art';\nvar CIRCLE = Math.PI * 2;\n\nfunction makeSectorPath(x, y, angle, radius) {\n  if (angle >= CIRCLE) {\n    return new ARTPath().moveTo(x, y).move(radius, 0).arc(0, radius * 2, radius, radius).arc(0, radius * -2, radius, radius).close();\n  }\n\n  var startAngle = Math.PI / 2 - angle;\n  var endAngle = Math.PI / 2;\n  var arcFlag = angle > Math.PI ? 1 : 0;\n  var centerX = x + radius;\n  var centerY = y + radius;\n  return \"M\" + centerX + \" \" + centerY + \"\\n          L\" + (centerX + Math.cos(startAngle) * radius) + \" \" + (centerY - Math.sin(startAngle) * radius) + \"\\n          A\" + radius + \" \" + radius + \" 0 \" + arcFlag + \" 0 \" + (centerX + Math.cos(endAngle) * radius) + \" \" + (centerY - Math.sin(endAngle) * radius) + \"\\n          L\" + centerX + \" \" + centerY;\n}\n\nvar Sector = function (_Component) {\n  _inherits(Sector, _Component);\n\n  var _super = _createSuper(Sector);\n\n  function Sector() {\n    _classCallCheck(this, Sector);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Sector, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          angle = _this$props.angle,\n          radius = _this$props.radius,\n          offset = _this$props.offset,\n          restProps = _objectWithoutProperties(_this$props, [\"angle\", \"radius\", \"offset\"]);\n\n      var path = makeSectorPath(offset.left || 0, offset.top || 0, angle, radius);\n      return React.createElement(ARTShape, _extends({\n        d: path\n      }, restProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 12\n        }\n      }));\n    }\n  }]);\n\n  return Sector;\n}(Component);\n\nSector.propTypes = {\n  angle: PropTypes.number.isRequired,\n  radius: PropTypes.number.isRequired,\n  offset: PropTypes.shape({\n    top: PropTypes.number,\n    left: PropTypes.number\n  })\n};\nSector.defaultProps = {\n  offset: {\n    top: 0,\n    left: 0\n  }\n};\nexport { Sector as default };","map":{"version":3,"sources":["/Users/elianacohen/AndroidStudioProjects/pro-creature-habits/node_modules/react-native-progress/Shapes/Sector.js"],"names":["React","Component","PropTypes","Shape","ARTShape","Path","ARTPath","CIRCLE","Math","PI","makeSectorPath","x","y","angle","radius","moveTo","move","arc","close","startAngle","endAngle","arcFlag","centerX","centerY","cos","sin","Sector","props","offset","restProps","path","left","top","propTypes","number","isRequired","shape","defaultProps"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,KAAK,IAAIC,QAAlB,EAA4BC,IAAI,IAAIC,OAApC,QAAmD,6BAAnD;AAEA,IAAMC,MAAM,GAAGC,IAAI,CAACC,EAAL,GAAU,CAAzB;;AAEA,SAASC,cAAT,CAAwBC,CAAxB,EAA2BC,CAA3B,EAA8BC,KAA9B,EAAqCC,MAArC,EAA6C;AAC3C,MAAID,KAAK,IAAIN,MAAb,EAAqB;AACnB,WAAQ,IAAID,OAAJ,EAAD,CACJS,MADI,CACGJ,CADH,EACMC,CADN,EAEJI,IAFI,CAECF,MAFD,EAES,CAFT,EAGJG,GAHI,CAGA,CAHA,EAGGH,MAAM,GAAG,CAHZ,EAGeA,MAHf,EAGuBA,MAHvB,EAIJG,GAJI,CAIA,CAJA,EAIGH,MAAM,GAAG,CAAC,CAJb,EAIgBA,MAJhB,EAIwBA,MAJxB,EAKJI,KALI,EAAP;AAMD;;AAED,MAAMC,UAAU,GAAGX,IAAI,CAACC,EAAL,GAAU,CAAV,GAAcI,KAAjC;AACA,MAAMO,QAAQ,GAAGZ,IAAI,CAACC,EAAL,GAAU,CAA3B;AACA,MAAMY,OAAO,GAAGR,KAAK,GAAGL,IAAI,CAACC,EAAb,GAAkB,CAAlB,GAAsB,CAAtC;AACA,MAAMa,OAAO,GAAGX,CAAC,GAAGG,MAApB;AACA,MAAMS,OAAO,GAAGX,CAAC,GAAGE,MAApB;AAEA,eAAWQ,OAAX,SAAsBC,OAAtB,sBACWD,OAAO,GAAGd,IAAI,CAACgB,GAAL,CAASL,UAAT,IAAuBL,MAD5C,WACsDS,OAAO,GAC3Df,IAAI,CAACiB,GAAL,CAASN,UAAT,IAAuBL,MAFzB,sBAGWA,MAHX,SAGqBA,MAHrB,WAGiCO,OAHjC,YAG8CC,OAAO,GACnDd,IAAI,CAACgB,GAAL,CAASJ,QAAT,IAAqBN,MAJvB,WAIiCS,OAAO,GAAGf,IAAI,CAACiB,GAAL,CAASL,QAAT,IAAqBN,MAJhE,sBAKWQ,OALX,SAKsBC,OALtB;AAMD;;IAEoBG,M;;;;;;;;;;;;;WAcnB,kBAAS;AAAA,wBACyC,KAAKC,KAD9C;AAAA,UACCd,KADD,eACCA,KADD;AAAA,UACQC,MADR,eACQA,MADR;AAAA,UACgBc,MADhB,eACgBA,MADhB;AAAA,UAC2BC,SAD3B;;AAEP,UAAMC,IAAI,GAAGpB,cAAc,CACzBkB,MAAM,CAACG,IAAP,IAAe,CADU,EAEzBH,MAAM,CAACI,GAAP,IAAc,CAFW,EAGzBnB,KAHyB,EAIzBC,MAJyB,CAA3B;AAMA,aAAO,oBAAC,QAAD;AAAU,QAAA,CAAC,EAAEgB;AAAb,SAAuBD,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;;;;EAvBiC5B,S;;AAAfyB,M,CACZO,S,GAAY;AACjBpB,EAAAA,KAAK,EAAEX,SAAS,CAACgC,MAAV,CAAiBC,UADP;AAEjBrB,EAAAA,MAAM,EAAEZ,SAAS,CAACgC,MAAV,CAAiBC,UAFR;AAGjBP,EAAAA,MAAM,EAAE1B,SAAS,CAACkC,KAAV,CAAgB;AACtBJ,IAAAA,GAAG,EAAE9B,SAAS,CAACgC,MADO;AAEtBH,IAAAA,IAAI,EAAE7B,SAAS,CAACgC;AAFM,GAAhB;AAHS,C;AADAR,M,CAUZW,Y,GAAe;AACpBT,EAAAA,MAAM,EAAE;AAAEI,IAAAA,GAAG,EAAE,CAAP;AAAUD,IAAAA,IAAI,EAAE;AAAhB;AADY,C;SAVHL,M","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Shape as ARTShape, Path as ARTPath } from '@react-native-community/art';\n\nconst CIRCLE = Math.PI * 2;\n\nfunction makeSectorPath(x, y, angle, radius) {\n  if (angle >= CIRCLE) {\n    return (new ARTPath())\n      .moveTo(x, y)\n      .move(radius, 0)\n      .arc(0, radius * 2, radius, radius)\n      .arc(0, radius * -2, radius, radius)\n      .close();\n  }\n\n  const startAngle = Math.PI / 2 - angle;\n  const endAngle = Math.PI / 2;\n  const arcFlag = angle > Math.PI ? 1 : 0;\n  const centerX = x + radius;\n  const centerY = y + radius;\n\n  return `M${centerX} ${centerY}\n          L${centerX + Math.cos(startAngle) * radius} ${centerY -\n    Math.sin(startAngle) * radius}\n          A${radius} ${radius} 0 ${arcFlag} 0 ${centerX +\n    Math.cos(endAngle) * radius} ${centerY - Math.sin(endAngle) * radius}\n          L${centerX} ${centerY}`;\n}\n\nexport default class Sector extends Component {\n  static propTypes = {\n    angle: PropTypes.number.isRequired, // in radians\n    radius: PropTypes.number.isRequired,\n    offset: PropTypes.shape({\n      top: PropTypes.number,\n      left: PropTypes.number,\n    }),\n  };\n\n  static defaultProps = {\n    offset: { top: 0, left: 0 },\n  };\n\n  render() {\n    const { angle, radius, offset, ...restProps } = this.props;\n    const path = makeSectorPath(\n      offset.left || 0,\n      offset.top || 0,\n      angle,\n      radius\n    );\n    return <ARTShape d={path} {...restProps} />;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}