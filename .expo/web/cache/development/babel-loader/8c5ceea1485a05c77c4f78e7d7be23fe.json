{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport QueryBuilder from \"./query_builder\";\n\nvar DatabaseLayer = function () {\n  function DatabaseLayer(database, tableName) {\n    _classCallCheck(this, DatabaseLayer);\n\n    this.database = database;\n    this.tableName = tableName;\n  }\n\n  _createClass(DatabaseLayer, [{\n    key: \"executeBulkSql\",\n    value: function executeBulkSql(sqls) {\n      var params,\n          database,\n          _args = arguments;\n      return _regeneratorRuntime.async(function executeBulkSql$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              params = _args.length > 1 && _args[1] !== undefined ? _args[1] : [];\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(this.database());\n\n            case 3:\n              database = _context.sent;\n              return _context.abrupt(\"return\", new Promise(function (txResolve, txReject) {\n                database.transaction(function (tx) {\n                  Promise.all(sqls.map(function (sql, index) {\n                    return new Promise(function (sqlResolve, sqlReject) {\n                      tx.executeSql(sql, params[index], function (_, _ref) {\n                        var rows = _ref.rows,\n                            insertId = _ref.insertId;\n                        sqlResolve({\n                          rows: rows._array,\n                          insertId: insertId\n                        });\n                      }, function (_, error) {\n                        sqlReject(error);\n                      });\n                    });\n                  })).then(txResolve).catch(txReject);\n                });\n              }));\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"executeSql\",\n    value: function executeSql(sql) {\n      var params,\n          _args2 = arguments;\n      return _regeneratorRuntime.async(function executeSql$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              params = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : [];\n              return _context2.abrupt(\"return\", this.executeBulkSql([sql], [params]).then(function (res) {\n                return res[0];\n              }).catch(function (error) {\n                throw error;\n              }));\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"createTable\",\n    value: function createTable(columnMapping) {\n      var sql = QueryBuilder.createTable(this.tableName, columnMapping);\n      return this.executeSql(sql).then(function () {\n        return true;\n      });\n    }\n  }, {\n    key: \"dropTable\",\n    value: function dropTable() {\n      var sql = QueryBuilder.dropTable(this.tableName);\n      return this.executeSql(sql).then(function () {\n        return true;\n      });\n    }\n  }, {\n    key: \"insert\",\n    value: function insert(obj) {\n      var _this = this;\n\n      var sql = QueryBuilder.insert(this.tableName, obj);\n      var params = Object.values(obj);\n      return this.executeSql(sql, params).then(function (_ref2) {\n        var insertId = _ref2.insertId;\n        return _this.find(insertId);\n      });\n    }\n  }, {\n    key: \"update\",\n    value: function update(obj) {\n      var sql = QueryBuilder.update(this.tableName, obj);\n\n      var id = obj.id,\n          props = _objectWithoutProperties(obj, [\"id\"]);\n\n      var params = Object.values(props);\n      return this.executeSql(sql, [].concat(_toConsumableArray(params), [id]));\n    }\n  }, {\n    key: \"bulkInsertOrReplace\",\n    value: function bulkInsertOrReplace(objs) {\n      var _this2 = this;\n\n      var list = objs.reduce(function (accumulator, obj) {\n        var params = Object.values(obj);\n        accumulator.sqls.push(QueryBuilder.insertOrReplace(_this2.tableName, obj));\n        accumulator.params.push(params);\n        return accumulator;\n      }, {\n        sqls: [],\n        params: []\n      });\n      return this.executeBulkSql(list.sqls, list.params);\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy(id) {\n      var sql = QueryBuilder.destroy(this.tableName);\n      return this.executeSql(sql, [id]).then(function () {\n        return true;\n      });\n    }\n  }, {\n    key: \"destroyAll\",\n    value: function destroyAll() {\n      var sql = QueryBuilder.destroyAll(this.tableName);\n      return this.executeSql(sql).then(function () {\n        return true;\n      });\n    }\n  }, {\n    key: \"find\",\n    value: function find(id) {\n      var sql = QueryBuilder.find(this.tableName);\n      return this.executeSql(sql, [id]).then(function (_ref3) {\n        var rows = _ref3.rows;\n        return rows[0];\n      });\n    }\n  }, {\n    key: \"findBy\",\n    value: function findBy() {\n      var where = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var options = {\n        where: where,\n        limit: 1\n      };\n      var sql = QueryBuilder.query(this.tableName, options);\n      var params = Object.values(options.where);\n      return this.executeSql(sql, params).then(function (_ref4) {\n        var rows = _ref4.rows;\n        return rows[0];\n      });\n    }\n  }, {\n    key: \"query\",\n    value: function query() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var sql = QueryBuilder.query(this.tableName, options);\n      var params = Object.values(options.where || {});\n      return this.executeSql(sql, params).then(function (_ref5) {\n        var rows = _ref5.rows;\n        return rows;\n      });\n    }\n  }]);\n\n  return DatabaseLayer;\n}();\n\nexport { DatabaseLayer as default };","map":{"version":3,"sources":["C:/Users/Matt/Documents/GitHub/pro-creature-habits/node_modules/expo-sqlite-orm/src/DatabaseLayer.js"],"names":["QueryBuilder","DatabaseLayer","database","tableName","sqls","params","Promise","txResolve","txReject","transaction","tx","all","map","sql","index","sqlResolve","sqlReject","executeSql","_","rows","insertId","_array","error","then","catch","executeBulkSql","res","columnMapping","createTable","dropTable","obj","insert","Object","values","find","update","id","props","objs","list","reduce","accumulator","push","insertOrReplace","destroy","destroyAll","where","options","limit","query"],"mappings":"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","sourcesContent":["import QueryBuilder from './query_builder'\r\n\r\nexport default class DatabaseLayer {\r\n  constructor(database, tableName) {\r\n    this.database = database\r\n    this.tableName = tableName\r\n  }\r\n\r\n  async executeBulkSql(sqls, params = []) {\r\n    const database = await this.database()\r\n    return new Promise((txResolve, txReject) => {\r\n      database.transaction(tx => {\r\n        Promise.all(sqls.map((sql, index) => {\r\n          return new Promise((sqlResolve, sqlReject) => {\r\n            tx.executeSql(\r\n              sql,\r\n              params[index],\r\n              (_, { rows, insertId }) => {\r\n                sqlResolve({ rows: rows._array, insertId })\r\n              },\r\n              (_, error) => { sqlReject(error) }\r\n            )\r\n          })\r\n        })).then(txResolve).catch(txReject)\r\n      })\r\n    })\r\n  }\r\n\r\n  async executeSql(sql, params = []) {\r\n    return this.executeBulkSql([sql], [params])\r\n      .then(res => res[0])\r\n      .catch(error => { throw error })\r\n  }\r\n\r\n  createTable(columnMapping) {\r\n    const sql = QueryBuilder.createTable(this.tableName, columnMapping)\r\n    return this.executeSql(sql).then(() => true)\r\n  }\r\n\r\n  dropTable() {\r\n    const sql = QueryBuilder.dropTable(this.tableName)\r\n    return this.executeSql(sql).then(() => true)\r\n  }\r\n\r\n  insert(obj) {\r\n    const sql = QueryBuilder.insert(this.tableName, obj)\r\n    const params = Object.values(obj)\r\n    return this.executeSql(sql, params).then(({ insertId }) => this.find(insertId))\r\n  }\r\n\r\n  update(obj) {\r\n    const sql = QueryBuilder.update(this.tableName, obj)\r\n    const { id, ...props } = obj\r\n    const params = Object.values(props)\r\n    return this.executeSql(sql, [...params, id])\r\n  }\r\n\r\n  bulkInsertOrReplace(objs) {\r\n    const list = objs.reduce((accumulator, obj) => {\r\n      const params = Object.values(obj)\r\n      accumulator.sqls.push(QueryBuilder.insertOrReplace(this.tableName, obj))\r\n      accumulator.params.push(params)\r\n      return accumulator\r\n    }, { sqls: [], params: [] })\r\n    return this.executeBulkSql(list.sqls, list.params)\r\n  }\r\n\r\n  destroy(id) {\r\n    const sql = QueryBuilder.destroy(this.tableName)\r\n    return this.executeSql(sql, [id]).then(() => true)\r\n  }\r\n\r\n  destroyAll() {\r\n    const sql = QueryBuilder.destroyAll(this.tableName)\r\n    return this.executeSql(sql).then(() => true)\r\n  }\r\n\r\n  find(id) {\r\n    const sql = QueryBuilder.find(this.tableName)\r\n    return this.executeSql(sql, [id]).then(({ rows }) => rows[0])\r\n  }\r\n\r\n  findBy(where = {}) {\r\n    const options = { where, limit: 1 }\r\n    const sql = QueryBuilder.query(this.tableName, options)\r\n    const params = Object.values(options.where)\r\n    return this.executeSql(sql, params).then(({ rows }) => rows[0])\r\n  }\r\n\r\n  query(options = {}) {\r\n    const sql = QueryBuilder.query(this.tableName, options)\r\n    const params = Object.values(options.where || {})\r\n    return this.executeSql(sql, params).then(({ rows }) => rows)\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}