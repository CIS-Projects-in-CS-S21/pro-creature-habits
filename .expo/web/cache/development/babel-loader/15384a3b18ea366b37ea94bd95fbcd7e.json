{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nexport var ADD = 'ADD';\nexport var FILTER_ALL_PET = 'FILTER_ALL_PET';\nexport var FILTER_PET = 'FILTER_PET';\nexport var SELECTED = 'SELECTED';\nexport var EAT = 'EAT';\nimport { ItemInventory } from \"../components/ItemInventory\";\nvar boughtItems = JSON.parse(JSON.stringify(ItemInventory));\n\nfor (var _i = 0, _Object$entries = Object.entries(boughtItems); _i < _Object$entries.length; _i++) {\n  var _ref = _Object$entries[_i];\n\n  var _ref2 = _slicedToArray(_ref, 2);\n\n  var key = _ref2[0];\n  var value = _ref2[1];\n  boughtItems[key].bought = 0;\n  boughtItems[key].show = false;\n  boughtItems[key].wear = false;\n}\n\nvar petInventoryReducer = function petInventoryReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : boughtItems;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  console.log(\"in reducer \" + action.data);\n\n  for (var _i2 = 0, _Object$entries2 = Object.entries(state); _i2 < _Object$entries2.length; _i2++) {\n    var _ref3 = _Object$entries2[_i2];\n\n    var _ref4 = _slicedToArray(_ref3, 2);\n\n    var _key = _ref4[0];\n    var _value = _ref4[1];\n    console.log(_key + \" :? \" + _value.bought);\n  }\n\n  var copy = JSON.parse(JSON.stringify(state));\n\n  switch (action.type) {\n    case ADD:\n      console.log(action.data);\n      copy[action.data].bought = copy[action.data].bought + 1;\n      copy[action.data].show = true;\n      return copy;\n\n    case FILTER_ALL_PET:\n      for (var _i3 = 0, _Object$entries3 = Object.entries(copy); _i3 < _Object$entries3.length; _i3++) {\n        var _ref5 = _Object$entries3[_i3];\n\n        var _ref6 = _slicedToArray(_ref5, 2);\n\n        var _key2 = _ref6[0];\n        var _value2 = _ref6[1];\n\n        if (copy[_key2].bought != 0) {\n          copy[_key2].show = true;\n        }\n      }\n\n      console.log(\"trying to filter pet for all\");\n      return copy;\n\n    case FILTER_PET:\n      console.log(\"trying to filter pet for: \" + action.data);\n\n      for (var _i4 = 0, _Object$entries4 = Object.entries(copy); _i4 < _Object$entries4.length; _i4++) {\n        var _ref7 = _Object$entries4[_i4];\n\n        var _ref8 = _slicedToArray(_ref7, 2);\n\n        var _key3 = _ref8[0];\n        var _value3 = _ref8[1];\n\n        if (copy[_key3].category != action.data) {\n          copy[_key3].show = false;\n        } else if (copy[_key3].bought != 0) {\n          copy[_key3].show = true;\n        } else {\n          copy[_key3].show = false;\n        }\n      }\n\n      return copy;\n\n    case SELECTED:\n      if (action.data == \"select_food\") {\n        copy[action.thing].bought = copy[action.thing].bought - 1;\n        copy[action.thing].wear = true;\n\n        if (copy[action.thing].bought != 0) {\n          copy[action.thing].show = true;\n        } else {\n          copy[action.thing].show = false;\n        }\n      } else if (action.data == \"select_toys\") {\n        copy[action.thing].wear = true;\n      } else {\n        var type = \"hat\";\n\n        if (action.thing.includes('shirt')) {\n          type = \"shirt\";\n        } else if (action.thing.includes('shoes')) {\n          type = \"shoes\";\n        }\n\n        for (var _i5 = 0, _Object$entries5 = Object.entries(copy); _i5 < _Object$entries5.length; _i5++) {\n          var _ref9 = _Object$entries5[_i5];\n\n          var _ref10 = _slicedToArray(_ref9, 2);\n\n          var _key4 = _ref10[0];\n          var _value4 = _ref10[1];\n\n          if (copy[_key4].name.includes(type)) {\n            copy[_key4].wear = false;\n          }\n        }\n\n        copy[action.thing].wear = true;\n      }\n\n      return copy;\n\n    case EAT:\n      copy[action.thing].wear = false;\n      return copy;\n\n    default:\n      return state;\n  }\n};\n\nexport default petInventoryReducer;","map":{"version":3,"sources":["C:/Users/Matt/Documents/GitHub/pro-creature-habits/src/redux/petInventory.js"],"names":["ADD","FILTER_ALL_PET","FILTER_PET","SELECTED","EAT","ItemInventory","boughtItems","JSON","parse","stringify","Object","entries","key","value","bought","show","wear","petInventoryReducer","state","action","console","log","data","copy","type","category","thing","includes","name"],"mappings":";AAAA,OAAO,IAAMA,GAAG,GAAG,KAAZ;AACP,OAAO,IAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,IAAMC,UAAU,GAAG,YAAnB;AACP,OAAO,IAAMC,QAAQ,GAAG,UAAjB;AACP,OAAO,IAAMC,GAAG,GAAG,KAAZ;AAGP,SAAQC,aAAR;AAEA,IAAIC,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeJ,aAAf,CAAX,CAAlB;;AACA,mCAA2BK,MAAM,CAACC,OAAP,CAAeL,WAAf,CAA3B,qCAAwD;AAAA;;AAAA;;AAAA,MAA5CM,GAA4C;AAAA,MAAvCC,KAAuC;AACpDP,EAAAA,WAAW,CAACM,GAAD,CAAX,CAAiBE,MAAjB,GAA0B,CAA1B;AACAR,EAAAA,WAAW,CAACM,GAAD,CAAX,CAAiBG,IAAjB,GAAwB,KAAxB;AACAT,EAAAA,WAAW,CAACM,GAAD,CAAX,CAAiBI,IAAjB,GAAwB,KAAxB;AACH;;AACD,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,GAA+B;AAAA,MAA9BC,KAA8B,uEAAxBZ,WAAwB;AAAA,MAAXa,MAAW;AACvDC,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAcF,MAAM,CAACG,IAAjC;;AACA,uCAA2BZ,MAAM,CAACC,OAAP,CAAeO,KAAf,CAA3B,wCAAkD;AAAA;;AAAA;;AAAA,QAAtCN,IAAsC;AAAA,QAAjCC,MAAiC;AAC1CO,IAAAA,OAAO,CAACC,GAAR,CAAYT,IAAG,GAAC,MAAJ,GAAWC,MAAK,CAACC,MAA7B;AACH;;AAET,MAAIS,IAAI,GAAGhB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeS,KAAf,CAAX,CAAX;;AAEC,UAAQC,MAAM,CAACK,IAAf;AACC,SAAKxB,GAAL;AACIoB,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACG,IAAnB;AACAC,MAAAA,IAAI,CAACJ,MAAM,CAACG,IAAR,CAAJ,CAAkBR,MAAlB,GAA2BS,IAAI,CAACJ,MAAM,CAACG,IAAR,CAAJ,CAAkBR,MAAlB,GAA2B,CAAtD;AACAS,MAAAA,IAAI,CAACJ,MAAM,CAACG,IAAR,CAAJ,CAAkBP,IAAlB,GAAyB,IAAzB;AACA,aAAOQ,IAAP;;AACJ,SAAKtB,cAAL;AACI,2CAA2BS,MAAM,CAACC,OAAP,CAAeY,IAAf,CAA3B,wCAAiD;AAAA;;AAAA;;AAAA,YAArCX,KAAqC;AAAA,YAAhCC,OAAgC;;AAC7C,YAAIU,IAAI,CAACX,KAAD,CAAJ,CAAUE,MAAV,IAAoB,CAAxB,EAA2B;AACvBS,UAAAA,IAAI,CAACX,KAAD,CAAJ,CAAUG,IAAV,GAAiB,IAAjB;AACH;AAEJ;;AACDK,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACH,aAAOE,IAAP;;AACD,SAAKrB,UAAL;AACIkB,MAAAA,OAAO,CAACC,GAAR,CAAY,+BAA6BF,MAAM,CAACG,IAAhD;;AACM,2CAA2BZ,MAAM,CAACC,OAAP,CAAeY,IAAf,CAA3B,wCAAiD;AAAA;;AAAA;;AAAA,YAArCX,KAAqC;AAAA,YAAhCC,OAAgC;;AAC7C,YAAIU,IAAI,CAACX,KAAD,CAAJ,CAAUa,QAAV,IAAsBN,MAAM,CAACG,IAAjC,EAAuC;AACnCC,UAAAA,IAAI,CAACX,KAAD,CAAJ,CAAUG,IAAV,GAAiB,KAAjB;AACH,SAFD,MAEO,IAAIQ,IAAI,CAACX,KAAD,CAAJ,CAAUE,MAAV,IAAoB,CAAxB,EAA2B;AAC9BS,UAAAA,IAAI,CAACX,KAAD,CAAJ,CAAUG,IAAV,GAAiB,IAAjB;AACH,SAFM,MAEA;AACHQ,UAAAA,IAAI,CAACX,KAAD,CAAJ,CAAUG,IAAV,GAAiB,KAAjB;AACH;AACJ;;AACV,aAAOQ,IAAP;;AACE,SAAKpB,QAAL;AACI,UAAIgB,MAAM,CAACG,IAAP,IAAe,aAAnB,EAAkC;AACrBC,QAAAA,IAAI,CAACJ,MAAM,CAACO,KAAR,CAAJ,CAAmBZ,MAAnB,GAA4BS,IAAI,CAACJ,MAAM,CAACO,KAAR,CAAJ,CAAmBZ,MAAnB,GAA4B,CAAxD;AACAS,QAAAA,IAAI,CAACJ,MAAM,CAACO,KAAR,CAAJ,CAAmBV,IAAnB,GAA0B,IAA1B;;AACA,YAAIO,IAAI,CAACJ,MAAM,CAACO,KAAR,CAAJ,CAAmBZ,MAAnB,IAA6B,CAAjC,EAAoC;AAACS,UAAAA,IAAI,CAACJ,MAAM,CAACO,KAAR,CAAJ,CAAmBX,IAAnB,GAA0B,IAA1B;AAAgC,SAArE,MACK;AAACQ,UAAAA,IAAI,CAACJ,MAAM,CAACO,KAAR,CAAJ,CAAmBX,IAAnB,GAA0B,KAA1B;AAAiC;AACnD,OALD,MAKO,IAAII,MAAM,CAACG,IAAP,IAAe,aAAnB,EAAkC;AAClCC,QAAAA,IAAI,CAACJ,MAAM,CAACO,KAAR,CAAJ,CAAmBV,IAAnB,GAA0B,IAA1B;AACN,OAFM,MAEA;AACH,YAAIQ,IAAI,GAAG,KAAX;;AACI,YAAIL,MAAM,CAACO,KAAP,CAAaC,QAAb,CAAsB,OAAtB,CAAJ,EAAoC;AACjCH,UAAAA,IAAI,GAAG,OAAP;AACF,SAFD,MAEO,IAAIL,MAAM,CAACO,KAAP,CAAaC,QAAb,CAAsB,OAAtB,CAAJ,EAAoC;AACxCH,UAAAA,IAAI,GAAG,OAAP;AACF;;AACD,6CAA2Bd,MAAM,CAACC,OAAP,CAAeY,IAAf,CAA3B,wCAAiD;AAAA;;AAAA;;AAAA,cAArCX,KAAqC;AAAA,cAAhCC,OAAgC;;AAC7C,cAAIU,IAAI,CAACX,KAAD,CAAJ,CAAUgB,IAAV,CAAeD,QAAf,CAAwBH,IAAxB,CAAJ,EAAmC;AAC/BD,YAAAA,IAAI,CAACX,KAAD,CAAJ,CAAUI,IAAV,GAAiB,KAAjB;AACH;AACJ;;AACDO,QAAAA,IAAI,CAACJ,MAAM,CAACO,KAAR,CAAJ,CAAmBV,IAAnB,GAA0B,IAA1B;AACH;;AACL,aAAOO,IAAP;;AACA,SAAKnB,GAAL;AACImB,MAAAA,IAAI,CAACJ,MAAM,CAACO,KAAR,CAAJ,CAAmBV,IAAnB,GAA0B,KAA1B;AACA,aAAOO,IAAP;;AACX;AACC,aAAOL,KAAP;AAtDF;AAwDA,CAhED;;AAkEA,eAAeD,mBAAf","sourcesContent":["export const ADD = 'ADD';\r\nexport const FILTER_ALL_PET = 'FILTER_ALL_PET'\r\nexport const FILTER_PET = 'FILTER_PET';\r\nexport const SELECTED = 'SELECTED';\r\nexport const EAT = 'EAT';\r\n//possibly add in a SELL in case we want to allow them to sell directly from their inventory\r\n\r\nimport {ItemInventory} from \"../components/ItemInventory\";\r\n\r\nlet boughtItems = JSON.parse(JSON.stringify(ItemInventory));\r\nfor (const [key, value] of Object.entries(boughtItems)) {\r\n    boughtItems[key].bought = 0;\r\n    boughtItems[key].show = false;\r\n    boughtItems[key].wear = false;\r\n}\r\nconst petInventoryReducer = (state=boughtItems, action) => {\r\n    console.log(\"in reducer \"+action.data)\r\n    for (const [key, value] of Object.entries(state)) {\r\n            console.log(key+\" :? \"+value.bought)\r\n        }\r\n\r\nlet copy = JSON.parse(JSON.stringify(state));\r\n\r\n\tswitch (action.type) {\r\n\t\tcase ADD:\r\n\t\t    console.log(action.data);\r\n\t\t    copy[action.data].bought = copy[action.data].bought + 1;\r\n\t\t    copy[action.data].show = true;\r\n\t\t    return copy;\r\n\t\tcase FILTER_ALL_PET:\r\n\t\t    for (const [key, value] of Object.entries(copy)) {\r\n\t\t        if (copy[key].bought != 0) {\r\n\t\t            copy[key].show = true;\r\n\t\t        }\r\n\r\n\t\t    }\r\n\t\t    console.log(\"trying to filter pet for all\")\r\n\t\t\treturn copy;\r\n\t\tcase FILTER_PET:\r\n\t\t    console.log(\"trying to filter pet for: \"+action.data)\r\n            for (const [key, value] of Object.entries(copy)) {\r\n                if (copy[key].category != action.data) {\r\n                    copy[key].show = false;\r\n                } else if (copy[key].bought != 0) {\r\n                    copy[key].show = true;\r\n                } else {\r\n                    copy[key].show = false;\r\n                }\r\n            }\r\n\t\t\treturn copy;\r\n\t    case SELECTED:\r\n\t        if (action.data == \"select_food\") {\r\n                \t\t    copy[action.thing].bought = copy[action.thing].bought - 1;\r\n                \t\t    copy[action.thing].wear = true;\r\n                \t\t    if (copy[action.thing].bought != 0) {copy[action.thing].show = true;}\r\n                \t\t    else {copy[action.thing].show = false;}\r\n\t        } else if (action.data == \"select_toys\") {\r\n                copy[action.thing].wear = true;\r\n\t        } else {\r\n\t            let type = \"hat\";\r\n                 if (action.thing.includes('shirt')) {\r\n                    type = \"shirt\"\r\n                 } else if (action.thing.includes('shoes')) {\r\n                    type = \"shoes\";\r\n                 }\r\n                 for (const [key, value] of Object.entries(copy)) {\r\n                     if (copy[key].name.includes(type)) {\r\n                         copy[key].wear = false;\r\n                     }\r\n                 }\r\n                 copy[action.thing].wear = true;\r\n             }\r\n\t        return copy;\r\n\t        case EAT:\r\n\t            copy[action.thing].wear = false;\r\n\t            return copy;\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nexport default petInventoryReducer;"]},"metadata":{},"sourceType":"module"}